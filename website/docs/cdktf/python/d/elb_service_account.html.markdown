---
subcategory: "ELB Classic"
layout: "aws"
page_title: "AWS: aws_elb_service_account"
description: |-
  Get AWS Elastic Load Balancing Service Account
---

# Data Source: aws_elb_service_account

Use this data source to get the Account ID of the [AWS Elastic Load Balancing Service Account](http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html#attach-bucket-policy)
in a given region for the purpose of permitting in S3 bucket policy.

~> **Note:** For AWS Regions opened since Jakarta (`ap-southeast-3`) in December 2021, AWS [documents that](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html#attach-bucket-policy) a [service principal name](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-services) should be used instead of an AWS account ID in any relevant IAM policy.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_s3_bucket_elb_logs = aws.s3_bucket.S3Bucket(self, "elb_logs",
            bucket="my-elb-tf-test-bucket"
        )
        aws.s3_bucket_acl.S3BucketAcl(self, "elb_logs_acl",
            acl="private",
            bucket=cdktf.Token.as_string(aws_s3_bucket_elb_logs.id)
        )
        data_aws_elb_service_account_main =
        aws.data_aws_elb_service_account.DataAwsElbServiceAccount(self, "main")
        data_aws_iam_policy_document_allow_elb_logging =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "allow_elb_logging",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["s3:PutObject"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=[
                        cdktf.Token.as_string(data_aws_elb_service_account_main.arn)
                    ],
                    type="AWS"
                )
                ],
                resources=["${" + aws_s3_bucket_elb_logs.arn + "}/AWSLogs/*"]
            )
            ]
        )
        aws.elb.Elb(self, "bar",
            access_logs=ElbAccessLogs(
                bucket=cdktf.Token.as_string(aws_s3_bucket_elb_logs.id),
                interval=5
            ),
            availability_zones=["us-west-2a"],
            listener=[ElbListener(
                instance_port=8000,
                instance_protocol="http",
                lb_port=80,
                lb_protocol="http"
            )
            ],
            name="my-foobar-terraform-elb"
        )
        aws_s3_bucket_policy_allow_elb_logging =
        aws.s3_bucket_policy.S3BucketPolicy(self, "allow_elb_logging_5",
            bucket=cdktf.Token.as_string(aws_s3_bucket_elb_logs.id),
            policy=cdktf.Token.as_string(data_aws_iam_policy_document_allow_elb_logging.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_policy_allow_elb_logging.override_logical_id("allow_elb_logging")
```

## Argument Reference

* `region` - (Optional) Name of the region whose AWS ELB account ID is desired.
  Defaults to the region from the AWS provider configuration.

## Attributes Reference

* `id` - ID of the AWS ELB service account in the selected region.
* `arn` - ARN of the AWS ELB service account in the selected region.

<!-- cache-key: cdktf-0.17.0-pre.15 input-1136eec562eadfb507e8c362a0aaa4949c74ea65c9a847b7db5918f2368edfc9 -->