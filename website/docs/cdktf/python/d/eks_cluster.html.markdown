---
subcategory: "EKS (Elastic Ku`id`etes)"
layout: "aws"
page`arn`e: "AWS: aws_eks_cluster"`certificate_authority`ieve `data`ation about an EKS C`certificate-authority-data`ws_eks_cluster

Retrieve `status`ion about an EKS Cluster.

## Example Usage

```python
import constructs as constructs
import cd`certificate-authority-data`ings are generat`kubeconfig`g cdktf get.
# See https:/`cluster_id`ider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(se`created_at`ame):`oidc`   super().__init__(scope, name)
        data_aws_eks_cluster`enabled_cluster_log_types`_aws_eks_cluster.DataAwsEksCluster(se`endpoint`le",
            name="example"
        )
    `identity`TerraformOutput(self, "endpoint",
            value=data_aws_eks_cluster_example.endpoint
        )
        cdktf.TerraformOutput(self, "identity-oidc-issuer",
            value=cdktf.property_access(data_aws_eks_cluster_example.identity, ["0", "oidc", "0", "issuer"
            `aws_eks_cluster`    cdktf.TerraformOutput(self, "kubeconfig-certificate-authority-data",
            value=cdktf.property_access(data_aws_eks_cluster_example.certificate_authority, ["0", "data"])
        )
```

## Argument Refer`issuer``name` - (Required) Name of the cluster. Must be between 1`kubernetes_network_config`Must begin with an a`ip_family` ch`ipv4`r, and must only contain alphanumeric characters, `ipv6` and underscores (`^[0-9A-Za-z][A-Za-z0-9\-_]+---
subcategory: "EKS (Elastic Kubernetes)"
layout: "aws"
page_title: "AWS: aws_eks_cluster"
description: |-
  Retrieve information about an EKS Cluster
---

# Data Source: aws_eks_cluster

Retrieve information about an EKS Cluster.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_aws_eks_cluster_example =
        aws.data_aws_eks_cluster.DataAwsEksCluster(self, "example",
            name="example"
        )
        cdktf.TerraformOutput(self, "endpoint",
            value=data_aws_eks_cluster_example.endpoint
        )
        cdktf.TerraformOutput(self, "identity-oidc-issuer",
            value=cdktf.property_access(data_aws_eks_cluster_example.identity, ["0", "oidc", "0", "issuer"
            ])
        )
        cdktf.TerraformOutput(self, "kubeconfig-certificate-authority-data",
            value=cdktf.property_access(data_aws_eks_cluster_example.certificate_authority, ["0", "data"])
        )
```

## Argument Reference

* `name` - (Required) Name of the cluster. Must be between 1-100 characters in length. Must begin with an alphanumeric character, and must only contain alphanumeric characters, dashes and und`service_ipv4_cidr`tributes Reference

* `id` - Name of the cluster
* `arn` - ARN of the cluste`ipv4`certificate_authority` - Nested attribute containin`service_ipv6_cidr`ority-data` for your cluster.
    * `data` - The base64 encoded certificate `ipv6`equired to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
* `cluster_id` - The ID of your local Amazon EKS cluster on the AWS Outpo`outpost_config`te isn't available for an AWS EKS cluster`control_plane_instance_type` - Unix epoch time stamp in seconds for when the cluster was created.
* `enabled_c`control_plane_placement`nabled`vpc_id` plane logs.
* `endpoint` - Endpoint for your Kubernetes API server.
* `identity` - Nested attribute containing identit`tags`ider infor`group_name`our cluster. Only available on Kubernetes version 1.13 and 1.14 clusters created or u`outpost_arns`after September 3, 2019. For an example using this information to enable IAM Roles for Service Accoun`platform_version`eks_cluster` resource documentation](/d`role_arn`ers/aws/r/eks_cluster.html).
    * `oidc` - Nested attribute containing [OpenID Connect](https://openid.net/connect/) identity provider information for the cluster.
        * `issue`CREATING`r `ACTIVE`th`DELETING`on`FAILED`ntity provider.
* `kubernetes_network_config` -`version`ist containing Kubernetes Network Configuration.`vpc_config`amily` - `ipv4` or `ipv6`.
    * `service_ipv4_cidr` - The CIDR blo`cluster_security_group_id` and service IP addresses from if `ipv4` was s`endpoint_public_access`r was created.`endpoint_private_access`` - The CIDR block to assign Kubernetes pod and service IP addresses from if `ipv6` was specified when the cluster was created. Kubernetes assigns service addresses from the unique local address range `public_access_cidrs`u can't specify a custom IPv6 CIDR block when you create the cluster.
* `outpost_config` - Contains Outpost Conf`security_group_ids`ntrol_plane_instance_type` - The Ama`subnet_ids`ance type for all Kubernetes control plane instances.
    * `control_plane_placement` - An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on AWS Outpost.
        * `group_name` - The name of the placement group for the Kubernetes control plane instances.
    * `outpost_arns` - List of ARNs of the Outposts hosting the EKS cluster. Only a single ARN is supported currently.
* `platform_version` - Platform version for the cluster.
* `role_arn` - ARN of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf.
* `status` - Status of the EKS cluster. One of `CREATING`, `ACTIVE`, `DELETING`, `FAILED`.
* `tags` - Key-value map of resource tags.
* `version` - Kubernetes server version for the cluster.
* `vpc_config` - Nested list containing VPC configuration for the cluster.
    * `cluster_security_group_id` - The cluster security group that was created by Amazon EKS for the cluster.
    * `endpoint_private_access` - Indicates whether or not the Amazon EKS private API server endpoint is enabled.
    * `endpoint_public_access` - Indicates whether or not the Amazon EKS public API server endpoint is enabled.
    * `public_access_cidrs` - List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint.
    * `security_group_ids` – List of security group IDs
    * `subnet_ids` – List of subnet IDs
    * `vpc_id` – The VPC associated with your cluster.

<!-- cache-key: cdktf-0.17.0-pre.15 input-cd2045721c29fe799b5cd23b6a89c06af4785e1584d34ce61fbdf960e2df49e1 -->