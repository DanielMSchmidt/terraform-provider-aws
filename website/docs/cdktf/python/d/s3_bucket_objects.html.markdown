---
subcategory: "S3 (Simple Storage)"
layout: "aws"
page_title: "AWS: aws_s3_bucket_objects"
description: |-
    Returns keys and metadata of S3 objects
---

# Data Source: aws_s3_bucket_objects

~> **NOTE:** The `aws_s3_bucket_objects` data source is DEPRECATED and will be removed in a future version! Use `aws_s3_objects` instead, where new features and fixes will be added.

~> **NOTE on `max_keys`:** Retrieving very large numbers of keys can adversely affect Terraform's performance.

The objects data source returns keys (i.e., file names) and other metadata about objects in an S3 bucket.

## Example Usage

The following example retrieves a list of all object keys in an S3 bucket and creates corresponding Terraform object data sources:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_aws_s3_bucket_objects_my_objects =
        aws.data_aws_s3_bucket_objects.DataAwsS3BucketObjects(self, "my_objects",
            bucket="ourcorp"
        )
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        data_aws_s3_object_object_info_count = cdktf.TerraformCount.of(
            cdktf.Fn.length_of(data_aws_s3_bucket_objects_my_objects.keys))
        aws.data_aws_s3_object.DataAwsS3Object(self, "object_info",
            bucket=cdktf.Token.as_string(data_aws_s3_bucket_objects_my_objects.id),
            key=cdktf.Token.as_string(
                cdktf.Fn.element(data_aws_s3_bucket_objects_my_objects.keys,
                    cdktf.Token.as_number(data_aws_s3_object_object_info_count.index))),
            count=data_aws_s3_object_object_info_count
        )
```

## Argument Reference

The following arguments are supported:

* `bucket` - (Required) Lists object keys in this S3 bucket. Alternatively, an [S3 access point](https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html) ARN can be specified
* `prefix` - (Optional) Limits results to object keys with this prefix (Default: none)
* `delimiter` - (Optional) Character used to group keys (Default: none)
* `encoding_type` - (Optional) Encodes keys using this method (Default: none; besides none, only "url" can be used)
* `max_keys` - (Optional) Maximum object keys to return (Default: 1000)
* `start_after` - (Optional) Returns key names lexicographically after a specific object key in your bucket (Default: none; S3 lists object keys in UTF-8 character encoding in lexicographical order)
* `fetch_owner` - (Optional) Boolean specifying whether to populate the owner list (Default: false)

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `keys` - List of strings representing object keys
* `common_prefixes` - List of any keys between `prefix` and the next occurrence of `delimiter` (i.e., similar to subdirectories of the `prefix` "directory"); the list is only returned when you specify `delimiter`
* `id` - S3 Bucket.
* `owners` - List of strings representing object owner IDs (see `fetch_owner` above)

<!-- cache-key: cdktf-0.17.0-pre.15 input-34c6c01f7b9a0b1bf8ca8a1823540fdf096f69a47882f85708b9cf54d72eff17 -->