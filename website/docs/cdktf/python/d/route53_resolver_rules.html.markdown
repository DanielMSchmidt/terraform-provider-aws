---
subcategory: "Route 53 Resolver"
layout: "aws"
page_title: "AWS: aws_route53_resolver_rules"
description: |-
    Provides details about a set of Route53 Resolver rules
---

# Data Source: aws_route53_resolver_rules

`aws_route53_resolver_rules` provides details about a set of Route53 Resolver rules.

## Example Usage

### Retrieving the default resolver rule

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws.data_aws_route53_resolver_rules.DataAwsRoute53ResolverRules(self, "example",
            owner_id="Route 53 Resolver",
            rule_type="RECURSIVE",
            share_status="NOT_SHARED"
        )
```

### Retrieving forward rules shared with me

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws.data_aws_route53_resolver_rules.DataAwsRoute53ResolverRules(self, "example",
            rule_type="FORWARD",
            share_status="SHARED_WITH_ME"
        )
```

### Retrieving rules by name regex

Resolver rules whose name contains `abc`.

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws.data_aws_route53_resolver_rules.DataAwsRoute53ResolverRules(self, "example",
            name_regex=".*abc.*"
        )
```

## Argument Reference

The arguments of this data source act as filters for querying the available resolver rules in the current region.

* `name_regex` - (Optional) Regex string to filter resolver rule names.
  The filtering is done locally, so could have a performance impact if the result is large.
  This argument should be used along with other arguments to limit the number of results returned.
* `owner_id` (Optional) When the desired resolver rules are shared with another AWS account, the account ID of the account that the rules are shared with.
* `resolver_endpoint_id` (Optional) ID of the outbound resolver endpoint for the desired resolver rules.
* `rule_type` (Optional) Rule type of the desired resolver rules. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`.
* `share_status` (Optional) Whether the desired resolver rules are shared and, if so, whether the current account is sharing the rules with another account, or another account is sharing the rules with the current account. Valid values are `NOT_SHARED`, `SHARED_BY_ME` or `SHARED_WITH_ME`

## Attributes Reference

The following attributes are exported:

* `id` - AWS Region.
* `resolver_rule_ids` - IDs of the matched resolver rules.

<!-- cache-key: cdktf-0.17.0-pre.15 input-9678f9fdda7f7e24e8ef3757576f0a54e78762a810795158608335a2c5f7f0a5 -->