---
subcategory: "EKS (Elastic Kubernetes)"
layout: "aws"
page_title: "AWS: aws_eks_cluster_auth"
description: |-
  Get an authentication token to communicate with an EKS Cluster
---

# Data Source: aws_eks_cluster_auth

Get an authentication token to communicate with an EKS cluster.

Uses IAM credentials from the AWS provider to generate a temporary token that is compatible with
[AWS IAM Authenticator](https://github.com/kubernetes-sigs/aws-iam-authenticator) authentication.
This can be used to authenticate to an EKS cluster or to a cluster that has the AWS IAM Authenticator
server configured.

~> **NOTE:** Dynamically configuring a Terraform Provider via data sources currently has implications on [resource import support](https://github.com/hashicorp/terraform/issues/13018).

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.kubernetes as kubernetes
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: kubernetes.
        #     For a more precise conversion please use the --provider flag in convert.
        data_aws_eks_cluster_example =
        aws.data_aws_eks_cluster.DataAwsEksCluster(self, "example",
            name="example"
        )
        data_aws_eks_cluster_auth_example =
        aws.data_aws_eks_cluster_auth.DataAwsEksClusterAuth(self, "example_1",
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_eks_cluster_auth_example.override_logical_id("example")
        kubernetes.provider.KubernetesProvider(self, "kubernetes",
            cluster_ca_certificate=cdktf.Fn.base64decode(
                cdktf.Token.as_string(
                    cdktf.property_access(data_aws_eks_cluster_example.certificate_authority, ["0", "data"
                    ]))),
            host=data_aws_eks_cluster_example.endpoint,
            token=data_aws_eks_cluster_auth_example.token
        )
```

## Argument Reference

* `name` - (Required) Name of the cluster

## Attributes Reference

* `id` - Name of the cluster.
* `token` - Token to use to authenticate with the cluster.

<!-- cache-key: cdktf-0.17.0-pre.15 input-de3307324e94622fa903191b8bb65f99964fd36735cd113c6526f127a3281941 -->