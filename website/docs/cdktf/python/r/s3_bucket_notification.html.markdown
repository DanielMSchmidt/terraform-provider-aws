---
subcategory: "S3 (Simple Storage)"
layout: "aws"
page_title: "AWS: aws_s3_bucket_notification"
description: |-
  Manages a S3 Bucket Notification Configuration
---

# Resource: aws_s3_bucket_notification

Manages a S3 Bucket Notification Configuration. For additional information, see the [Configuring S3 Event Notifications section in the Amazon S3 Developer Guide](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html).

~> **NOTE:** S3 Buckets only support a single notification configuration. Declaring multiple `aws_s3_bucket_notification` resources to the same S3 Bucket will cause a perpetual difference in configuration. See the example "Trigger multiple Lambda functions" for an option.

## Example Usage

### Add notification configuration to SNS Topic

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_s3_bucket_bucket = aws.s3_bucket.S3Bucket(self, "bucket",
            bucket="your-bucket-name"
        )
        data_aws_iam_policy_document_topic =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "topic",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["SNS:Publish"],
                condition=[DataAwsIamPolicyDocumentStatementCondition(
                    test="ArnLike",
                    values=[cdktf.Token.as_string(aws_s3_bucket_bucket.arn)],
                    variable="aws:SourceArn"
                )
                ],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["s3.amazonaws.com"],
                    type="Service"
                )
                ],
                resources=["arn:aws:sns:*:*:s3-event-notification-topic"]
            )
            ]
        )
        aws_sns_topic_topic = aws.sns_topic.SnsTopic(self, "topic_2",
            name="s3-event-notification-topic",
            policy=cdktf.Token.as_string(data_aws_iam_policy_document_topic.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_sns_topic_topic.override_logical_id("topic")
        aws.s3_bucket_notification.S3BucketNotification(self, "bucket_notification",
            bucket=cdktf.Token.as_string(aws_s3_bucket_bucket.id),
            topic=[S3BucketNotificationTopic(
                events=["s3:ObjectCreated:*"],
                filter_suffix=".log",
                topic_arn=cdktf.Token.as_string(aws_sns_topic_topic.arn)
            )
            ]
        )
```

### Add notification configuration to SQS Queue

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_s3_bucket_bucket = aws.s3_bucket.S3Bucket(self, "bucket",
            bucket="your-bucket-name"
        )
        data_aws_iam_policy_document_queue =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "queue",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sqs:SendMessage"],
                condition=[DataAwsIamPolicyDocumentStatementCondition(
                    test="ArnEquals",
                    values=[cdktf.Token.as_string(aws_s3_bucket_bucket.arn)],
                    variable="aws:SourceArn"
                )
                ],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["*"],
                    type="*"
                )
                ],
                resources=["arn:aws:sqs:*:*:s3-event-notification-queue"]
            )
            ]
        )
        aws_sqs_queue_queue = aws.sqs_queue.SqsQueue(self, "queue_2",
            name="s3-event-notification-queue",
            policy=cdktf.Token.as_string(data_aws_iam_policy_document_queue.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_sqs_queue_queue.override_logical_id("queue")
        aws.s3_bucket_notification.S3BucketNotification(self, "bucket_notification",
            bucket=cdktf.Token.as_string(aws_s3_bucket_bucket.id),
            queue=[S3BucketNotificationQueue(
                events=["s3:ObjectCreated:*"],
                filter_suffix=".log",
                queue_arn=cdktf.Token.as_string(aws_sqs_queue_queue.arn)
            )
            ]
        )
```

### Add notification configuration to Lambda Function

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_s3_bucket_bucket = aws.s3_bucket.S3Bucket(self, "bucket",
            bucket="your-bucket-name"
        )
        data_aws_iam_policy_document_assume_role =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["lambda.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        aws_iam_role_iam_for_lambda = aws.iam_role.IamRole(self, "iam_for_lambda",
            assume_role_policy=cdktf.Token.as_string(data_aws_iam_policy_document_assume_role.json),
            name="iam_for_lambda"
        )
        aws_lambda_function_func = aws.lambda_function.LambdaFunction(self, "func",
            filename="your-function.zip",
            function_name="example_lambda_name",
            handler="exports.example",
            role=cdktf.Token.as_string(aws_iam_role_iam_for_lambda.arn),
            runtime="go1.x"
        )
        aws_lambda_permission_allow_bucket =
        aws.lambda_permission.LambdaPermission(self, "allow_bucket",
            action="lambda:InvokeFunction",
            function_name=cdktf.Token.as_string(aws_lambda_function_func.arn),
            principal="s3.amazonaws.com",
            source_arn=cdktf.Token.as_string(aws_s3_bucket_bucket.arn),
            statement_id="AllowExecutionFromS3Bucket"
        )
        aws.s3_bucket_notification.S3BucketNotification(self, "bucket_notification",
            bucket=cdktf.Token.as_string(aws_s3_bucket_bucket.id),
            depends_on=[aws_lambda_permission_allow_bucket],
            lambda_function=[S3BucketNotificationLambdaFunction(
                events=["s3:ObjectCreated:*"],
                filter_prefix="AWSLogs/",
                filter_suffix=".log",
                lambda_function_arn=cdktf.Token.as_string(aws_lambda_function_func.arn)
            )
            ]
        )
```

### Trigger multiple Lambda functions

```terraform
data "aws_iam_policy_document" "assume_role" {
  effect = "Allow"

  principals {
    type        = "Service"
    identifiers = ["lambda.amazonaws.com"]
  }

  actions = ["sts:AssumeRole"]
}

resource "aws_iam_role" "iam_for_lambda" {
  name               = "iam_for_lambda"
  assume_role_policy = data.aws_iam_policy_document.assume_role.json
}

resource "aws_lambda_permission" "allow_bucket1" {
  statement_id  = "AllowExecutionFromS3Bucket1"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.func1.arn
  principal     = "s3.amazonaws.com"
  source_arn    = aws_s3_bucket.bucket.arn
}

resource "aws_lambda_function" "func1" {
  filename      = "your-function1.zip"
  function_name = "example_lambda_name1"
  role          = aws_iam_role.iam_for_lambda.arn
  handler       = "exports.example"
  runtime       = "go1.x"
}

resource "aws_lambda_permission" "allow_bucket2" {
  statement_id  = "AllowExecutionFromS3Bucket2"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.func2.arn
  principal     = "s3.amazonaws.com"
  source_arn    = aws_s3_bucket.bucket.arn
}

resource "aws_lambda_function" "func2" {
  filename      = "your-function2.zip"
  function_name = "example_lambda_name2"
  role          = aws_iam_role.iam_for_lambda.arn
  handler       = "exports.example"
}

resource "aws_s3_bucket" "bucket" {
  bucket = "your-bucket-name"
}

resource "aws_s3_bucket_notification" "bucket_notification" {
  bucket = aws_s3_bucket.bucket.id

  lambda_function {
    lambda_function_arn = aws_lambda_function.func1.arn
    events              = ["s3:ObjectCreated:*"]
    filter_prefix       = "AWSLogs/"
    filter_suffix       = ".log"
  }

  lambda_function {
    lambda_function_arn = aws_lambda_function.func2.arn
    events              = ["s3:ObjectCreated:*"]
    filter_prefix       = "OtherLogs/"
    filter_suffix       = ".log"
  }

  depends_on = [
    aws_lambda_permission.allow_bucket1,
    aws_lambda_permission.allow_bucket2,
  ]
}
```

### Add multiple notification configurations to SQS Queue

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_s3_bucket_bucket = aws.s3_bucket.S3Bucket(self, "bucket",
            bucket="your-bucket-name"
        )
        data_aws_iam_policy_document_queue =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "queue",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sqs:SendMessage"],
                condition=[DataAwsIamPolicyDocumentStatementCondition(
                    test="ArnEquals",
                    values=[cdktf.Token.as_string(aws_s3_bucket_bucket.arn)],
                    variable="aws:SourceArn"
                )
                ],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["*"],
                    type="*"
                )
                ],
                resources=["arn:aws:sqs:*:*:s3-event-notification-queue"]
            )
            ]
        )
        aws_sqs_queue_queue = aws.sqs_queue.SqsQueue(self, "queue_2",
            name="s3-event-notification-queue",
            policy=cdktf.Token.as_string(data_aws_iam_policy_document_queue.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_sqs_queue_queue.override_logical_id("queue")
        aws.s3_bucket_notification.S3BucketNotification(self, "bucket_notification",
            bucket=cdktf.Token.as_string(aws_s3_bucket_bucket.id),
            queue=[S3BucketNotificationQueue(
                events=["s3:ObjectCreated:*"],
                filter_prefix="images/",
                id="image-upload-event",
                queue_arn=cdktf.Token.as_string(aws_sqs_queue_queue.arn)
            ), S3BucketNotificationQueue(
                events=["s3:ObjectCreated:*"],
                filter_prefix="videos/",
                id="video-upload-event",
                queue_arn=cdktf.Token.as_string(aws_sqs_queue_queue.arn)
            )
            ]
        )
```

For Terraform's [JSON syntax](https://www.terraform.io/docs/configuration/syntax.html), use an array instead of defining the `queue` key twice.

```json
{
	"bucket": "${aws_s3_bucket.bucket.id}",
	"queue": [
		{
			"id": "image-upload-event",
			"queue_arn": "${aws_sqs_queue.queue.arn}",
			"events": ["s3:ObjectCreated:*"],
			"filter_prefix": "images/"
		},
		{
			"id": "video-upload-event",
			"queue_arn": "${aws_sqs_queue.queue.arn}",
			"events": ["s3:ObjectCreated:*"],
			"filter_prefix": "videos/"
		}
	]
}
```

## Argument Reference

The following arguments are required:

* `bucket` - (Required) Name of the bucket for notification configuration.

The following arguments are optional:

* `eventbridge` - (Optional) Whether to enable Amazon EventBridge notifications.
* `lambda_function` - (Optional, Multiple) Used to configure notifications to a Lambda Function. See below.
* `queue` - (Optional) Notification configuration to SQS Queue. See below.
* `topic` - (Optional) Notification configuration to SNS Topic. See below.

### `lambda_function`

* `events` - (Required) [Event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
* `filter_prefix` - (Optional) Object key name prefix.
* `filter_suffix` - (Optional) Object key name suffix.
* `id` - (Optional) Unique identifier for each of the notification configurations.
* `lambda_function_arn` - (Required) Lambda function ARN.

### `queue`

* `events` - (Required) Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
* `filter_prefix` - (Optional) Object key name prefix.
* `filter_suffix` - (Optional) Object key name suffix.
* `id` - (Optional) Unique identifier for each of the notification configurations.
* `queue_arn` - (Required) SQS queue ARN.

### `topic`

* `events` - (Required) [Event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
* `filter_prefix` - (Optional) Object key name prefix.
* `filter_suffix` - (Optional) Object key name suffix.
* `id` - (Optional) Unique identifier for each of the notification configurations.
* `topic_arn` - (Required) SNS topic ARN.

## Attributes Reference

No additional attributes are exported.

## Import

S3 bucket notification can be imported using the `bucket`, e.g.,

```
$ terraform import aws_s3_bucket_notification.bucket_notification bucket-name
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-489d8ffca26f8219391c35cacef22fea96f664e76586d1ae7dd5c4c3e77769c8 -->