---
subcategory: "EFS (Elastic File System)"
layout: "aws"
page_title: "AWS: aws_efs_file_system_policy"
description: |-
  Provides an Elastic File System (EFS) File System Policy resource.
---

# Resource: aws_efs_file_system_policy

Provides an Elastic File System (EFS) File System Policy resource.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_efs_file_system_fs = aws.efs_file_system.EfsFileSystem(self, "fs",
            creation_token="my-product"
        )
        data_aws_iam_policy_document_policy =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "policy",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["elasticfilesystem:ClientMount", "elasticfilesystem:ClientWrite"
                ],
                condition=[DataAwsIamPolicyDocumentStatementCondition(
                    test="Bool",
                    values=["true"],
                    variable="aws:SecureTransport"
                )
                ],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["*"],
                    type="AWS"
                )
                ],
                resources=[cdktf.Token.as_string(aws_efs_file_system_fs.arn)],
                sid="ExampleStatement01"
            )
            ]
        )
        aws_efs_file_system_policy_policy =
        aws.efs_file_system_policy.EfsFileSystemPolicy(self, "policy_2",
            file_system_id=cdktf.Token.as_string(aws_efs_file_system_fs.id),
            policy=cdktf.Token.as_string(data_aws_iam_policy_document_policy.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_efs_file_system_policy_policy.override_logical_id("policy")
```

## Argument Reference

The following arguments are required:

* `file_system_id` - (Required) The ID of the EFS file system.
* `policy` - (Required) The JSON formatted file system policy for the EFS file system. see [Docs](https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies) for more info.

The following arguments are optional:

* `bypass_policy_lockout_safety_check` - (Optional) A flag to indicate whether to bypass the `aws_efs_file_system_policy` lockout safety check. The policy lockout safety check determines whether the policy in the request will prevent the principal making the request will be locked out from making future `PutFileSystemPolicy` requests on the file system. Set `bypass_policy_lockout_safety_check` to `true` only when you intend to prevent the principal that is making the request from making a subsequent `PutFileSystemPolicy` request on the file system. The default value is `false`.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The ID that identifies the file system (e.g., fs-ccfc0d65).

## Import

The EFS file system policies can be imported using the `id`, e.g.,

```
$ terraform import aws_efs_file_system_policy.foo fs-6fa144c6
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-54ff1ad3ad8111bee37a73d864b18607a7a080dcf8045cba19027a4bd29ed440 -->