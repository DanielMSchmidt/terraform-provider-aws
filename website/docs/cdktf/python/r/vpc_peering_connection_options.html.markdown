---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_vpc_peering_connection_options"
description: |-
  Provides a resource to manage VPC peering connection options.
---

# Resource: aws_vpc_peering_connection_options

Provides a resource to manage VPC peering connection options.

~> **NOTE on VPC Peering Connections and VPC Peering Connection Options:** Terraform provides
both a standalone VPC Peering Connection Options and a [VPC Peering Connection](vpc_peering_connection.html)
resource with `accepter` and `requester` attributes. Do not manage options for the same VPC peering
connection in both a VPC Peering Connection resource and a VPC Peering Connection Options resource.
Doing so will cause a conflict of options and will overwrite the options.
Using a VPC Peering Connection Options resource decouples management of the connection options from
management of the VPC Peering Connection and allows options to be set correctly in cross-region and
cross-account scenarios.

## Example Usage

### Basic Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_vpc_bar = aws.vpc.Vpc(self, "bar",
            cidr_block="10.1.0.0/16"
        )
        aws_vpc_foo = aws.vpc.Vpc(self, "foo",
            cidr_block="10.0.0.0/16"
        )
        aws_vpc_peering_connection_foo =
        aws.vpc_peering_connection.VpcPeeringConnection(self, "foo_2",
            auto_accept=True,
            peer_vpc_id=cdktf.Token.as_string(aws_vpc_bar.id),
            vpc_id=cdktf.Token.as_string(aws_vpc_foo.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_peering_connection_foo.override_logical_id("foo")
        aws_vpc_peering_connection_options_foo =
        aws.vpc_peering_connection_options.VpcPeeringConnectionOptions(self, "foo_3",
            accepter=VpcPeeringConnectionOptionsAccepter(
                allow_remote_vpc_dns_resolution=True
            ),
            vpc_peering_connection_id=cdktf.Token.as_string(aws_vpc_peering_connection_foo.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_peering_connection_options_foo.override_logical_id("foo")
```

### Cross-Account Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_requester = aws.provider.AwsProvider(self, "aws",
            alias="requester"
        )
        aws_accepter = aws.provider.AwsProvider(self, "aws_1",
            alias="accepter"
        )
        aws_vpc_main = aws.vpc.Vpc(self, "main",
            cidr_block="10.0.0.0/16",
            enable_dns_hostnames=True,
            enable_dns_support=True,
            provider=aws_requester
        )
        aws_vpc_peer = aws.vpc.Vpc(self, "peer",
            cidr_block="10.1.0.0/16",
            enable_dns_hostnames=True,
            enable_dns_support=True,
            provider=aws_accepter
        )
        data_aws_caller_identity_peer =
        aws.data_aws_caller_identity.DataAwsCallerIdentity(self, "peer_4",
            provider=aws_accepter
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_caller_identity_peer.override_logical_id("peer")
        aws_vpc_peering_connection_peer =
        aws.vpc_peering_connection.VpcPeeringConnection(self, "peer_5",
            auto_accept=False,
            peer_owner_id=cdktf.Token.as_string(data_aws_caller_identity_peer.account_id),
            peer_vpc_id=cdktf.Token.as_string(aws_vpc_peer.id),
            provider=aws_requester,
            tags={
                "Side": "Requester"
            },
            vpc_id=cdktf.Token.as_string(aws_vpc_main.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_peering_connection_peer.override_logical_id("peer")
        aws_vpc_peering_connection_accepter_peer =
        aws.vpc_peering_connection_accepter.VpcPeeringConnectionAccepterA(self, "peer_6",
            auto_accept=True,
            provider=aws_accepter,
            tags={
                "Side": "Accepter"
            },
            vpc_peering_connection_id=cdktf.Token.as_string(aws_vpc_peering_connection_peer.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_peering_connection_accepter_peer.override_logical_id("peer")
        aws.vpc_peering_connection_options.VpcPeeringConnectionOptions(self, "accepter",
            accepter=VpcPeeringConnectionOptionsAccepter(
                allow_remote_vpc_dns_resolution=True
            ),
            provider=aws_accepter,
            vpc_peering_connection_id=cdktf.Token.as_string(aws_vpc_peering_connection_accepter_peer.id)
        )
        aws.vpc_peering_connection_options.VpcPeeringConnectionOptions(self, "requester",
            provider=aws_requester,
            requester=VpcPeeringConnectionOptionsRequester(
                allow_remote_vpc_dns_resolution=True
            ),
            vpc_peering_connection_id=cdktf.Token.as_string(aws_vpc_peering_connection_accepter_peer.id)
        )
```

## Argument Reference

The following arguments are supported:

* `vpc_peering_connection_id` - (Required) The ID of the requester VPC peering connection.
* `accepter` (Optional) - An optional configuration block that allows for [VPC Peering Connection]
(https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts
the peering connection (a maximum of one).
* `requester` (Optional) - A optional configuration block that allows for [VPC Peering Connection]
(https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests
the peering connection (a maximum of one).

#### Accepter and Requester Arguments

-> **Note:** When enabled, the DNS resolution feature requires that VPCs participating in the peering
must have support for the DNS hostnames enabled. This can be done using the [`enable_dns_hostnames`]
(vpc.html#enable_dns_hostnames) attribute in the [`aws_vpc`](vpc.html) resource. See [Using DNS with Your VPC]
(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-dns.html) user guide for more information.

* `allow_remote_vpc_dns_resolution` - (Optional) Allow a local VPC to resolve public DNS hostnames to
private IP addresses when queried from instances in the peer VPC.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The ID of the VPC Peering Connection Options.

## Import

VPC Peering Connection Options can be imported using the `vpc peering id`, e.g.,

```
$ terraform import aws_vpc_peering_connection_options.foo pcx-111aaa111
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-8c27bca8ec169bb4ef5fa020ee0ff5cf62951b4ac811c57c48885fa02f7b9d22 -->