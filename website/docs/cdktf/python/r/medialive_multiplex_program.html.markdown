---
subcategory: "Elemental MediaLive"
layout: "aws"
page_title: "AWS: aws_medialive_multiplex_program"
description: |-
  Terraform resource for managing an AWS MediaLive MultiplexProgram.
---

# Resource: aws_medialive_multiplex_program

Terraform resource for managing an AWS MediaLive MultiplexProgram.

## Example Usage

### Basic Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_aws_availability_zones_available =
        aws.data_aws_availability_zones.DataAwsAvailabilityZones(self, "available",
            state="available"
        )
        aws_medialive_multiplex_example =
        aws.medialive_multiplex.MedialiveMultiplex(self, "example",
            availability_zones=[
                cdktf.Token.as_string(
                    cdktf.property_access(data_aws_availability_zones_available.names, ["0"])),
                cdktf.Token.as_string(
                    cdktf.property_access(data_aws_availability_zones_available.names, ["1"]))
            ],
            multiplex_settings=MedialiveMultiplexMultiplexSettings(
                maximum_video_buffer_delay_milliseconds=1000,
                transport_stream_bitrate=1000000,
                transport_stream_id=1,
                transport_stream_reserved_bitrate=1
            ),
            name="example-multiplex-changed",
            start_multiplex=True,
            tags={
                "tag1": "value1"
            }
        )
        aws_medialive_multiplex_program_example =
        aws.medialive_multiplex_program.MedialiveMultiplexProgram(self, "example_2",
            multiplex_id=cdktf.Token.as_string(aws_medialive_multiplex_example.id),
            multiplex_program_settings=[MedialiveMultiplexProgramMultiplexProgramSettings(
                preferred_channel_pipeline="CURRENTLY_ACTIVE",
                program_number=1,
                video_settings=[MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettings(
                    constant_bitrate=100000
                )
                ]
            )
            ],
            program_name="example_program"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_medialive_multiplex_program_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `multiplex_id` - (Required) Multiplex ID.
* `program_name` - (Required) Unique program name.
* `multiplex_program_settings` - (Required) MultiplexProgram settings. See [Multiplex Program Settings](#multiple-program-settings) for more details.

The following arguments are optional:

### Multiple Program Settings

* `program_number` - (Required) Unique program number.
* `preferred_channel_pipeline` - (Required) Enum for preferred channel pipeline. Options are `CURRENTLY_ACTIVE`, `PIPELINE_0`, or `PIPELINE_1`.
* `service_descriptor` - (Optional) Service Descriptor. See [Service Descriptor](#service-descriptor) for more details.
* `video_settings` - (Optional) Video settings. See [Video Settings](#video-settings) for more details.

### Service Descriptor

* `provider_name` - (Required) Unique provider name.
* `service_name` - (Required) Unique service name.

### Video Settings

* `constant_bitrate` - (Optional) Constant bitrate value.
* `statmux_settings` - (Optional) Statmux settings. See [Statmux Settings](#statmux-settings) for more details.

### Statmux Settings

* `minimum_bitrate` - (Optional) Minimum bitrate.
* `maximum_bitrate` - (Optional) Maximum bitrate.
* `priority` - (Optional) Priority value.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - ID of the MultiplexProgram.
* `example_attribute` - Concise description.

## Import

MediaLive MultiplexProgram can be imported using the `id`, or a combination of "`program_name`/`multiplex_id`" e.g.,

```
$ terraform import aws_medialive_multiplex_program.example example_program/1234567
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-722125df1321ef5b771d15cc9dce283405dd208cd56f6e1dc48edc5fc64d7ff4 -->