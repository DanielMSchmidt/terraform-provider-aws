---
subcategory: "API Gateway"
layout: "aws"
page_title: "AWS: aws_api_gateway_method"
description: |-
  Provides a HTTP Method for an API Gateway Resource.
---

# Resource: aws_api_gateway_method

Provides a HTTP Method for an API Gateway Resource.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_api_gateway_rest_api_my_demo_api =
        aws.api_gateway_rest_api.ApiGatewayRestApi(self, "MyDemoAPI",
            description="This is my API for demonstration purposes",
            name="MyDemoAPI"
        )
        aws_api_gateway_resource_my_demo_resource =
        aws.api_gateway_resource.ApiGatewayResource(self, "MyDemoResource",
            parent_id=cdktf.Token.as_string(aws_api_gateway_rest_api_my_demo_api.root_resource_id),
            path_part="mydemoresource",
            rest_api_id=cdktf.Token.as_string(aws_api_gateway_rest_api_my_demo_api.id)
        )
        aws.api_gateway_method.ApiGatewayMethod(self, "MyDemoMethod",
            authorization="NONE",
            http_method="GET",
            resource_id=cdktf.Token.as_string(aws_api_gateway_resource_my_demo_resource.id),
            rest_api_id=cdktf.Token.as_string(aws_api_gateway_rest_api_my_demo_api.id)
        )
```

## Usage with Cognito User Pool Authorizer

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        cognito_user_pool_name = cdktf.TerraformVariable(self, "cognito_user_pool_name")
        aws_api_gateway_rest_api_this =
        aws.api_gateway_rest_api.ApiGatewayRestApi(self, "this",
            name="with-authorizer"
        )
        data_aws_cognito_user_pools_this =
        aws.data_aws_cognito_user_pools.DataAwsCognitoUserPools(self, "this_2",
            name=cognito_user_pool_name.string_value
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_cognito_user_pools_this.override_logical_id("this")
        aws_api_gateway_authorizer_this =
        aws.api_gateway_authorizer.ApiGatewayAuthorizer(self, "this_3",
            name="CognitoUserPoolAuthorizer",
            provider_arns=cdktf.Token.as_list(data_aws_cognito_user_pools_this.arns),
            rest_api_id=cdktf.Token.as_string(aws_api_gateway_rest_api_this.id),
            type="COGNITO_USER_POOLS"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_api_gateway_authorizer_this.override_logical_id("this")
        aws_api_gateway_resource_this =
        aws.api_gateway_resource.ApiGatewayResource(self, "this_4",
            parent_id=cdktf.Token.as_string(aws_api_gateway_rest_api_this.root_resource_id),
            path_part="{proxy+}",
            rest_api_id=cdktf.Token.as_string(aws_api_gateway_rest_api_this.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_api_gateway_resource_this.override_logical_id("this")
        aws.api_gateway_method.ApiGatewayMethod(self, "any",
            authorization="COGNITO_USER_POOLS",
            authorizer_id=cdktf.Token.as_string(aws_api_gateway_authorizer_this.id),
            http_method="ANY",
            request_parameters={
                "method.request.path.proxy": True
            },
            resource_id=cdktf.Token.as_string(aws_api_gateway_resource_this.id),
            rest_api_id=cdktf.Token.as_string(aws_api_gateway_rest_api_this.id)
        )
```

## Argument Reference

The following arguments are supported:

* `rest_api_id` - (Required) ID of the associated REST API
* `resource_id` - (Required) API resource ID
* `http_method` - (Required) HTTP Method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
* `authorization` - (Required) Type of authorization used for the method (`NONE`, `CUSTOM`, `AWS_IAM`, `COGNITO_USER_POOLS`)
* `authorizer_id` - (Optional) Authorizer id to be used when the authorization is `CUSTOM` or `COGNITO_USER_POOLS`
* `authorization_scopes` - (Optional) Authorization scopes used when the authorization is `COGNITO_USER_POOLS`
* `api_key_required` - (Optional) Specify if the method requires an API key
* `operation_name` - (Optional) Function name that will be given to the method when generating an SDK through API Gateway. If omitted, API Gateway will generate a function name based on the resource path and HTTP verb.
* `request_models` - (Optional) Map of the API models used for the request's content type
  where key is the content type (e.g., `application/json`)
  and value is either `Error`, `Empty` (built-in models) or `aws_api_gateway_model`'s `name`.
* `request_validator_id` - (Optional) ID of a `aws_api_gateway_request_validator`
* `request_parameters` - (Optional) Map of request parameters (from the path, query string and headers) that should be passed to the integration. The boolean value indicates whether the parameter is required (`true`) or optional (`false`).
  For example: `request_parameters = {"method.request.header.X-Some-Header" = true "method.request.querystring.some-query-param" = true}` would define that the header `X-Some-Header` and the query string `some-query-param` must be provided in the request.

## Attributes Reference

No additional attributes are exported.

## Import

`aws_api_gateway_method` can be imported using `REST-API-ID/RESOURCE-ID/HTTP-METHOD`, e.g.,

```
$ terraform import aws_api_gateway_method.example 12345abcde/67890fghij/GET
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-f43706f8a3bc767d5985945d37abdf74f344c7b15e91c6125af22ace64957b04 -->