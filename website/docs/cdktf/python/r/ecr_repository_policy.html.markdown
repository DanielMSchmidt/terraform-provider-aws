---
subcategory: "ECR (Elastic Container Registry)"
layout: "aws"
page_title: "AWS: aws_ecr_repository_policy"
description: |-
  Provides an Elastic Container Registry Repository Policy.
---

# Resource: aws_ecr_repository_policy

Provides an Elastic Container Registry Repository Policy.

Note that currently only one policy may be applied to a repository.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_ecr_repository_foo = aws.ecr_repository.EcrRepository(self, "foo",
            name="bar"
        )
        data_aws_iam_policy_document_foopolicy =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "foopolicy",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["ecr:GetDownloadUrlForLayer", "ecr:BatchGetImage", "ecr:BatchCheckLayerAvailability", "ecr:PutImage", "ecr:InitiateLayerUpload", "ecr:UploadLayerPart", "ecr:CompleteLayerUpload", "ecr:DescribeRepositories", "ecr:GetRepositoryPolicy", "ecr:ListImages", "ecr:DeleteRepository", "ecr:BatchDeleteImage", "ecr:SetRepositoryPolicy", "ecr:DeleteRepositoryPolicy"
                ],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["123456789012"],
                    type="AWS"
                )
                ],
                sid="new policy"
            )
            ]
        )
        aws_ecr_repository_policy_foopolicy =
        aws.ecr_repository_policy.EcrRepositoryPolicy(self, "foopolicy_2",
            policy=cdktf.Token.as_string(data_aws_iam_policy_document_foopolicy.json),
            repository=cdktf.Token.as_string(aws_ecr_repository_foo.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_ecr_repository_policy_foopolicy.override_logical_id("foopolicy")
```

## Argument Reference

The following arguments are supported:

* `repository` - (Required) Name of the repository to apply the policy.
* `policy` - (Required) The policy document. This is a JSON formatted string. For more information about building IAM policy documents with Terraform, see the [AWS IAM Policy Document Guide](https://learn.hashicorp.com/terraform/aws/iam-policy)

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `repository` - The name of the repository.
* `registry_id` - The registry ID where the repository was created.

## Import

ECR Repository Policy can be imported using the repository name, e.g.,

```
$ terraform import aws_ecr_repository_policy.example example
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-5ca0f957f1b2d197a4fd32ee88ebc5bdefb942ed45f760396ae08791da1a4fd5 -->