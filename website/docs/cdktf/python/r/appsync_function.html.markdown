---
subcategory: "AppSync"
layout: "aws"
page_title: "AWS: aws_appsync_function"
description: |-
  Provides an AppSync Function.
---

# Resource: aws_appsync_function

Provides an AppSync Function.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_appsync_graphql_api_example =
        aws.appsync_graphql_api.AppsyncGraphqlApi(self, "example",
            authentication_type="API_KEY",
            name="example",
            schema="type Mutation {\n  putPost(id: ID!, title: String!): Post\n}\n\ntype Post {\n  id: ID!\n  title: String!\n}\n\ntype Query {\n  singlePost(id: ID!): Post\n}\n\nschema {\n  query: Query\n  mutation: Mutation\n}\n"
        )
        aws_appsync_datasource_example =
        aws.appsync_datasource.AppsyncDatasource(self, "example_1",
            api_id=cdktf.Token.as_string(aws_appsync_graphql_api_example.id),
            http_config=AppsyncDatasourceHttpConfig(
                endpoint="http://example.com"
            ),
            name="example",
            type="HTTP"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_appsync_datasource_example.override_logical_id("example")
        aws_appsync_function_example = aws.appsync_function.AppsyncFunction(self, "example_2",
            api_id=cdktf.Token.as_string(aws_appsync_graphql_api_example.id),
            data_source=cdktf.Token.as_string(aws_appsync_datasource_example.name),
            name="example",
            request_mapping_template="{\n    \"version\": \"2018-05-29\",\n    \"method\": \"GET\",\n    \"resourcePath\": \"/\",\n    \"params\":{\n        \"headers\": $utils.http.copyheaders($ctx.request.headers)\n    }\n}\n",
            response_mapping_template="#if($ctx.result.statusCode == 200)\n    $ctx.result.body\n#else\n    $utils.appendError($ctx.result.body, $ctx.result.statusCode)\n#end\n"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_appsync_function_example.override_logical_id("example")
```

## Example Usage With Code

```terraform
resource "aws_appsync_function" "example" {
  api_id      = aws_appsync_graphql_api.example.id
  data_source = aws_appsync_datasource.example.name
  name        = "example"
  code        = file("some-code-dir")

  runtime {
    name            = "APPSYNC_JS"
    runtime_version = "1.0.0"
  }
}
```

## Argument Reference

The following arguments are supported:

* `api_id` - (Required) ID of the associated AppSync API.
* `code` - (Optional) The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
* `data_source` - (Required) Function data source name.
* `max_batch_size` - (Optional) Maximum batching size for a resolver. Valid values are between `0` and `2000`.
* `name` - (Required) Function name. The function name does not have to be unique.
* `request_mapping_template` - (Optional) Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
* `response_mapping_template` - (Optional) Function response mapping template.
* `description` - (Optional) Function description.
* `runtime` - (Optional) Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See [Runtime](#runtime).
* `sync_config` - (Optional) Describes a Sync configuration for a resolver. See [Sync Config](#sync-config).
* `function_version` - (Optional) Version of the request mapping template. Currently the supported value is `2018-05-29`. Does not apply when specifying `code`.

### Runtime

The following arguments are supported:

* `name` - (Optional) The name of the runtime to use. Currently, the only allowed value is `APPSYNC_JS`.
* `runtime_version` - (Optional) The version of the runtime to use. Currently, the only allowed version is `1.0.0`.

### Sync Config

The following arguments are supported:

* `conflict_detection` - (Optional) Conflict Detection strategy to use. Valid values are `NONE` and `VERSION`.
* `conflict_handler` - (Optional) Conflict Resolution strategy to perform in the event of a conflict. Valid values are `NONE`, `OPTIMISTIC_CONCURRENCY`, `AUTOMERGE`, and `LAMBDA`.
* `lambda_conflict_handler_config` - (Optional) Lambda Conflict Handler Config when configuring `LAMBDA` as the Conflict Handler. See [Lambda Conflict Handler Config](#lambda-conflict-handler-config).

#### Lambda Conflict Handler Config

The following arguments are supported:

* `lambda_conflict_handler_arn` - (Optional) ARN for the Lambda function to use as the Conflict Handler.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - API Function ID (Formatted as ApiId-FunctionId)
* `arn` - ARN of the Function object.
* `function_id` - Unique ID representing the Function object.

## Import

`aws_appsync_function` can be imported using the AppSync API ID and Function ID separated by `-`, e.g.,

```
$ terraform import aws_appsync_function.example xxxxx-yyyyy
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-864319e81d4378a65c1060925010f3f5955bd826a1c13cc8dff89751731a0b89 -->