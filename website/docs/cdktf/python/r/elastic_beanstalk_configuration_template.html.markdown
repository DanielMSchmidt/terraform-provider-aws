---
subcategory: "Elastic Beanstalk"
layout: "aws"
page_title: "AWS: aws_elastic_beanstalk_configuration_template"
description: |-
  Provides an Elastic Beanstalk Configuration Template
---

# Resource: aws_elastic_beanstalk_configuration_template

Provides an Elastic Beanstalk Configuration Template, which are associated with
a specific application and are used to deploy different versions of the
application with the same configuration settings.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_elastic_beanstalk_application_tftest =
        aws.elastic_beanstalk_application.ElasticBeanstalkApplication(self, "tftest",
            description="tf-test-desc",
            name="tf-test-name"
        )
        aws.elastic_beanstalk_configuration_template.ElasticBeanstalkConfigurationTemplate(self, "tf_template",
            application=cdktf.Token.as_string(aws_elastic_beanstalk_application_tftest.name),
            name="tf-test-template-config",
            solution_stack_name="64bit Amazon Linux 2015.09 v2.0.8 running Go 1.4"
        )
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) A unique name for this Template.
* `application` – (Required) name of the application to associate with this configuration template
* `description` - (Optional) Short description of the Template
* `environment_id` – (Optional) The ID of the environment used with this configuration template
* `setting` – (Optional) Option settings to configure the new Environment. These
  override specific values that are set as defaults. The format is detailed
  below in [Option Settings](#option-settings)
* `solution_stack_name` – (Optional) A solution stack to base your Template
off of. Example stacks can be found in the [Amazon API documentation][1]

## Option Settings

The `setting` field supports the following format:

* `namespace` - unique namespace identifying the option's associated AWS resource
* `name` - name of the configuration option
* `value` - value for the configuration option
* `resource` - (Optional) resource name for [scheduled action](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options-general.html#command-options-general-autoscalingscheduledaction)

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `name`
* `application`
* `description`
* `environment_id`
* `option_settings`
* `solution_stack_name`

[1]: https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html

<!-- cache-key: cdktf-0.17.0-pre.15 input-9753d5c44110acd78d65b6914ed7c401454f78530c1dc4788c5f70a6cb2411b9 -->