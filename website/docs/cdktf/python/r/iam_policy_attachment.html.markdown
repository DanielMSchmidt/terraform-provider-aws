---
subcategory: "IAM (Identity & Access Management)"
layout: "aws"
page_title: "AWS: aws_iam_policy_attachment"
description: |-
  Attaches a Managed IAM Policy to user(s), role(s), and/or group(s)
---

# Resource: aws_iam_policy_attachment

Attaches a Managed IAM Policy to user(s), role(s), and/or group(s)

!> **WARNING:** The aws_iam_policy_attachment resource creates **exclusive** attachments of IAM policies. Across the entire AWS account, all of the users/roles/groups to which a single policy is attached must be declared by a single aws_iam_policy_attachment resource. This means that even any users/roles/groups that have the attached policy via any other mechanism (including other Terraform resources) will have that attached policy revoked by this resource. Consider `aws_iam_role_policy_attachment`, `aws_iam_user_policy_attachment`, or `aws_iam_group_policy_attachment` instead. These resources do not enforce exclusive attachment of an IAM policy.

~> **NOTE:** The usage of this resource conflicts with the `aws_iam_group_policy_attachment`, `aws_iam_role_policy_attachment`, and `aws_iam_user_policy_attachment` resources and will permanently show a difference if both are defined.

~> **NOTE:** For a given role, this resource is incompatible with using the [`aws_iam_role` resource](/docs/providers/aws/r/iam_role.html) `managed_policy_arns` argument. When using that argument and this resource, both will attempt to manage the role's managed policy attachments and Terraform will show a permanent difference.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_iam_group_group = aws.iam_group.IamGroup(self, "group",
            name="test-group"
        )
        aws_iam_user_user = aws.iam_user.IamUser(self, "user",
            name="test-user"
        )
        data_aws_iam_policy_document_assume_role =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["ec2.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        data_aws_iam_policy_document_policy =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "policy",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["ec2:Describe*"],
                effect="Allow",
                resources=["*"]
            )
            ]
        )
        aws_iam_policy_policy = aws.iam_policy.IamPolicy(self, "policy_4",
            description="A test policy",
            name="test-policy",
            policy=cdktf.Token.as_string(data_aws_iam_policy_document_policy.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_policy_policy.override_logical_id("policy")
        aws_iam_role_role = aws.iam_role.IamRole(self, "role",
            assume_role_policy=cdktf.Token.as_string(data_aws_iam_policy_document_assume_role.json),
            name="test-role"
        )
        aws.iam_policy_attachment.IamPolicyAttachment(self, "test-attach",
            groups=[cdktf.Token.as_string(aws_iam_group_group.name)],
            name="test-attachment",
            policy_arn=cdktf.Token.as_string(aws_iam_policy_policy.arn),
            roles=[cdktf.Token.as_string(aws_iam_role_role.name)],
            users=[cdktf.Token.as_string(aws_iam_user_user.name)]
        )
```

## Argument Reference

The following arguments are supported:

* `name`    (Required) - The name of the attachment. This cannot be an empty string.
* `users`   (Optional) - The user(s) the policy should be applied to
* `roles`   (Optional) - The role(s) the policy should be applied to
* `groups`  (Optional) - The group(s) the policy should be applied to
* `policy_arn`  (Required) - The ARN of the policy you want to apply

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The policy's ID.
* `name` - The name of the attachment.

<!-- cache-key: cdktf-0.17.0-pre.15 input-d90388ecf26f1fcd1747f239aef0e31cb57ecb4fe5cb927abdeb0ce23b603587 -->