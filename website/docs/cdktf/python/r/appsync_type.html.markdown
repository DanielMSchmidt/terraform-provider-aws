---
subcategory: "AppSync"
layout: "aws"
page_title: "AWS: aws_appsync_type"
description: |-
  Provides an AppSync Type.
---

# Resource: aws_appsync_type

Provides an AppSync Type.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_appsync_graphql_api_example =
        aws.appsync_graphql_api.AppsyncGraphqlApi(self, "example",
            authentication_type="API_KEY",
            name="example"
        )
        aws_appsync_type_example = aws.appsync_type.AppsyncType(self, "example_1",
            api_id=cdktf.Token.as_string(aws_appsync_graphql_api_example.id),
            definition="type Mutation\n\n{\nputPost(id: ID!,title: String! ): Post\n\n}\n",
            format="SDL"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_appsync_type_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `api_id` - (Required) GraphQL API ID.
* `format` - (Required) The type format: `SDL` or `JSON`.
* `definition` - (Required) The type definition.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `arn` - The ARN of the type.
* `description` - The type description.
* `id` - The ID is constructed from `api-id:format:name`.
* `name` - The type name.

## Import

Appsync Types can be imported using the `id` e.g.,

```
$ terraform import aws_appsync_type.example api-id:format:name
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-cfaaddfec43af6ba404854555ea22c8a0a32ade52ec125d19459153ffe8bb637 -->