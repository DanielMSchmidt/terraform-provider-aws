---
subcategory: "S3 (Simple Storage)"
layout: "aws"
page_title: "AWS: aws_s3_bucket_acl"
description: |-
  Provides an S3 bucket ACL resource.
---

# Resource: aws_s3_bucket_acl

Provides an S3 bucket ACL resource.

~> **Note:** `terraform destroy` does not delete the S3 Bucket ACL but does remove the resource from Terraform state.

## Example Usage

### With `private` ACL

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_s3_bucket_example = aws.s3_bucket.S3Bucket(self, "example",
            bucket="my-tf-example-bucket"
        )
        aws_s3_bucket_ownership_controls_example =
        aws.s3_bucket_ownership_controls.S3BucketOwnershipControls(self, "example_1",
            bucket=cdktf.Token.as_string(aws_s3_bucket_example.id),
            rule=S3BucketOwnershipControlsRule(
                object_ownership="BucketOwnerPreferred"
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_ownership_controls_example.override_logical_id("example")
        aws_s3_bucket_acl_example = aws.s3_bucket_acl.S3BucketAcl(self, "example_2",
            acl="private",
            bucket=cdktf.Token.as_string(aws_s3_bucket_example.id),
            depends_on=[aws_s3_bucket_ownership_controls_example]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_acl_example.override_logical_id("example")
```

### With `public-read` ACL

-> This example explicitly disables the default S3 bucket security settings. This
should be done with caution, as all bucket objects become publicly exposed.

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_s3_bucket_example = aws.s3_bucket.S3Bucket(self, "example",
            bucket="my-tf-example-bucket"
        )
        aws_s3_bucket_ownership_controls_example =
        aws.s3_bucket_ownership_controls.S3BucketOwnershipControls(self, "example_1",
            bucket=cdktf.Token.as_string(aws_s3_bucket_example.id),
            rule=S3BucketOwnershipControlsRule(
                object_ownership="BucketOwnerPreferred"
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_ownership_controls_example.override_logical_id("example")
        aws_s3_bucket_public_access_block_example =
        aws.s3_bucket_public_access_block.S3BucketPublicAccessBlock(self, "example_2",
            block_public_acls=False,
            block_public_policy=False,
            bucket=cdktf.Token.as_string(aws_s3_bucket_example.id),
            ignore_public_acls=False,
            restrict_public_buckets=False
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_public_access_block_example.override_logical_id("example")
        aws_s3_bucket_acl_example = aws.s3_bucket_acl.S3BucketAcl(self, "example_3",
            acl="public-read",
            bucket=cdktf.Token.as_string(aws_s3_bucket_example.id),
            depends_on=[aws_s3_bucket_ownership_controls_example, aws_s3_bucket_public_access_block_example
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_acl_example.override_logical_id("example")
```

### With Grants

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_s3_bucket_example = aws.s3_bucket.S3Bucket(self, "example",
            bucket="my-tf-example-bucket"
        )
        aws_s3_bucket_ownership_controls_example =
        aws.s3_bucket_ownership_controls.S3BucketOwnershipControls(self, "example_1",
            bucket=cdktf.Token.as_string(aws_s3_bucket_example.id),
            rule=S3BucketOwnershipControlsRule(
                object_ownership="BucketOwnerPreferred"
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_ownership_controls_example.override_logical_id("example")
        data_aws_canonical_user_id_current =
        aws.data_aws_canonical_user_id.DataAwsCanonicalUserId(self, "current")
        aws_s3_bucket_acl_example = aws.s3_bucket_acl.S3BucketAcl(self, "example_3",
            access_control_policy=S3BucketAclAccessControlPolicy(
                grant=[S3BucketAclAccessControlPolicyGrant(
                    grantee=S3BucketAclAccessControlPolicyGrantGrantee(
                        id=cdktf.Token.as_string(data_aws_canonical_user_id_current.id),
                        type="CanonicalUser"
                    ),
                    permission="READ"
                ), S3BucketAclAccessControlPolicyGrant(
                    grantee=S3BucketAclAccessControlPolicyGrantGrantee(
                        type="Group",
                        uri="http://acs.amazonaws.com/groups/s3/LogDelivery"
                    ),
                    permission="READ_ACP"
                )
                ],
                owner=S3BucketAclAccessControlPolicyOwner(
                    id=cdktf.Token.as_string(data_aws_canonical_user_id_current.id)
                )
            ),
            bucket=cdktf.Token.as_string(aws_s3_bucket_example.id),
            depends_on=[aws_s3_bucket_ownership_controls_example]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_acl_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `acl` - (Optional, Conflicts with `access_control_policy`) Canned ACL to apply to the bucket.
* `access_control_policy` - (Optional, Conflicts with `acl`) Configuration block that sets the ACL permissions for an object per grantee. [See below](#access_control_policy).
* `bucket` - (Required, Forces new resource) Name of the bucket.
* `expected_bucket_owner` - (Optional, Forces new resource) Account ID of the expected bucket owner.

### access_control_policy

The `access_control_policy` configuration block supports the following arguments:

* `grant` - (Required) Set of `grant` configuration blocks. [See below](#grant).
* `owner` - (Required) Configuration block of the bucket owner's display name and ID. [See below](#owner).

### grant

The `grant` configuration block supports the following arguments:

* `grantee` - (Required) Configuration block for the person being granted permissions. [See below](#grantee).
* `permission` - (Required) Logging permissions assigned to the grantee for the bucket.

### owner

The `owner` configuration block supports the following arguments:

* `id` - (Required) ID of the owner.
* `display_name` - (Optional) Display name of the owner.

### grantee

The `grantee` configuration block supports the following arguments:

* `email_address` - (Optional) Email address of the grantee. See [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) for supported AWS regions where this argument can be specified.
* `id` - (Optional) Canonical user ID of the grantee.
* `type` - (Required) Type of grantee. Valid values: `CanonicalUser`, `AmazonCustomerByEmail`, `Group`.
* `uri` - (Optional) URI of the grantee group.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The `bucket`, `expected_bucket_owner` (if configured), and `acl` (if configured) separated by commas (`,`).

## Import

S3 bucket ACL can be imported in one of four ways.

If the owner (account ID) of the source bucket is the _same_ account used to configure the Terraform AWS Provider, and the source bucket is **not configured** with a
[canned ACL][1] (i.e. predefined grant), the S3 bucket ACL resource should be imported using the `bucket` e.g.,

```
$ terraform import aws_s3_bucket_acl.example bucket-name
```

If the owner (account ID) of the source bucket is the _same_ account used to configure the Terraform AWS Provider, and the source bucket is **configured** with a
[canned ACL][1] (i.e. predefined grant), the S3 bucket ACL resource should be imported using the `bucket` and `acl` separated by a comma (`,`), e.g.

```
$ terraform import aws_s3_bucket_acl.example bucket-name,private
```

If the owner (account ID) of the source bucket _differs_ from the account used to configure the Terraform AWS Provider, and the source bucket is **not configured** with a
[canned ACL][1] (i.e. predefined grant), the S3 bucket ACL resource should be imported using the `bucket` and `expected_bucket_owner` separated by a comma (`,`) e.g.,

```
$ terraform import aws_s3_bucket_acl.example bucket-name,123456789012
```

If the owner (account ID) of the source bucket _differs_ from the account used to configure the Terraform AWS Provider, and the source bucket is **configured** with a
[canned ACL][1] (i.e. predefined grant), the S3 bucket ACL resource should be imported using the `bucket`, `expected_bucket_owner`, and `acl` separated by commas (`,`), e.g.,

```
$ terraform import aws_s3_bucket_acl.example bucket-name,123456789012,private
```

[1]: https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl

<!-- cache-key: cdktf-0.17.0-pre.15 input-27e4de47a1b73e781b57a90dce739bda2b8b22af58b2887ba5da7d3371d57067 -->