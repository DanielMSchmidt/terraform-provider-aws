---
subcategory: "Config"
layout: "aws"
page_title: "AWS: aws_config_configuration_recorder_status"
description: |-
  Manages status of an AWS Config Configuration Recorder.
---

# Resource: aws_config_configuration_recorder_status

Manages status (recording / stopped) of an AWS Config Configuration Recorder.

~> **Note:** Starting Configuration Recorder requires a [Delivery Channel](/docs/providers/aws/r/config_delivery_channel.html) to be present. Use of `depends_on` (as shown below) is recommended to avoid race conditions.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_s3_bucket_b = aws.s3_bucket.S3Bucket(self, "b",
            bucket="awsconfig-example"
        )
        data_aws_iam_policy_document_assume_role =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["config.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        data_aws_iam_policy_document_p =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "p",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["s3:*"],
                effect="Allow",
                resources=[
                    cdktf.Token.as_string(aws_s3_bucket_b.arn), "${" + aws_s3_bucket_b.arn + "}/*"
                ]
            )
            ]
        )
        aws_config_delivery_channel_foo =
        aws.config_delivery_channel.ConfigDeliveryChannel(self, "foo",
            name="example",
            s3_bucket_name=cdktf.Token.as_string(aws_s3_bucket_b.bucket)
        )
        aws_iam_role_r = aws.iam_role.IamRole(self, "r",
            assume_role_policy=cdktf.Token.as_string(data_aws_iam_policy_document_assume_role.json),
            name="example-awsconfig"
        )
        aws_iam_role_policy_p = aws.iam_role_policy.IamRolePolicy(self, "p_5",
            name="awsconfig-example",
            policy=cdktf.Token.as_string(data_aws_iam_policy_document_p.json),
            role=cdktf.Token.as_string(aws_iam_role_r.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_p.override_logical_id("p")
        aws.iam_role_policy_attachment.IamRolePolicyAttachment(self, "a",
            policy_arn="arn:aws:iam::aws:policy/service-role/AWS_ConfigRole",
            role=cdktf.Token.as_string(aws_iam_role_r.name)
        )
        aws_config_configuration_recorder_foo =
        aws.config_configuration_recorder.ConfigConfigurationRecorder(self, "foo_7",
            name="example",
            role_arn=cdktf.Token.as_string(aws_iam_role_r.arn)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_config_configuration_recorder_foo.override_logical_id("foo")
        aws_config_configuration_recorder_status_foo =
        aws.config_configuration_recorder_status.ConfigConfigurationRecorderStatus(self, "foo_8",
            depends_on=[aws_config_delivery_channel_foo],
            is_enabled=True,
            name=cdktf.Token.as_string(aws_config_configuration_recorder_foo.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_config_configuration_recorder_status_foo.override_logical_id("foo")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the recorder
* `is_enabled` - (Required) Whether the configuration recorder should be enabled or disabled.

## Attributes Reference

No additional attributes are exported.

## Import

Configuration Recorder Status can be imported using the name of the Configuration Recorder, e.g.,

```
$ terraform import aws_config_configuration_recorder_status.foo example
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-99015d984c66da7fd30123db6af97e25d34c3606e1eb36b4ea3f3e923d4a0107 -->