---
subcategory: "AppSync"
layout: "aws"
page_title: "AWS: aws_appsync_datasource"
description: |-
  Provides an AppSync Data Source.
---

# Resource: aws_appsync_datasource

Provides an AppSync Data Source.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_appsync_graphql_api_example =
        aws.appsync_graphql_api.AppsyncGraphqlApi(self, "example",
            authentication_type="API_KEY",
            name="tf_appsync_example"
        )
        aws_dynamodb_table_example = aws.dynamodb_table.DynamodbTable(self, "example_1",
            attribute=[DynamodbTableAttribute(
                name="UserId",
                type="S"
            )
            ],
            hash_key="UserId",
            name="example",
            read_capacity=1,
            write_capacity=1
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_dynamodb_table_example.override_logical_id("example")
        data_aws_iam_policy_document_assume_role =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["appsync.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        data_aws_iam_policy_document_example =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "example_3",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["dynamodb:*"],
                effect="Allow",
                resources=[cdktf.Token.as_string(aws_dynamodb_table_example.arn)]
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_iam_policy_document_example.override_logical_id("example")
        aws_iam_role_example = aws.iam_role.IamRole(self, "example_4",
            assume_role_policy=cdktf.Token.as_string(data_aws_iam_policy_document_assume_role.json),
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_example.override_logical_id("example")
        aws_iam_role_policy_example = aws.iam_role_policy.IamRolePolicy(self, "example_5",
            name="example",
            policy=cdktf.Token.as_string(data_aws_iam_policy_document_example.json),
            role=cdktf.Token.as_string(aws_iam_role_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_example.override_logical_id("example")
        aws_appsync_datasource_example =
        aws.appsync_datasource.AppsyncDatasource(self, "example_6",
            api_id=cdktf.Token.as_string(aws_appsync_graphql_api_example.id),
            dynamodb_config=AppsyncDatasourceDynamodbConfig(
                table_name=cdktf.Token.as_string(aws_dynamodb_table_example.name)
            ),
            name="tf_appsync_example",
            service_role_arn=cdktf.Token.as_string(aws_iam_role_example.arn),
            type="AMAZON_DYNAMODB"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_appsync_datasource_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `api_id` - (Required) API ID for the GraphQL API for the data source.
* `name` - (Required) User-supplied name for the data source.
* `type` - (Required) Type of the Data Source. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`, `RELATIONAL_DATABASE`, `AMAZON_EVENTBRIDGE`.
* `description` - (Optional) Description of the data source.
* `dynamodb_config` - (Optional) DynamoDB settings. See [below](#dynamodb_config)
* `elasticsearch_config` - (Optional) Amazon Elasticsearch settings. See [below](#elasticsearch_config)
* `event_bridge_config` - (Optional) AWS EventBridge settings. See [below](#event_bridge_config)
* `http_config` - (Optional) HTTP settings. See [below](#http_config)
* `lambda_config` - (Optional) AWS Lambda settings. See [below](#lambda_config)
* `opensearchservice_config` - (Optional) Amazon OpenSearch Service settings. See [below](#opensearchservice_config)
* `relational_database_config` (Optional) AWS RDS settings. See [Relational Database Config](#relational_database_config)
* `service_role_arn` - (Optional) IAM service role ARN for the data source.

### dynamodb_config

The following arguments are supported:

* `table_name` - (Required) Name of the DynamoDB table.
* `region` - (Optional) AWS region of the DynamoDB table. Defaults to current region.
* `use_caller_credentials` - (Optional) Set to `true` to use Amazon Cognito credentials with this data source.

### elasticsearch_config

The following arguments are supported:

* `endpoint` - (Required) HTTP endpoint of the Elasticsearch domain.
* `region` - (Optional) AWS region of Elasticsearch domain. Defaults to current region.

### event_bridge_config

The following arguments are supported:

* `event_bus_arn` - (Required) ARN for the EventBridge bus.

### http_config

The following arguments are supported:

* `endpoint` - (Required) HTTP URL.
* `authorization_config` - (Optional) Authorization configuration in case the HTTP endpoint requires authorization. See [Authorization Config](#authorization_config).

#### authorization_config

The following arguments are supported:

* `authorization_type` - (Optional) Authorization type that the HTTP endpoint requires. Default values is `AWS_IAM`.
* `aws_iam_config` - (Optional) Identity and Access Management (IAM) settings. See [AWS IAM Config](#aws_iam_config).

##### aws_iam_config

The following arguments are supported:

* `signing_region` - (Optional) Signing Amazon Web Services Region for IAM authorization.
* `signing_service_name`- (Optional) Signing service name for IAM authorization.

### lambda_config

The following arguments are supported:

* `function_arn` - (Required) ARN for the Lambda function.

### opensearchservice_config

The following arguments are supported:

* `endpoint` - (Required) HTTP endpoint of the OpenSearch domain.
* `region` - (Optional) AWS region of the OpenSearch domain. Defaults to current region.

### relational_database_config

The following arguments are supported:

* `http_endpoint_config` - (Required) Amazon RDS HTTP endpoint configuration. See [HTTP Endpoint Config](#http_endpoint_config).
* `source_type` - (Optional) Source type for the relational database. Valid values: `RDS_HTTP_ENDPOINT`.

#### http_endpoint_config

The following arguments are supported:

* `db_cluster_identifier` - (Required) Amazon RDS cluster identifier.
* `aws_secret_store_arn` - (Required) AWS secret store ARN for database credentials.
* `database_name` - (Optional) Logical database name.
* `region` - (Optional) AWS Region for RDS HTTP endpoint. Defaults to current region.
* `schema` - (Optional) Logical schema name.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `arn` - ARN

## Import

`aws_appsync_datasource` can be imported with their `api_id`, a hyphen, and `name`, e.g.,

```
$ terraform import aws_appsync_datasource.example abcdef123456-example
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-e5c3f09326b14e7c4a0e6b0a518cd4454df58fe01f932ba776edc07b5532f1ea -->