---
subcategory: "Cloud Map"
layout: "aws"
page_title: "AWS: aws_service_discovery_service"
description: |-
  Provides a Service Discovery Service resource.
---

# Resource: aws_service_discovery_service

Provides a Service Discovery Service resource.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_vpc_example = aws.vpc.Vpc(self, "example",
            cidr_block="10.0.0.0/16",
            enable_dns_hostnames=True,
            enable_dns_support=True
        )
        aws_service_discovery_private_dns_namespace_example =
        aws.service_discovery_private_dns_namespace.ServiceDiscoveryPrivateDnsNamespace(self, "example_1",
            description="example",
            name="example.terraform.local",
            vpc=cdktf.Token.as_string(aws_vpc_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_service_discovery_private_dns_namespace_example.override_logical_id("example")
        aws_service_discovery_service_example =
        aws.service_discovery_service.ServiceDiscoveryService(self, "example_2",
            dns_config=ServiceDiscoveryServiceDnsConfig(
                dns_records=[ServiceDiscoveryServiceDnsConfigDnsRecords(
                    ttl=10,
                    type="A"
                )
                ],
                namespace_id=cdktf.Token.as_string(aws_service_discovery_private_dns_namespace_example.id),
                routing_policy="MULTIVALUE"
            ),
            health_check_custom_config=ServiceDiscoveryServiceHealthCheckCustomConfig(
                failure_threshold=1
            ),
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_service_discovery_service_example.override_logical_id("example")
```

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_service_discovery_public_dns_namespace_example =
        aws.service_discovery_public_dns_namespace.ServiceDiscoveryPublicDnsNamespace(self, "example",
            description="example",
            name="example.terraform.com"
        )
        aws_service_discovery_service_example =
        aws.service_discovery_service.ServiceDiscoveryService(self, "example_1",
            dns_config=ServiceDiscoveryServiceDnsConfig(
                dns_records=[ServiceDiscoveryServiceDnsConfigDnsRecords(
                    ttl=10,
                    type="A"
                )
                ],
                namespace_id=cdktf.Token.as_string(aws_service_discovery_public_dns_namespace_example.id)
            ),
            health_check_config=ServiceDiscoveryServiceHealthCheckConfig(
                failure_threshold=10,
                resource_path="path",
                type="HTTP"
            ),
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_service_discovery_service_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required, ForceNew) The name of the service.
* `description` - (Optional) The description of the service.
* `dns_config` - (Optional) A complex type that contains information about the resource record sets that you want Amazon Route 53 to create when you register an instance.
* `health_check_config` - (Optional) A complex type that contains settings for an optional health check. Only for Public DNS namespaces.
* `force_destroy` - (Optional, Default:false ) A boolean that indicates all instances should be deleted from the service so that the service can be destroyed without error. These instances are not recoverable.
* `health_check_custom_config` - (Optional, ForceNew) A complex type that contains settings for ECS managed health checks.
* `namespace_id` - (Optional) The ID of the namespace that you want to use to create the service.
* `type` - (Optional) If present, specifies that the service instances are only discoverable using the `DiscoverInstances` API operation. No DNS records is registered for the service instances. The only valid value is `HTTP`.
* `tags` - (Optional) A map of tags to assign to the service. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### dns_config

The following arguments are supported:

* `namespace_id` - (Required, ForceNew) The ID of the namespace to use for DNS configuration.
* `dns_records` - (Required) An array that contains one DnsRecord object for each resource record set.
* `routing_policy` - (Optional) The routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify the service. Valid Values: MULTIVALUE, WEIGHTED

#### dns_records

The following arguments are supported:

* `ttl` - (Required) The amount of time, in seconds, that you want DNS resolvers to cache the settings for this resource record set.
* `type` - (Required, ForceNew) The type of the resource, which indicates the value that Amazon Route 53 returns in response to DNS queries. Valid Values: A, AAAA, SRV, CNAME

### health_check_config

The following arguments are supported:

* `failure_threshold` - (Optional) The number of consecutive health checks. Maximum value of 10.
* `resource_path` - (Optional) The path that you want Route 53 to request when performing health checks. Route 53 automatically adds the DNS name for the service. If you don't specify a value, the default value is /.
* `type` - (Optional, ForceNew) The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy. Valid Values: HTTP, HTTPS, TCP

### health_check_custom_config

The following arguments are supported:

* `failure_threshold` - (Optional, ForceNew) The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance.  Maximum value of 10.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The ID of the service.
* `arn` - The ARN of the service.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

Service Discovery Service can be imported using the service ID, e.g.,

```
$ terraform import aws_service_discovery_service.example 0123456789
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-016971d350dd23fb3ec038c824bb310fb349be5f580a27c54bf56dc08d1da8a2 -->