---
subcategory: "DynamoDB"
layout: "aws"
page_title: "AWS: aws_dynamodb_global_table"
description: |-
  Manages DynamoDB Global Tables V1 (version 2017.11.29)
---

# Resource: aws_dynamodb_global_table

Manages [DynamoDB Global Tables V1 (version 2017.11.29)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html). These are layered on top of existing DynamoDB Tables.

~> **NOTE:** To instead manage [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html), use the [`aws_dynamodb_table` resource](/docs/providers/aws/r/dynamodb_table.html) `replica` configuration block.

~> Note: There are many restrictions before you can properly create DynamoDB Global Tables in multiple regions. See the [AWS DynamoDB Global Table Requirements](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables_reqs_bestpractices.html) for more information.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_us_east1 = aws.provider.AwsProvider(self, "aws",
            alias="us-east-1",
            region="us-east-1"
        )
        aws_us_west2 = aws.provider.AwsProvider(self, "aws_1",
            alias="us-west-2",
            region="us-west-2"
        )
        aws_dynamodb_table_us_east1 = aws.dynamodb_table.DynamodbTable(self, "us-east-1",
            attribute=[DynamodbTableAttribute(
                name="myAttribute",
                type="S"
            )
            ],
            hash_key="myAttribute",
            name="myTable",
            provider=aws_us_east1,
            read_capacity=1,
            stream_enabled=True,
            stream_view_type="NEW_AND_OLD_IMAGES",
            write_capacity=1
        )
        aws_dynamodb_table_us_west2 = aws.dynamodb_table.DynamodbTable(self, "us-west-2",
            attribute=[DynamodbTableAttribute(
                name="myAttribute",
                type="S"
            )
            ],
            hash_key="myAttribute",
            name="myTable",
            provider=aws_us_west2,
            read_capacity=1,
            stream_enabled=True,
            stream_view_type="NEW_AND_OLD_IMAGES",
            write_capacity=1
        )
        aws.dynamodb_global_table.DynamodbGlobalTable(self, "myTable",
            depends_on=[aws_dynamodb_table_us_east1, aws_dynamodb_table_us_west2],
            name="myTable",
            provider=aws_us_east1,
            replica=[DynamodbGlobalTableReplica(
                region_name="us-east-1"
            ), DynamodbGlobalTableReplica(
                region_name="us-west-2"
            )
            ]
        )
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the global table. Must match underlying DynamoDB Table names in all regions.
* `replica` - (Required) Underlying DynamoDB Table. At least 1 replica must be defined. See below.

### Nested Fields

#### `replica`

* `region_name` - (Required) AWS region name of replica DynamoDB TableE.g., `us-east-1`

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The name of the DynamoDB Global Table
* `arn` - The ARN of the DynamoDB Global Table

## Import

DynamoDB Global Tables can be imported using the global table name, e.g.,

```
$ terraform import aws_dynamodb_global_table.MyTable MyTable
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-199be8441b25cd7c8da8ede14749dbba4bbdd1cb649fc560ff674c1a0813b6f9 -->