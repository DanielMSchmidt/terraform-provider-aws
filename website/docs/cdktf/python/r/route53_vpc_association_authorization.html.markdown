---
subcategory: "Route 53"
layout: "aws"
page_title: "AWS: aws_route53_vpc_association_authorization"
description: |-
  Authorizes a VPC in a different account to be associated with a local Route53 Hosted Zone
---

# Resource: aws_route53_vpc_association_authorization

Authorizes a VPC in a different account to be associated with a local Route53 Hosted Zone.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws.provider.AwsProvider(self, "aws")
        aws.provider.AwsProvider(self, "aws_1",
            alias="alternate"
        )
        aws_vpc_alternate = aws.vpc.Vpc(self, "alternate",
            cidr_block="10.7.0.0/16",
            enable_dns_hostnames=True,
            enable_dns_support=True,
            provider="aws.alternate"
        )
        aws_vpc_example = aws.vpc.Vpc(self, "example",
            cidr_block="10.6.0.0/16",
            enable_dns_hostnames=True,
            enable_dns_support=True
        )
        aws_route53_zone_example = aws.route53_zone.Route53Zone(self, "example_4",
            lifecycle=cdktf.TerraformResourceLifecycle(
                ignore_changes=[vpc]
            ),
            name="example.com",
            vpc=[Route53ZoneVpc(
                vpc_id=cdktf.Token.as_string(aws_vpc_example.id)
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_route53_zone_example.override_logical_id("example")
        aws_route53_vpc_association_authorization_example =
        aws.route53_vpc_association_authorization.Route53VpcAssociationAuthorization(self, "example_5",
            vpc_id=cdktf.Token.as_string(aws_vpc_alternate.id),
            zone_id=cdktf.Token.as_string(aws_route53_zone_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_route53_vpc_association_authorization_example.override_logical_id("example")
        aws_route53_zone_association_example =
        aws.route53_zone_association.Route53ZoneAssociation(self, "example_6",
            provider="aws.alternate",
            vpc_id=cdktf.Token.as_string(aws_route53_vpc_association_authorization_example.vpc_id),
            zone_id=cdktf.Token.as_string(aws_route53_vpc_association_authorization_example.zone_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_route53_zone_association_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `zone_id` - (Required) The ID of the private hosted zone that you want to authorize associating a VPC with.
* `vpc_id` - (Required) The VPC to authorize for association with the private hosted zone.
* `vpc_region` - (Optional) The VPC's region. Defaults to the region of the AWS provider.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The calculated unique identifier for the association.

## Import

Route 53 VPC Association Authorizations can be imported via the Hosted Zone ID and VPC ID, separated by a colon (`:`), e.g.,

```
$ terraform import aws_route53_vpc_association_authorization.example Z123456ABCDEFG:vpc-12345678
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-ebc262c29f3ee4216078f62dba1a84c12a1951e54ef31a22352c42d758f93654 -->