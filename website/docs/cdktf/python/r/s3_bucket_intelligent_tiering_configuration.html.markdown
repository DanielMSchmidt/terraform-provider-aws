---
subcategory: "S3 (Simple Storage)"
layout: "aws"
page_title: "AWS: aws_s3_bucket_intelligent_tiering_configuration"
description: |-
  Provides an S3 Intelligent-Tiering configuration resource.
---

# Resource: aws_s3_bucket_intelligent_tiering_configuration

Provides an [S3 Intelligent-Tiering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intelligent-tiering.html) configuration resource.

## Example Usage

### Add intelligent tiering configuration for entire S3 bucket

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_s3_bucket_example = aws.s3_bucket.S3Bucket(self, "example",
            bucket="example"
        )
        aws.s3_bucket_intelligent_tiering_configuration.S3BucketIntelligentTieringConfiguration(self, "example-entire-bucket",
            bucket=cdktf.Token.as_string(aws_s3_bucket_example.id),
            name="EntireBucket",
            tiering=[S3BucketIntelligentTieringConfigurationTiering(
                access_tier="DEEP_ARCHIVE_ACCESS",
                days=180
            ), S3BucketIntelligentTieringConfigurationTiering(
                access_tier="ARCHIVE_ACCESS",
                days=125
            )
            ]
        )
```

### Add intelligent tiering configuration with S3 object filter

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_s3_bucket_example = aws.s3_bucket.S3Bucket(self, "example",
            bucket="example"
        )
        aws.s3_bucket_intelligent_tiering_configuration.S3BucketIntelligentTieringConfiguration(self, "example-filtered",
            bucket=cdktf.Token.as_string(aws_s3_bucket_example.id),
            filter=S3BucketIntelligentTieringConfigurationFilter(
                prefix="documents/",
                tags={
                    "class": "blue",
                    "priority": "high"
                }
            ),
            name="ImportantBlueDocuments",
            status="Disabled",
            tiering=[S3BucketIntelligentTieringConfigurationTiering(
                access_tier="ARCHIVE_ACCESS",
                days=125
            )
            ]
        )
```

## Argument Reference

The following arguments are supported:

* `bucket` - (Required) Name of the bucket this intelligent tiering configuration is associated with.
* `name` - (Required) Unique name used to identify the S3 Intelligent-Tiering configuration for the bucket.
* `status` - (Optional) Specifies the status of the configuration. Valid values: `Enabled`, `Disabled`.
* `filter` - (Optional) Bucket filter. The configuration only includes objects that meet the filter's criteria (documented below).
* `tiering` - (Required) S3 Intelligent-Tiering storage class tiers of the configuration (documented below).

The `filter` configuration supports the following:

* `prefix` - (Optional) Object key name prefix that identifies the subset of objects to which the configuration applies.
* `tags` - (Optional) All of these tags must exist in the object's tag set in order for the configuration to apply.

The `tiering` configuration supports the following:

* `access_tier` - (Required) S3 Intelligent-Tiering access tier. Valid values: `ARCHIVE_ACCESS`, `DEEP_ARCHIVE_ACCESS`.
* `days` - (Required) Number of consecutive days of no access after which an object will be eligible to be transitioned to the corresponding tier.

## Attributes Reference

No additional attributes are exported.

## Import

S3 bucket intelligent tiering configurations can be imported using `bucket:name`, e.g.

```
$ terraform import aws_s3_bucket_intelligent_tiering_configuration.my-bucket-entire-bucket my-bucket:EntireBucket
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-982d33983c054fe8919c270b3e2aede693221c87718dbf36bfeb166982b1d095 -->