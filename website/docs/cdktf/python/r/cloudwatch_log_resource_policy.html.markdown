---
subcategory: "CloudWatch Logs"
layout: "aws"
page_title: "AWS: aws_cloudwatch_log_resource_policy"
description: |-
  Provides a resource to manage a CloudWatch log resource policy
---

# Resource: aws_cloudwatch_log_resource_policy

Provides a resource to manage a CloudWatch log resource policy.

## Example Usage

### Elasticsearch Log Publishing

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_aws_iam_policy_document_elasticsearch_log_publishing_policy =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "elasticsearch-log-publishing-policy",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["logs:CreateLogStream", "logs:PutLogEvents", "logs:PutLogEventsBatch"
                ],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["es.amazonaws.com"],
                    type="Service"
                )
                ],
                resources=["arn:aws:logs:*"]
            )
            ]
        )
        aws_cloudwatch_log_resource_policy_elasticsearch_log_publishing_policy =
        aws.cloudwatch_log_resource_policy.CloudwatchLogResourcePolicy(self, "elasticsearch-log-publishing-policy_1",
            policy_document=cdktf.Token.as_string(data_aws_iam_policy_document_elasticsearch_log_publishing_policy.json),
            policy_name="elasticsearch-log-publishing-policy"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cloudwatch_log_resource_policy_elasticsearch_log_publishing_policy.override_logical_id("elasticsearch-log-publishing-policy")
```

### Route53 Query Logging

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_aws_iam_policy_document_route53_query_logging_policy =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "route53-query-logging-policy",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["logs:CreateLogStream", "logs:PutLogEvents"],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["route53.amazonaws.com"],
                    type="Service"
                )
                ],
                resources=["arn:aws:logs:*:*:log-group:/aws/route53/*"]
            )
            ]
        )
        aws_cloudwatch_log_resource_policy_route53_query_logging_policy =
        aws.cloudwatch_log_resource_policy.CloudwatchLogResourcePolicy(self, "route53-query-logging-policy_1",
            policy_document=cdktf.Token.as_string(data_aws_iam_policy_document_route53_query_logging_policy.json),
            policy_name="route53-query-logging-policy"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cloudwatch_log_resource_policy_route53_query_logging_policy.override_logical_id("route53-query-logging-policy")
```

## Argument Reference

The following arguments are supported:

* `policy_document` - (Required) Details of the resource policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. Maximum length of 5120 characters.
* `policy_name` - (Required) Name of the resource policy.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The name of the CloudWatch log resource policy

## Import

CloudWatch log resource policies can be imported using the policy name, e.g.,

```
$ terraform import aws_cloudwatch_log_resource_policy.MyPolicy MyPolicy
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-ba6ad3b128f8a7fc7908944ae9c344b25223db810faedd601c887ee850cb01af -->