---
subcategory: "IVS (Interactive Video) Chat"
layout: "aws"
page_title: "AWS: aws_ivschat_logging_configuration"
description: |-
  Terraform resource for managing an AWS IVS (Interactive Video) Chat Logging Configuration.
---

# Resource: aws_ivschat_logging_configuration

Terraform resource for managing an AWS IVS (Interactive Video) Chat Logging Configuration.

## Example Usage

### Basic Usage - Logging to CloudWatch

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_cloudwatch_log_group_example =
        aws.cloudwatch_log_group.CloudwatchLogGroup(self, "example")
        aws_ivschat_logging_configuration_example =
        aws.ivschat_logging_configuration.IvschatLoggingConfiguration(self, "example_1",
            destination_configuration=IvschatLoggingConfigurationDestinationConfiguration(
                cloudwatch_logs=IvschatLoggingConfigurationDestinationConfigurationCloudwatchLogs(
                    log_group_name=cdktf.Token.as_string(aws_cloudwatch_log_group_example.name)
                )
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_ivschat_logging_configuration_example.override_logical_id("example")
```

### Basic Usage - Logging to Kinesis Firehose with Extended S3

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_s3_bucket_example = aws.s3_bucket.S3Bucket(self, "example",
            bucket_prefix="tf-ivschat-logging-bucket"
        )
        aws_s3_bucket_acl_example = aws.s3_bucket_acl.S3BucketAcl(self, "example_1",
            acl="private",
            bucket=cdktf.Token.as_string(aws_s3_bucket_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_acl_example.override_logical_id("example")
        data_aws_iam_policy_document_assume_role =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["firehose.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        aws_iam_role_example = aws.iam_role.IamRole(self, "example_3",
            assume_role_policy=cdktf.Token.as_string(data_aws_iam_policy_document_assume_role.json),
            name="firehose_example_role"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_example.override_logical_id("example")
        aws_kinesis_firehose_delivery_stream_example =
        aws.kinesis_firehose_delivery_stream.KinesisFirehoseDeliveryStream(self, "example_4",
            destination="extended_s3",
            extended_s3_configuration=KinesisFirehoseDeliveryStreamExtendedS3Configuration(
                bucket_arn=cdktf.Token.as_string(aws_s3_bucket_example.arn),
                role_arn=cdktf.Token.as_string(aws_iam_role_example.arn)
            ),
            name="terraform-kinesis-firehose-extended-s3-example-stream",
            tags={
                "LogDeliveryEnabled": "true"
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_kinesis_firehose_delivery_stream_example.override_logical_id("example")
        aws_ivschat_logging_configuration_example =
        aws.ivschat_logging_configuration.IvschatLoggingConfiguration(self, "example_5",
            destination_configuration=IvschatLoggingConfigurationDestinationConfiguration(
                firehose=IvschatLoggingConfigurationDestinationConfigurationFirehose(
                    delivery_stream_name=cdktf.Token.as_string(aws_kinesis_firehose_delivery_stream_example.name)
                )
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_ivschat_logging_configuration_example.override_logical_id("example")
```

### Basic Usage - Logging to S3

```terraform
resource "aws_s3_bucket" "example" {
  bucket_name   = "tf-ivschat-logging"
  force_destroy = true
}

resource "aws_ivschat_logging_configuration" "example" {
  destination_configuration {
    s3 {
      bucket_name = aws_s3_bucket.example.id
    }
  }
}
```

## Argument Reference

The following arguments are required:

* `destination_configuration` - (Required) Object containing destination configuration for where chat activity will be logged. This object must contain exactly one of the following children arguments:
    * `cloudwatch_logs` - An Amazon CloudWatch Logs destination configuration where chat activity will be logged.
        * `log_group_name` - Name of the Amazon Cloudwatch Logs destination where chat activity will be logged.
    * `firehose` - An Amazon Kinesis Data Firehose destination configuration where chat activity will be logged.
        * `delivery_stream_name` - Name of the Amazon Kinesis Firehose delivery stream where chat activity will be logged.
    * `s3` - An Amazon S3 destination configuration where chat activity will be logged.
        * `bucket_name` - Name of the Amazon S3 bucket where chat activity will be logged.

The following arguments are optional:

* `name` - (Optional) Logging Configuration name.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `arn` - ARN of the Logging Configuration.
* `id` - ID of the Logging Configuration.
* `state` - State of the Logging Configuration.
* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://www.terraform.io/docs/configuration/blocks/resources/syntax.html#operation-timeouts):

* `create` - (Default `5m`)
* `update` - (Default `5m`)
* `delete` - (Default `5m`)

## Import

IVS (Interactive Video) Chat Logging Configuration can be imported using the ARN, e.g.,

```
$ terraform import aws_ivschat_logging_configuration.example arn:aws:ivschat:us-west-2:326937407773:logging-configuration/MMUQc8wcqZmC
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-8f6b425bcd228b5d1778000cd36f8d2a065719fe38c990fe6cad3897028faa5c -->