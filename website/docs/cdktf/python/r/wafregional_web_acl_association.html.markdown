---
subcategory: "WAF Classic Regional"
layout: "aws"
page_title: "AWS: aws_wafregional_web_acl_association"
description: |-
  Manages an association with WAF Regional Web ACL
---

# Resource: aws_wafregional_web_acl_association

Manages an association with WAF Regional Web ACL.

-> **Note:** An Application Load Balancer can only be associated with one WAF Regional WebACL.

## Example Usage

### Application Load Balancer Association

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_vpc_foo = aws.vpc.Vpc(self, "foo",
            cidr_block="10.1.0.0/16"
        )
        aws_wafregional_ipset_ipset = aws.wafregional_ipset.WafregionalIpset(self, "ipset",
            ip_set_descriptor=[WafregionalIpsetIpSetDescriptor(
                type="IPV4",
                value="192.0.7.0/24"
            )
            ],
            name="tfIPSet"
        )
        aws_wafregional_rule_foo = aws.wafregional_rule.WafregionalRule(self, "foo_2",
            metric_name="tfWAFRule",
            name="tfWAFRule",
            predicate=[WafregionalRulePredicate(
                data_id=cdktf.Token.as_string(aws_wafregional_ipset_ipset.id),
                negated=False,
                type="IPMatch"
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_wafregional_rule_foo.override_logical_id("foo")
        aws_wafregional_web_acl_foo = aws.wafregional_web_acl.WafregionalWebAcl(self, "foo_3",
            default_action=WafregionalWebAclDefaultAction(
                type="ALLOW"
            ),
            metric_name="foo",
            name="foo",
            rule=[WafregionalWebAclRule(
                action=WafregionalWebAclRuleAction(
                    type="BLOCK"
                ),
                priority=1,
                rule_id=cdktf.Token.as_string(aws_wafregional_rule_foo.id)
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_wafregional_web_acl_foo.override_logical_id("foo")
        data_aws_availability_zones_available =
        aws.data_aws_availability_zones.DataAwsAvailabilityZones(self, "available")
        aws_subnet_bar = aws.subnet.Subnet(self, "bar",
            availability_zone=cdktf.Token.as_string(
                cdktf.property_access(data_aws_availability_zones_available.names, ["1"])),
            cidr_block="10.1.2.0/24",
            vpc_id=cdktf.Token.as_string(aws_vpc_foo.id)
        )
        aws_subnet_foo = aws.subnet.Subnet(self, "foo_6",
            availability_zone=cdktf.Token.as_string(
                cdktf.property_access(data_aws_availability_zones_available.names, ["0"])),
            cidr_block="10.1.1.0/24",
            vpc_id=cdktf.Token.as_string(aws_vpc_foo.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_subnet_foo.override_logical_id("foo")
        aws_alb_foo = aws.alb.Alb(self, "foo_7",
            internal=True,
            subnets=[
                cdktf.Token.as_string(aws_subnet_foo.id),
                cdktf.Token.as_string(aws_subnet_bar.id)
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_alb_foo.override_logical_id("foo")
        aws_wafregional_web_acl_association_foo =
        aws.wafregional_web_acl_association.WafregionalWebAclAssociation(self, "foo_8",
            resource_arn=cdktf.Token.as_string(aws_alb_foo.arn),
            web_acl_id=cdktf.Token.as_string(aws_wafregional_web_acl_foo.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_wafregional_web_acl_association_foo.override_logical_id("foo")
```

### API Gateway Association

```terraform
resource "aws_wafregional_ipset" "ipset" {
  name = "tfIPSet"

  ip_set_descriptor {
    type  = "IPV4"
    value = "192.0.7.0/24"
  }
}

resource "aws_wafregional_rule" "foo" {
  name        = "tfWAFRule"
  metric_name = "tfWAFRule"

  predicate {
    data_id = aws_wafregional_ipset.ipset.id
    negated = false
    type    = "IPMatch"
  }
}

resource "aws_wafregional_web_acl" "foo" {
  name        = "foo"
  metric_name = "foo"

  default_action {
    type = "ALLOW"
  }

  rule {
    action {
      type = "BLOCK"
    }

    priority = 1
    rule_id  = aws_wafregional_rule.foo.id
  }
}

resource "aws_api_gateway_rest_api" "example" {
  body = jsonencode({
    openapi = "3.0.1"
    info = {
      title   = "example"
      version = "1.0"
    }
    paths = {
      "/path1" = {
        get = {
          x-amazon-apigateway-integration = {
            httpMethod           = "GET"
            payloadFormatVersion = "1.0"
            type                 = "HTTP_PROXY"
            uri                  = "https://ip-ranges.amazonaws.com/ip-ranges.json"
          }
        }
      }
    }
  })

  name = "example"
}

resource "aws_api_gateway_deployment" "example" {
  rest_api_id = aws_api_gateway_rest_api.example.id

  triggers = {
    redeployment = sha1(jsonencode(aws_api_gateway_rest_api.example.body))
  }

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_api_gateway_stage" "example" {
  deployment_id = aws_api_gateway_deployment.example.id
  rest_api_id   = aws_api_gateway_rest_api.example.id
  stage_name    = "example"
}

resource "aws_wafregional_web_acl_association" "association" {
  resource_arn = aws_api_gateway_stage.example.arn
  web_acl_id   = aws_wafregional_web_acl.foo.id
}
```

## Argument Reference

The following arguments are supported:

* `web_acl_id` - (Required) The ID of the WAF Regional WebACL to create an association.
* `resource_arn` - (Required) ARN of the resource to associate with. For example, an Application Load Balancer or API Gateway Stage.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The ID of the association

## Import

WAF Regional Web ACL Association can be imported using their `web_acl_id:resource_arn`, e.g.,

```
$ terraform import aws_wafregional_web_acl_association.foo web_acl_id:resource_arn
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-f7d0905a837cc90bfbd0c93490bd34581ad0d32d64b77837cbf1986ebad7d662 -->