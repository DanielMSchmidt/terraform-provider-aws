---
subcategory: "Serverless Application Repository"
layout: "aws"
page_title: "AWS: aws_serverlessapplicationrepository_cloudformation_stack"
description: |-
  Deploys an Application CloudFormation Stack from the Serverless Application Repository.
---

# Resource: aws_serverlessapplicationrepository_cloudformation_stack

Deploys an Application CloudFormation Stack from the Serverless Application Repository.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_aws_partition_current = aws.data_aws_partition.DataAwsPartition(self, "current")
        data_aws_region_current = aws.data_aws_region.DataAwsRegion(self, "current_1")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_region_current.override_logical_id("current")
        aws.serverlessapplicationrepository_cloudformation_stack.ServerlessapplicationrepositoryCloudformationStack(self, "postgres-rotator",
            application_id="arn:aws:serverlessrepo:us-east-1:297356227824:applications/SecretsManagerRDSPostgreSQLRotationSingleUser",
            capabilities=["CAPABILITY_IAM", "CAPABILITY_RESOURCE_POLICY"],
            name="postgres-rotator",
            parameters={
                "endpoint": "secretsmanager.${" + data_aws_region_current.name + "}.${" + data_aws_partition_current.dns_suffix + "}",
                "function_name": "func-postgres-rotator"
            }
        )
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the stack to create. The resource deployed in AWS will be prefixed with `serverlessrepo-`
* `application_id` - (Required) The ARN of the application from the Serverless Application Repository.
* `capabilities` - (Required) A list of capabilities. Valid values are `CAPABILITY_IAM`, `CAPABILITY_NAMED_IAM`, `CAPABILITY_RESOURCE_POLICY`, or `CAPABILITY_AUTO_EXPAND`
* `parameters` - (Optional) A map of Parameter structures that specify input parameters for the stack.
* `semantic_version` - (Optional) The version of the application to deploy. If not supplied, deploys the latest version.
* `tags` - (Optional) A list of tags to associate with this stack. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - A unique identifier of the stack.
* `outputs` - A map of outputs from the stack.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

Serverless Application Repository Stack can be imported using the CloudFormation Stack name (with or without the `serverlessrepo-` prefix) or the CloudFormation Stack ID, e.g.,

```
$ terraform import aws_serverlessapplicationrepository_cloudformation_stack.example serverlessrepo-postgres-rotator
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-a0a353feecaf1b572cca20293f75bb6e252dca172534fe7e3970d98fa04f0ae1 -->