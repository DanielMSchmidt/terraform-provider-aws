---
subcategory: "RDS (Relational Database)"
layout: "aws"
page_title: "AWS: aws_rds_export_task"
description: |-
  Terraform resource for managing an AWS RDS (Relational Database) Export Task.
---

# Resource: aws_rds_export_task

Terraform resource for managing an AWS RDS (Relational Database) Export Task.

## Example Usage

### Basic Usage

```terraform
resource "aws_rds_export_task" "example" {
  export_task_identifier = "example"
  source_arn             = aws_db_snapshot.example.db_snapshot_arn
  s3_bucket_name         = aws_s3_bucket.example.id
  iam_role_arn           = aws_iam_role.example.arn
  kms_key_id             = aws_kms_key.example.arn
}
```

### Complete Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_db_instance_example = aws.db_instance.DbInstance(self, "example",
            allocated_storage=10,
            db_name="test",
            engine="mysql",
            engine_version="5.7",
            identifier="example",
            instance_class="db.t3.micro",
            parameter_group_name="default.mysql5.7",
            password="foobarbaz",
            skip_final_snapshot=True,
            username="foo"
        )
        aws_db_snapshot_example = aws.db_snapshot.DbSnapshot(self, "example_1",
            db_instance_identifier=cdktf.Token.as_string(aws_db_instance_example.identifier),
            db_snapshot_identifier="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_db_snapshot_example.override_logical_id("example")
        aws_iam_role_example = aws.iam_role.IamRole(self, "example_2",
            assume_role_policy=cdktf.Fn.jsonencode({
                "Statement": [{
                    "Action": "sts:AssumeRole",
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "export.rds.amazonaws.com"
                    },
                    "Sid": ""
                }
                ],
                "Version": "2012-10-17"
            }),
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_example.override_logical_id("example")
        aws_kms_key_example = aws.kms_key.KmsKey(self, "example_3",
            deletion_window_in_days=10
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_kms_key_example.override_logical_id("example")
        aws_s3_bucket_example = aws.s3_bucket.S3Bucket(self, "example_4",
            bucket="example",
            force_destroy=True
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_example.override_logical_id("example")
        aws_s3_bucket_acl_example = aws.s3_bucket_acl.S3BucketAcl(self, "example_5",
            acl="private",
            bucket=cdktf.Token.as_string(aws_s3_bucket_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_acl_example.override_logical_id("example")
        data_aws_iam_policy_document_example =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "example_6",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["s3:ListAllMyBuckets"],
                resources=["*"]
            ), DataAwsIamPolicyDocumentStatement(
                actions=["s3:GetBucketLocation", "s3:ListBucket"],
                resources=[cdktf.Token.as_string(aws_s3_bucket_example.arn)]
            ), DataAwsIamPolicyDocumentStatement(
                actions=["s3:GetObject", "s3:PutObject", "s3:DeleteObject"],
                resources=["${" + aws_s3_bucket_example.arn + "}/*"]
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_iam_policy_document_example.override_logical_id("example")
        aws_iam_policy_example = aws.iam_policy.IamPolicy(self, "example_7",
            name="example",
            policy=cdktf.Token.as_string(data_aws_iam_policy_document_example.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_policy_example.override_logical_id("example")
        aws_iam_role_policy_attachment_example =
        aws.iam_role_policy_attachment.IamRolePolicyAttachment(self, "example_8",
            policy_arn=cdktf.Token.as_string(aws_iam_policy_example.arn),
            role=cdktf.Token.as_string(aws_iam_role_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_attachment_example.override_logical_id("example")
        aws_rds_export_task_example = aws.rds_export_task.RdsExportTask(self, "example_9",
            export_only=["database"],
            export_task_identifier="example",
            iam_role_arn=cdktf.Token.as_string(aws_iam_role_example.arn),
            kms_key_id=cdktf.Token.as_string(aws_kms_key_example.arn),
            s3_bucket_name=cdktf.Token.as_string(aws_s3_bucket_example.id),
            s3_prefix="my_prefix/example",
            source_arn=cdktf.Token.as_string(aws_db_snapshot_example.db_snapshot_arn)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_rds_export_task_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `export_task_identifier` - (Required) Unique identifier for the snapshot export task.
* `iam_role_arn` - (Required) ARN of the IAM role to use for writing to the Amazon S3 bucket.
* `kms_key_id` - (Required) ID of the Amazon Web Services KMS key to use to encrypt the snapshot.
* `s3_bucket_name` - (Required) Name of the Amazon S3 bucket to export the snapshot to.
* `source_arn` - (Required) Amazon Resource Name (ARN) of the snapshot to export.

The following arguments are optional:

* `export_only` - (Optional) Data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are documented in the [AWS StartExportTask API documentation](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_StartExportTask.html#API_StartExportTask_RequestParameters).
* `s3_prefix` - (Optional) Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `failure_cause` - Reason the export failed, if it failed.
* `id` - Unique identifier for the snapshot export task (same value as `export_task_identifier`).
* `percent_progress` - Progress of the snapshot export task as a percentage.
* `snapshot_time` - Time that the snapshot was created.
* `source_type` - Type of source for the export.
* `status` - Status of the export task.
* `task_end_time` - Time that the snapshot export task completed.
* `task_start_time` - Time that the snapshot export task started.
* `warning_message` - Warning about the snapshot export task, if any.

## Import

A RDS (Relational Database) Export Task can be imported using the `export_task_identifier`, e.g.,

```
$ terraform import aws_rds_export_task.example example
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-2f998dc7b4e674e201c8b2ca7b33fc14804c937c8d9c3e5e98984dc8be5aabd8 -->