---
subcategory: "S3 Control"
layout: "aws"
page_title: "AWS: aws_s3control_access_point_policy"
description: |-
  Provides a resource to manage an S3 Access Point resource policy.
---

# Resource: aws_s3control_access_point_policy

Provides a resource to manage an S3 Access Point resource policy.

~> **NOTE on Access Points and Access Point Policies:** Terraform provides both a standalone Access Point Policy resource and an [Access Point](s3_access_point.html) resource with a resource policy defined in-line. You cannot use an Access Point with in-line resource policy in conjunction with an Access Point Policy resource. Doing so will cause a conflict of policies and will overwrite the access point's resource policy.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_s3_bucket_example = aws.s3_bucket.S3Bucket(self, "example",
            bucket="example"
        )
        aws_s3_access_point_example = aws.s3_access_point.S3AccessPoint(self, "example_1",
            bucket=cdktf.Token.as_string(aws_s3_bucket_example.id),
            lifecycle=cdktf.TerraformResourceLifecycle(
                ignore_changes=[policy]
            ),
            name="example",
            public_access_block_configuration=S3AccessPointPublicAccessBlockConfiguration(
                block_public_acls=True,
                block_public_policy=False,
                ignore_public_acls=True,
                restrict_public_buckets=False
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_access_point_example.override_logical_id("example")
        aws_s3_control_access_point_policy_example =
        aws.s3_control_access_point_policy.S3ControlAccessPointPolicy(self, "example_2",
            access_point_arn=cdktf.Token.as_string(aws_s3_access_point_example.arn),
            policy=cdktf.Fn.jsonencode({
                "Statement": [{
                    "Action": "s3:GetObjectTagging",
                    "Effect": "Allow",
                    "Principal": {
                        "AWS": "*"
                    },
                    "Resource": "${" + aws_s3_access_point_example.arn + "}/object/*"
                }
                ],
                "Version": "2008-10-17"
            })
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_control_access_point_policy_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `access_point_arn` - (Required) The ARN of the access point that you want to associate with the specified policy.
* `policy` - (Required) The policy that you want to apply to the specified access point.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `has_public_access_policy` - Indicates whether this access point currently has a policy that allows public access.
* `id` - The AWS account ID and access point name separated by a colon (`:`).

## Import

Access Point policies can be imported using the `access_point_arn`, e.g.

```
$ terraform import aws_s3control_access_point_policy.example arn:aws:s3:us-west-2:123456789012:accesspoint/example
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-adfce35465e556b66d63ec444239fc6717245c157ec0d5577eb4d4292facff51 -->