---
subcategory: "SageMaker"
layout: "aws"
page_title: "AWS: aws_sagemaker_workforce"
description: |-
  Provides a SageMaker Workforce resource.
---

# Resource: aws_sagemaker_workforce

Provides a SageMaker Workforce resource.

## Example Usage

### Cognito Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_cognito_user_pool_example = aws.cognito_user_pool.CognitoUserPool(self, "example",
            name="example"
        )
        aws_cognito_user_pool_client_example =
        aws.cognito_user_pool_client.CognitoUserPoolClient(self, "example_1",
            generate_secret=True,
            name="example",
            user_pool_id=cdktf.Token.as_string(aws_cognito_user_pool_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cognito_user_pool_client_example.override_logical_id("example")
        aws_cognito_user_pool_domain_example =
        aws.cognito_user_pool_domain.CognitoUserPoolDomain(self, "example_2",
            domain="example",
            user_pool_id=cdktf.Token.as_string(aws_cognito_user_pool_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cognito_user_pool_domain_example.override_logical_id("example")
        aws_sagemaker_workforce_example =
        aws.sagemaker_workforce.SagemakerWorkforce(self, "example_3",
            cognito_config=SagemakerWorkforceCognitoConfig(
                client_id=cdktf.Token.as_string(aws_cognito_user_pool_client_example.id),
                user_pool=cdktf.Token.as_string(aws_cognito_user_pool_domain_example.user_pool_id)
            ),
            workforce_name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_sagemaker_workforce_example.override_logical_id("example")
```

### Oidc Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws.sagemaker_workforce.SagemakerWorkforce(self, "example",
            oidc_config=SagemakerWorkforceOidcConfig(
                authorization_endpoint="https://example.com",
                client_id="example",
                client_secret="example",
                issuer="https://example.com",
                jwks_uri="https://example.com",
                logout_endpoint="https://example.com",
                token_endpoint="https://example.com",
                user_info_endpoint="https://example.com"
            ),
            workforce_name="example"
        )
```

## Argument Reference

The following arguments are supported:

* `workforce_name` - (Required) The name of the Workforce (must be unique).
* `cognito_config` - (Optional) Use this parameter to configure an Amazon Cognito private workforce. A single Cognito workforce is created using and corresponds to a single Amazon Cognito user pool. Conflicts with `oidc_config`. see [Cognito Config](#cognito-config) details below.
* `oidc_config` - (Optional) Use this parameter to configure a private workforce using your own OIDC Identity Provider. Conflicts with `cognito_config`. see [OIDC Config](#oidc-config) details below.
* `source_ip_config` - (Optional) A list of IP address ranges Used to create an allow list of IP addresses for a private workforce. By default, a workforce isn't restricted to specific IP addresses. see [Source Ip Config](#source-ip-config) details below.
* `workforce_vpc_config` - (Optional) configure a workforce using VPC. see [Workforce VPC Config](#workforce-vpc-config) details below.

### Cognito Config

* `client_id` - (Required) The client ID for your Amazon Cognito user pool.
* `user_pool` - (Required) ID for your Amazon Cognito user pool.

### Oidc Config

* `authorization_endpoint` - (Required) The OIDC IdP authorization endpoint used to configure your private workforce.
* `client_id` - (Required) The OIDC IdP client ID used to configure your private workforce.
* `client_secret` - (Required) The OIDC IdP client secret used to configure your private workforce.
* `issuer` - (Required) The OIDC IdP issuer used to configure your private workforce.
* `jwks_uri` - (Required) The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private workforce.
* `logout_endpoint` - (Required) The OIDC IdP logout endpoint used to configure your private workforce.
* `token_endpoint` - (Required) The OIDC IdP token endpoint used to configure your private workforce.
* `user_info_endpoint` - (Required) The OIDC IdP user information endpoint used to configure your private workforce.

### Source Ip Config

* `cidrs` - (Required) A list of up to 10 CIDR values.

### Workforce VPC Config

* `security_group_ids` - (Optional) The VPC security group IDs. The security groups must be for the same VPC as specified in the subnet.
* `subnets` - (Optional) The ID of the subnets in the VPC that you want to connect.
* `vpc_id` - (Optional) The ID of the VPC that the workforce uses for communication.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `arn` - The Amazon Resource Name (ARN) assigned by AWS to this Workforce.
* `id` - The name of the Workforce.
* `subdomain` - The subdomain for your OIDC Identity Provider.
* `workforce_vpc_config.0.vpc_endpoint_id` - The IDs for the VPC service endpoints of your VPC workforce.

## Import

SageMaker Workforces can be imported using the `workforce_name`, e.g.,

```
$ terraform import aws_sagemaker_workforce.example example
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-19014fd01713b1b8a0ca9c303b161e741ded8c7c793a7910d7a47fcce78db42f -->