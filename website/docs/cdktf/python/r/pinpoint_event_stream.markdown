---
subcategory: "Pinpoint"
layout: "aws"
page_title: "AWS: aws_pinpoint_event_stream"
description: |-
  Provides a Pinpoint Event Stream resource.
---

# Resource: aws_pinpoint_event_stream

Provides a Pinpoint Event Stream resource.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_kinesis_stream_test_stream = aws.kinesis_stream.KinesisStream(self, "test_stream",
            name="pinpoint-kinesis-test",
            shard_count=1
        )
        aws_pinpoint_app_app = aws.pinpoint_app.PinpointApp(self, "app")
        data_aws_iam_policy_document_assume_role =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["pinpoint.us-east-1.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        data_aws_iam_policy_document_test_role_policy =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "test_role_policy",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["kinesis:PutRecords", "kinesis:DescribeStream"],
                effect="Allow",
                resources=["arn:aws:kinesis:us-east-1:*:*/*"]
            )
            ]
        )
        aws_iam_role_test_role = aws.iam_role.IamRole(self, "test_role",
            assume_role_policy=cdktf.Token.as_string(data_aws_iam_policy_document_assume_role.json)
        )
        aws_iam_role_policy_test_role_policy = aws.iam_role_policy.IamRolePolicy(self, "test_role_policy_5",
            name="test_policy",
            policy=cdktf.Token.as_string(data_aws_iam_policy_document_test_role_policy.json),
            role=cdktf.Token.as_string(aws_iam_role_test_role.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_test_role_policy.override_logical_id("test_role_policy")
        aws.pinpoint_event_stream.PinpointEventStream(self, "stream",
            application_id=cdktf.Token.as_string(aws_pinpoint_app_app.application_id),
            destination_stream_arn=cdktf.Token.as_string(aws_kinesis_stream_test_stream.arn),
            role_arn=cdktf.Token.as_string(aws_iam_role_test_role.arn)
        )
```

## Argument Reference

The following arguments are supported:

* `application_id` - (Required) The application ID.
* `destination_stream_arn` - (Required) The Amazon Resource Name (ARN) of the Amazon Kinesis stream or Firehose delivery stream to which you want to publish events.
* `role_arn` - (Required) The IAM role that authorizes Amazon Pinpoint to publish events to the stream in your account.

## Attributes Reference

No additional attributes are exported.

## Import

Pinpoint Event Stream can be imported using the `application-id`, e.g.,

```
$ terraform import aws_pinpoint_event_stream.stream application-id
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-85177e88b3c389dc2bba1b24b88d86ab150134a602378e0ca0b992666e1d54c8 -->