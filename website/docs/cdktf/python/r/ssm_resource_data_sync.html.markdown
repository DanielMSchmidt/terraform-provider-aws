---
subcategory: "SSM (Systems Manager)"
layout: "aws"
page_title: "AWS: aws_ssm_resource_data_sync"
description: |-
  Provides a SSM resource data sync.
---

# Resource: aws_ssm_resource_data_sync

Provides a SSM resource data sync.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_s3_bucket_hoge = aws.s3_bucket.S3Bucket(self, "hoge",
            bucket="tf-test-bucket-1234"
        )
        aws.ssm_resource_data_sync.SsmResourceDataSync(self, "foo",
            name="foo",
            s3_destination=SsmResourceDataSyncS3Destination(
                bucket_name=cdktf.Token.as_string(aws_s3_bucket_hoge.bucket),
                region=cdktf.Token.as_string(aws_s3_bucket_hoge.region)
            )
        )
        data_aws_iam_policy_document_hoge =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "hoge_2",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["s3:GetBucketAcl"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["ssm.amazonaws.com"],
                    type="Service"
                )
                ],
                resources=["arn:aws:s3:::tf-test-bucket-1234"],
                sid="SSMBucketPermissionsCheck"
            ), DataAwsIamPolicyDocumentStatement(
                actions=["s3:PutObject"],
                condition=[DataAwsIamPolicyDocumentStatementCondition(
                    test="StringEquals",
                    values=["bucket-owner-full-control"],
                    variable="s3:x-amz-acl"
                )
                ],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["ssm.amazonaws.com"],
                    type="Service"
                )
                ],
                resources=["arn:aws:s3:::tf-test-bucket-1234/*"],
                sid="SSMBucketDelivery"
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_iam_policy_document_hoge.override_logical_id("hoge")
        aws_s3_bucket_policy_hoge = aws.s3_bucket_policy.S3BucketPolicy(self, "hoge_3",
            bucket=cdktf.Token.as_string(aws_s3_bucket_hoge.id),
            policy=cdktf.Token.as_string(data_aws_iam_policy_document_hoge.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_policy_hoge.override_logical_id("hoge")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Name for the configuration.
* `s3_destination` - (Required) Amazon S3 configuration details for the sync.

## s3_destination

`s3_destination` supports the following:

* `bucket_name` - (Required) Name of S3 bucket where the aggregated data is stored.
* `region` - (Required) Region with the bucket targeted by the Resource Data Sync.
* `kms_key_arn` - (Optional) ARN of an encryption key for a destination in Amazon S3.
* `prefix` - (Optional) Prefix for the bucket.
* `sync_format` - (Optional) A supported sync format. Only JsonSerDe is currently supported. Defaults to JsonSerDe.

## Attributes Reference

No additional attributes are exported.

## Import

SSM resource data sync can be imported using the `name`, e.g.,

```sh
$ terraform import aws_ssm_resource_data_sync.example example-name
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-dfdc7f8bab8616aa7ba8f5f2327975b418e8566edc496885884bd841514253d8 -->