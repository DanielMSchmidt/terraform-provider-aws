---
subcategory: "AppConfig"
layout: "aws"
page_title: "AWS: aws_appconfig_extension_association"
description: |-
  Associates an AppConfig Extension with a Resource.
---

# Resource: aws_appconfig_extension_association

Associates an AppConfig Extension with a Resource.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_appconfig_application_test =
        aws.appconfig_application.AppconfigApplication(self, "test",
            name="test"
        )
        aws_sns_topic_test = aws.sns_topic.SnsTopic(self, "test_1",
            name="test"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_sns_topic_test.override_logical_id("test")
        data_aws_iam_policy_document_test =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "test_2",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["appconfig.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_iam_policy_document_test.override_logical_id("test")
        aws_iam_role_test = aws.iam_role.IamRole(self, "test_3",
            assume_role_policy=cdktf.Token.as_string(data_aws_iam_policy_document_test.json),
            name="test"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_test.override_logical_id("test")
        aws_appconfig_extension_test =
        aws.appconfig_extension.AppconfigExtension(self, "test_4",
            action_point=[AppconfigExtensionActionPoint(
                action=[AppconfigExtensionActionPointAction(
                    name="test",
                    role_arn=cdktf.Token.as_string(aws_iam_role_test.arn),
                    uri=cdktf.Token.as_string(aws_sns_topic_test.arn)
                )
                ],
                point="ON_DEPLOYMENT_COMPLETE"
            )
            ],
            description="test description",
            name="test",
            tags={
                "Type": "AppConfig Extension"
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_appconfig_extension_test.override_logical_id("test")
        aws_appconfig_extension_association_test =
        aws.appconfig_extension_association.AppconfigExtensionAssociation(self, "test_5",
            extension_arn=cdktf.Token.as_string(aws_appconfig_extension_test.arn),
            resource_arn=cdktf.Token.as_string(aws_appconfig_application_test.arn)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_appconfig_extension_association_test.override_logical_id("test")
```

## Argument Reference

The following arguments are supported:

* `extension_arn` - (Required) The ARN of the extension defined in the association.
* `resource_arn` - (Optional) The ARN of the application, configuration profile, or environment to associate with the extension.
* `parameters` - (Optional) The parameter names and values defined for the association.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `arn` - ARN of the AppConfig Extension Association.
* `id` - AppConfig Extension Association ID.
* `extension_version` - The version number for the extension defined in the association.

## Import

AppConfig Extension Associations can be imported using their extension association ID, e.g.,

```
$ terraform import aws_appconfig_extension_association.example 71rxuzt
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-fb5ad8fbedd2d67dad94c12df1ac43163604bf67197b1ba302af3ee996b474e2 -->