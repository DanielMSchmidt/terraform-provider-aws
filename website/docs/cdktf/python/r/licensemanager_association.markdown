---
subcategory: "License Manager"
layout: "aws"
page_title: "AWS: aws_licensemanager_association"
description: |-
  Provides a License Manager association resource.
---

# Resource: aws_licensemanager_association

Provides a License Manager association.

~> **Note:** License configurations can also be associated with launch templates by specifying the `license_specifications` block for an `aws_launch_template`.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_licensemanager_license_configuration_example =
        aws.licensemanager_license_configuration.LicensemanagerLicenseConfiguration(self, "example",
            license_counting_type="Instance",
            name="Example"
        )
        data_aws_ami_example = aws.data_aws_ami.DataAwsAmi(self, "example_1",
            filter=[DataAwsAmiFilter(
                name="name",
                values=["amzn-ami-vpc-nat*"]
            )
            ],
            most_recent=True,
            owners=["amazon"]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_ami_example.override_logical_id("example")
        aws_instance_example = aws.instance.Instance(self, "example_2",
            ami=cdktf.Token.as_string(data_aws_ami_example.id),
            instance_type="t2.micro"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_instance_example.override_logical_id("example")
        aws_licensemanager_association_example =
        aws.licensemanager_association.LicensemanagerAssociation(self, "example_3",
            license_configuration_arn=cdktf.Token.as_string(aws_licensemanager_license_configuration_example.arn),
            resource_arn=cdktf.Token.as_string(aws_instance_example.arn)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_licensemanager_association_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `license_configuration_arn` - (Required) ARN of the license configuration.
* `resource_arn` - (Required) ARN of the resource associated with the license configuration.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The license configuration ARN.

## Import

License configurations can be imported in the form `resource_arn,license_configuration_arn`, e.g.,

```
$ terraform import aws_licensemanager_association.example arn:aws:ec2:eu-west-1:123456789012:image/ami-123456789abcdef01,arn:aws:license-manager:eu-west-1:123456789012:license-configuration:lic-0123456789abcdef0123456789abcdef
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-5e92bc82eaeb27523ea1a14cbcaeeecbd7602e354edddb50220a34ab62681cf7 -->