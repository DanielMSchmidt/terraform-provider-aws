---
subcategory: "Cloud Map"
layout: "aws"
page_title: "AWS: aws_service_discovery_instance"
description: |-
  Provides a Service Discovery Instance resource.
---

# Resource: aws_service_discovery_instance

Provides a Service Discovery Instance resource.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_vpc_example = aws.vpc.Vpc(self, "example",
            cidr_block="10.0.0.0/16",
            enable_dns_hostnames=True,
            enable_dns_support=True
        )
        aws_service_discovery_private_dns_namespace_example =
        aws.service_discovery_private_dns_namespace.ServiceDiscoveryPrivateDnsNamespace(self, "example_1",
            description="example",
            name="example.terraform.local",
            vpc=cdktf.Token.as_string(aws_vpc_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_service_discovery_private_dns_namespace_example.override_logical_id("example")
        aws_service_discovery_service_example =
        aws.service_discovery_service.ServiceDiscoveryService(self, "example_2",
            dns_config=ServiceDiscoveryServiceDnsConfig(
                dns_records=[ServiceDiscoveryServiceDnsConfigDnsRecords(
                    ttl=10,
                    type="A"
                )
                ],
                namespace_id=cdktf.Token.as_string(aws_service_discovery_private_dns_namespace_example.id),
                routing_policy="MULTIVALUE"
            ),
            health_check_custom_config=ServiceDiscoveryServiceHealthCheckCustomConfig(
                failure_threshold=1
            ),
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_service_discovery_service_example.override_logical_id("example")
        aws_service_discovery_instance_example =
        aws.service_discovery_instance.ServiceDiscoveryInstance(self, "example_3",
            attributes={
                "AWS_INSTANCE_IPV4": "172.18.0.1",
                "custom_attribute": "custom"
            },
            instance_id="example-instance-id",
            service_id=cdktf.Token.as_string(aws_service_discovery_service_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_service_discovery_instance_example.override_logical_id("example")
```

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_service_discovery_http_namespace_example =
        aws.service_discovery_http_namespace.ServiceDiscoveryHttpNamespace(self, "example",
            description="example",
            name="example.terraform.com"
        )
        aws_service_discovery_service_example =
        aws.service_discovery_service.ServiceDiscoveryService(self, "example_1",
            name="example",
            namespace_id=cdktf.Token.as_string(aws_service_discovery_http_namespace_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_service_discovery_service_example.override_logical_id("example")
        aws_service_discovery_instance_example =
        aws.service_discovery_instance.ServiceDiscoveryInstance(self, "example_2",
            attributes={
                "AWS_EC2_INSTANCE_ID": "i-0abdg374kd892cj6dl"
            },
            instance_id="example-instance-id",
            service_id=cdktf.Token.as_string(aws_service_discovery_service_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_service_discovery_instance_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `instance_id` - (Required, ForceNew) The ID of the service instance.
* `service_id` - (Required, ForceNew) The ID of the service that you want to use to create the instance.
* `attributes` - (Required) A map contains the attributes of the instance. Check the [doc](https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html#API_RegisterInstance_RequestSyntax) for the supported attributes and syntax.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The ID of the instance.

## Import

Service Discovery Instance can be imported using the service ID and instance ID, e.g.,

```
$ terraform import aws_service_discovery_instance.example 0123456789/i-0123
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-79904ef9b60ba919714982b906d114815ae4555b5b20156be0323e37fa5be694 -->