---
subcategory: "IAM (Identity & Access Management)"
layout: "aws"
page_title: "AWS: aws_iam_user"
description: |-
  Provides an IAM user.
---

# Resource: aws_iam_user

Provides an IAM user.

~> *NOTE:* If policies are attached to the user via the [`aws_iam_policy_attachment` resource](/docs/providers/aws/r/iam_policy_attachment.html) and you are modifying the user `name` or `path`, the `force_destroy` argument must be set to `true` and applied before attempting the operation otherwise you will encounter a `DeleteConflict` error. The [`aws_iam_user_policy_attachment` resource (recommended)](/docs/providers/aws/r/iam_user_policy_attachment.html) does not have this requirement.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_iam_user_lb = aws.iam_user.IamUser(self, "lb",
            name="loadbalancer",
            path="/system/",
            tags={
                "tag-key": "tag-value"
            }
        )
        data_aws_iam_policy_document_lb_ro =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "lb_ro",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["ec2:Describe*"],
                effect="Allow",
                resources=["*"]
            )
            ]
        )
        aws_iam_access_key_lb = aws.iam_access_key.IamAccessKey(self, "lb_2",
            user=cdktf.Token.as_string(aws_iam_user_lb.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_access_key_lb.override_logical_id("lb")
        aws_iam_user_policy_lb_ro = aws.iam_user_policy.IamUserPolicy(self, "lb_ro_3",
            name="test",
            policy=cdktf.Token.as_string(data_aws_iam_policy_document_lb_ro.json),
            user=cdktf.Token.as_string(aws_iam_user_lb.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_user_policy_lb_ro.override_logical_id("lb_ro")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The user's name. The name must consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: `=,.@-_.`. User names are not distinguished by case. For example, you cannot create users named both "TESTUSER" and "testuser".
* `path` - (Optional, default "/") Path in which to create the user.
* `permissions_boundary` - (Optional) The ARN of the policy that is used to set the permissions boundary for the user.
* `force_destroy` - (Optional, default false) When destroying this user, destroy even if it
  has non-Terraform-managed IAM access keys, login profile or MFA devices. Without `force_destroy`
  a user with non-Terraform-managed access keys and login profile will fail to be destroyed.
* `tags` - Key-value map of tags for the IAM user. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `arn` - The ARN assigned by AWS for this user.
* `name` - The user's name.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).
* `unique_id` - The [unique ID][1] assigned by AWS.

  [1]: https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html#GUIDs

## Import

IAM Users can be imported using the `name`, e.g.,

```
$ terraform import aws_iam_user.lb loadbalancer
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-9f7ddf0606b30c5f4d5d5e81173b8f32daffff65a8779f3ffa17082f1e243561 -->