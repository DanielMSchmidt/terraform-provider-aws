---
subcategory: "IAM (Identity & Access Management)"
layout: "aws"
page_title: "AWS: aws_iam_role_policy_attachment"
description: |-
  Attaches a Managed IAM Policy to an IAM role
---

# Resource: aws_iam_role_policy_attachment

Attaches a Managed IAM Policy to an IAM role

~> **NOTE:** The usage of this resource conflicts with the `aws_iam_policy_attachment` resource and will permanently show a difference if both are defined.

~> **NOTE:** For a given role, this resource is incompatible with using the [`aws_iam_role` resource](/docs/providers/aws/r/iam_role.html) `managed_policy_arns` argument. When using that argument and this resource, both will attempt to manage the role's managed policy attachments and Terraform will show a permanent difference.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_aws_iam_policy_document_assume_role =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["ec2.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        data_aws_iam_policy_document_policy =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "policy",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["ec2:Describe*"],
                effect="Allow",
                resources=["*"]
            )
            ]
        )
        aws_iam_policy_policy = aws.iam_policy.IamPolicy(self, "policy_2",
            description="A test policy",
            name="test-policy",
            policy=cdktf.Token.as_string(data_aws_iam_policy_document_policy.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_policy_policy.override_logical_id("policy")
        aws_iam_role_role = aws.iam_role.IamRole(self, "role",
            assume_role_policy=cdktf.Token.as_string(data_aws_iam_policy_document_assume_role.json),
            name="test-role"
        )
        aws.iam_role_policy_attachment.IamRolePolicyAttachment(self, "test-attach",
            policy_arn=cdktf.Token.as_string(aws_iam_policy_policy.arn),
            role=cdktf.Token.as_string(aws_iam_role_role.name)
        )
```

## Argument Reference

The following arguments are supported:

* `role`  (Required) - The name of the IAM role to which the policy should be applied
* `policy_arn` (Required) - The ARN of the policy you want to apply

## Attributes Reference

No additional attributes are exported.

## Import

IAM role policy attachments can be imported using the role name and policy arn separated by `/`.

```
$ terraform import aws_iam_role_policy_attachment.test-attach test-role/arn:aws:iam::xxxxxxxxxxxx:policy/test-policy
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-fd6e908c651ec27ec13ed38e04770a8a70b66616518219cb963704cc60d0d532 -->