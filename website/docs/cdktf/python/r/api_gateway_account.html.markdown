---
subcategory: "API Gateway"
layout: "aws"
page_title: "AWS: aws_api_gateway_account"
description: |-
  Provides a settings of an API Gateway Account.
---

# Resource: aws_api_gateway_account

Provides a settings of an API Gateway Account. Settings is applied region-wide per `provider` block.

-> **Note:** As there is no API method for deleting account settings or resetting it to defaults, destroying this resource will keep your account settings intact

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_aws_iam_policy_document_assume_role =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["apigateway.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        data_aws_iam_policy_document_cloudwatch =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "cloudwatch",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["logs:CreateLogGroup", "logs:CreateLogStream", "logs:DescribeLogGroups", "logs:DescribeLogStreams", "logs:PutLogEvents", "logs:GetLogEvents", "logs:FilterLogEvents"
                ],
                effect="Allow",
                resources=["*"]
            )
            ]
        )
        aws_iam_role_cloudwatch = aws.iam_role.IamRole(self, "cloudwatch_2",
            assume_role_policy=cdktf.Token.as_string(data_aws_iam_policy_document_assume_role.json),
            name="api_gateway_cloudwatch_global"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_cloudwatch.override_logical_id("cloudwatch")
        aws_iam_role_policy_cloudwatch = aws.iam_role_policy.IamRolePolicy(self, "cloudwatch_3",
            name="default",
            policy=cdktf.Token.as_string(data_aws_iam_policy_document_cloudwatch.json),
            role=cdktf.Token.as_string(aws_iam_role_cloudwatch.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_cloudwatch.override_logical_id("cloudwatch")
        aws.api_gateway_account.ApiGatewayAccount(self, "demo",
            cloudwatch_role_arn=cdktf.Token.as_string(aws_iam_role_cloudwatch.arn)
        )
```

## Argument Reference

The following argument is supported:

* `cloudwatch_role_arn` - (Optional) ARN of an IAM role for CloudWatch (to allow logging & monitoring). See more [in AWS Docs](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-stage-settings.html#how-to-stage-settings-console). Logging & monitoring can be enabled/disabled and otherwise tuned on the API Gateway Stage level.

## Attributes Reference

The following attribute is exported:

* `throttle_settings` - Account-Level throttle settings. See exported fields below.

`throttle_settings` block exports the following:

* `burst_limit` - Absolute maximum number of times API Gateway allows the API to be called per second (RPS).
* `rate_limit` - Number of times API Gateway allows the API to be called per second on average (RPS).

## Import

API Gateway Accounts can be imported using the word `api-gateway-account`, e.g.,

```
$ terraform import aws_api_gateway_account.demo api-gateway-account
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-0db27bc0d3d088f73186243c6d547351ff90917ef9c5d014630e0582878534a4 -->