---
subcategory: "Directory Service"
layout: "aws"
page_title: "AWS: aws_directory_service_region"
description: |-
    Manages a replicated Region and directory for Multi-Region replication.
---

# Resource: aws_directory_service_region

Manages a replicated Region and directory for Multi-Region replication.
Multi-Region replication is only supported for the Enterprise Edition of AWS Managed Microsoft AD.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws.provider.AwsProvider(self, "aws",
            region="us-west-2"
        )
        aws_secondary = aws.provider.AwsProvider(self, "aws_1",
            alias="secondary",
            region="us-east-2"
        )
        aws_vpc_example = aws.vpc.Vpc(self, "example",
            cidr_block="10.0.0.0/16",
            tags={
                "Name": "Primary"
            }
        )
        aws_vpc_example_secondary = aws.vpc.Vpc(self, "example-secondary",
            cidr_block="10.1.0.0/16",
            provider=aws_secondary,
            tags={
                "Name": "Secondary"
            }
        )
        data_aws_availability_zones_available =
        aws.data_aws_availability_zones.DataAwsAvailabilityZones(self, "available",
            filter=[DataAwsAvailabilityZonesFilter(
                name="opt-in-status",
                values=["opt-in-not-required"]
            )
            ],
            state="available"
        )
        data_aws_availability_zones_available_secondary =
        aws.data_aws_availability_zones.DataAwsAvailabilityZones(self, "available-secondary",
            filter=[DataAwsAvailabilityZonesFilter(
                name="opt-in-status",
                values=["opt-in-not-required"]
            )
            ],
            provider=aws_secondary,
            state="available"
        )
        data_aws_region_example = aws.data_aws_region.DataAwsRegion(self, "example_6",
            provider=aws_secondary
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_region_example.override_logical_id("example")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        aws_subnet_example_count = cdktf.TerraformCount.of(
            cdktf.Token.as_number("2"))
        aws_subnet_example = aws.subnet.Subnet(self, "example_7",
            availability_zone=cdktf.Token.as_string(
                cdktf.property_access(data_aws_availability_zones_available.names, [aws_subnet_example_count.index
                ])),
            cidr_block=cdktf.Fn.cidrsubnet(
                cdktf.Token.as_string(aws_vpc_example.cidr_block), 8,
                cdktf.Token.as_number(aws_subnet_example_count.index)),
            tags={
                "Name": "Primary"
            },
            vpc_id=cdktf.Token.as_string(aws_vpc_example.id),
            count=aws_subnet_example_count
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_subnet_example.override_logical_id("example")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        aws_subnet_example_secondary_count = cdktf.TerraformCount.of(
            cdktf.Token.as_number("2"))
        aws_subnet_example_secondary = aws.subnet.Subnet(self, "example-secondary_8",
            availability_zone=cdktf.Token.as_string(
                cdktf.property_access(data_aws_availability_zones_available_secondary.names, [aws_subnet_example_secondary_count.index])),
            cidr_block=cdktf.Fn.cidrsubnet(
                cdktf.Token.as_string(aws_vpc_example_secondary.cidr_block), 8,
                cdktf.Token.as_number(aws_subnet_example_secondary_count.index)),
            provider=aws_secondary,
            tags={
                "Name": "Secondary"
            },
            vpc_id=cdktf.Token.as_string(aws_vpc_example_secondary.id),
            count=aws_subnet_example_secondary_count
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_subnet_example_secondary.override_logical_id("example-secondary")
        aws_directory_service_directory_example =
        aws.directory_service_directory.DirectoryServiceDirectory(self, "example_9",
            name="example.com",
            password="SuperSecretPassw0rd",
            type="MicrosoftAD",
            vpc_settings=DirectoryServiceDirectoryVpcSettings(
                subnet_ids=cdktf.Token.as_list(
                    cdktf.property_access(aws_subnet_example, ["*", "id"])),
                vpc_id=cdktf.Token.as_string(aws_vpc_example.id)
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_directory_service_directory_example.override_logical_id("example")
        aws_directory_service_region_example =
        aws.directory_service_region.DirectoryServiceRegion(self, "example_10",
            directory_id=cdktf.Token.as_string(aws_directory_service_directory_example.id),
            region_name=cdktf.Token.as_string(data_aws_region_example.name),
            tags={
                "Name": "Secondary"
            },
            vpc_settings=DirectoryServiceRegionVpcSettings(
                subnet_ids=cdktf.Token.as_list(
                    cdktf.property_access(aws_subnet_example_secondary, ["*", "id"])),
                vpc_id=cdktf.Token.as_string(aws_vpc_example_secondary.id)
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_directory_service_region_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `desired_number_of_domain_controllers` - (Optional) The number of domain controllers desired in the replicated directory. Minimum value of `2`.
* `directory_id` - (Required) The identifier of the directory to which you want to add Region replication.
* `region_name` - (Required) The name of the Region where you want to add domain controllers for replication.
* `tags` - (Optional) Map of tags to assign to this resource. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `vpc_settings` - (Required) VPC information in the replicated Region. Detailed below.

### `vpc_settings`

* `subnet_ids` - (Required) The identifiers of the subnets for the directory servers.
* `vpc_id` - (Optional) The identifier of the VPC in which to create the directory.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).

## Timeouts

`aws_directory_service_region` provides the following [Timeouts](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts) configuration options:

- `create` - (Default `180 minutes`) Used for Region addition
- `update` - (Default `90 minutes`) Used for replicated directory update
- `delete` - (Default `90 minutes`) Used for Region removal

## Import

Replicated Regions can be imported using directory ID,Region name e.g.,

```
$ terraform import aws_directory_service_region.example d-9267651497,us-east-2
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-e3c71535ca229682fdf923c32c2b7a503058eab5738d8b0006adc9f1439888ca -->