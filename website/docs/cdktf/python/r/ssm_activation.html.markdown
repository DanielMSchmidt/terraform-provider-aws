---
subcategory: "SSM (Systems Manager)"
layout: "aws"
page_title: "AWS: aws_ssm_activation"
description: |-
  Registers an on-premises server or virtual machine with Amazon EC2 so that it can be managed using Run Command.
---

# Resource: aws_ssm_activation

Registers an on-premises server or virtual machine with Amazon EC2 so that it can be managed using Run Command.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_aws_iam_policy_document_assume_role =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["ssm.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        aws_iam_role_test_role = aws.iam_role.IamRole(self, "test_role",
            assume_role_policy=cdktf.Token.as_string(data_aws_iam_policy_document_assume_role.json),
            name="test_role"
        )
        aws_iam_role_policy_attachment_test_attach =
        aws.iam_role_policy_attachment.IamRolePolicyAttachment(self, "test_attach",
            policy_arn="arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
            role=cdktf.Token.as_string(aws_iam_role_test_role.name)
        )
        aws.ssm_activation.SsmActivation(self, "foo",
            depends_on=[aws_iam_role_policy_attachment_test_attach],
            description="Test",
            iam_role=cdktf.Token.as_string(aws_iam_role_test_role.id),
            name="test_ssm_activation",
            registration_limit=cdktf.Token.as_number("5")
        )
```

## Argument Reference

The following arguments are supported:

* `name` - (Optional) The default name of the registered managed instance.
* `description` - (Optional) The description of the resource that you want to register.
* `expiration_date` - (Optional) UTC timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) by which this activation request should expire. The default value is 24 hours from resource creation time. Terraform will only perform drift detection of its value when present in a configuration.
* `iam_role` - (Required) The IAM Role to attach to the managed instance.
* `registration_limit` - (Optional) The maximum number of managed instances you want to register. The default value is 1 instance.
* `tags` - (Optional) A map of tags to assign to the object. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The activation ID.
* `activation_code` - The code the system generates when it processes the activation.
* `name` - The default name of the registered managed instance.
* `description` - The description of the resource that was registered.
* `expired` - If the current activation has expired.
* `expiration_date` - The date by which this activation request should expire. The default value is 24 hours.
* `iam_role` - The IAM Role attached to the managed instance.
* `registration_limit` - The maximum number of managed instances you want to be registered. The default value is 1 instance.
* `registration_count` - The number of managed instances that are currently registered using this activation.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

AWS SSM Activation can be imported using the `id`, e.g.,

```sh
$ terraform import aws_ssm_activation.example e488f2f6-e686-4afb-8a04-ef6dfEXAMPLE
```

-> **Note:** The `activation_code` attribute cannot be imported.

<!-- cache-key: cdktf-0.17.0-pre.15 input-7acd5e0f46d6c73a4fe7920f2883befe20f7fd40a71911583f219cd9793acb0f -->