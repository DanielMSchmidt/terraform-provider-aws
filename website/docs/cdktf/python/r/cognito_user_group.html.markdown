---
subcategory: "Cognito IDP (Identity Provider)"
layout: "aws"
page_title: "AWS: aws_cognito_user_group"
description: |-
  Provides a Cognito User Group resource.
---

# Resource: aws_cognito_user_group

Provides a Cognito User Group resource.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_cognito_user_pool_main = aws.cognito_user_pool.CognitoUserPool(self, "main",
            name="identity pool"
        )
        data_aws_iam_policy_document_group_role =
        aws.data_aws_iam_policy_document.DataAwsIamPolicyDocument(self, "group_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRoleWithWebIdentity"],
                condition=[DataAwsIamPolicyDocumentStatementCondition(
                    test="StringEquals",
                    values=["us-east-1:12345678-dead-beef-cafe-123456790ab"],
                    variable="cognito-identity.amazonaws.com:aud"
                ), DataAwsIamPolicyDocumentStatementCondition(
                    test="ForAnyValue:StringLike",
                    values=["authenticated"],
                    variable="cognito-identity.amazonaws.com:amr"
                )
                ],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["cognito-identity.amazonaws.com"],
                    type="Federated"
                )
                ]
            )
            ]
        )
        aws_iam_role_group_role = aws.iam_role.IamRole(self, "group_role_2",
            assume_role_policy=cdktf.Token.as_string(data_aws_iam_policy_document_group_role.json),
            name="user-group-role"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_group_role.override_logical_id("group_role")
        aws_cognito_user_group_main = aws.cognito_user_group.CognitoUserGroup(self, "main_3",
            description="Managed by Terraform",
            name="user-group",
            precedence=42,
            role_arn=cdktf.Token.as_string(aws_iam_role_group_role.arn),
            user_pool_id=cdktf.Token.as_string(aws_cognito_user_pool_main.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cognito_user_group_main.override_logical_id("main")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the user group.
* `user_pool_id` - (Required) The user pool ID.
* `description` - (Optional) The description of the user group.
* `precedence` - (Optional) The precedence of the user group.
* `role_arn` - (Optional) The ARN of the IAM role to be associated with the user group.

## Attributes Reference

No additional attributes are exported.

## Import

Cognito User Groups can be imported using the `user_pool_id`/`name` attributes concatenated, e.g.,

```
$ terraform import aws_cognito_user_group.group us-east-1_vG78M4goG/user-group
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-ff27dbe6cd8c9329e6fa2f080ce7ab5a29cb0b419f1036ed069fc336e117b01c -->