---
subcategory: "ACM PCA (Certificate Manager Private Certificate Authority)"
layout: "aws"
page_title: "AWS: aws_acmpca_certificate_authority_certificate"
description: |-
  Associates a certificate with an AWS Certificate Manager Private Certificate Authority
---

# Resource: aws_acmpca_certificate_authority_certificate

Associates a certificate with an AWS Certificate Manager Private Certificate Authority (ACM PCA Certificate Authority). An ACM PCA Certificate Authority is unable to issue certificates until it has a certificate associated with it. A root level ACM PCA Certificate Authority is able to self-sign its own root certificate.

## Example Usage

### Self-Signed Root Certificate Authority Certificate

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_acmpca_certificate_authority_example =
        aws.acmpca_certificate_authority.AcmpcaCertificateAuthority(self, "example",
            certificate_authority_configuration=AcmpcaCertificateAuthorityCertificateAuthorityConfiguration(
                key_algorithm="RSA_4096",
                signing_algorithm="SHA512WITHRSA",
                subject=AcmpcaCertificateAuthorityCertificateAuthorityConfigurationSubject(
                    common_name="example.com"
                )
            ),
            type="ROOT"
        )
        data_aws_partition_current = aws.data_aws_partition.DataAwsPartition(self, "current")
        aws_acmpca_certificate_example =
        aws.acmpca_certificate.AcmpcaCertificate(self, "example_2",
            certificate_authority_arn=cdktf.Token.as_string(aws_acmpca_certificate_authority_example.arn),
            certificate_signing_request=cdktf.Token.as_string(aws_acmpca_certificate_authority_example.certificate_signing_request),
            signing_algorithm="SHA512WITHRSA",
            template_arn="arn:${" + data_aws_partition_current.partition + "}:acm-pca:::template/RootCACertificate/V1",
            validity=AcmpcaCertificateValidity(
                type="YEARS",
                value=cdktf.Token.as_string(1)
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_acmpca_certificate_example.override_logical_id("example")
        aws_acmpca_certificate_authority_certificate_example =
        aws.acmpca_certificate_authority_certificate.AcmpcaCertificateAuthorityCertificate(self, "example_3",
            certificate=cdktf.Token.as_string(aws_acmpca_certificate_example.certificate),
            certificate_authority_arn=cdktf.Token.as_string(aws_acmpca_certificate_authority_example.arn),
            certificate_chain=cdktf.Token.as_string(aws_acmpca_certificate_example.certificate_chain)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_acmpca_certificate_authority_certificate_example.override_logical_id("example")
```

### Certificate for Subordinate Certificate Authority

Note that the certificate for the subordinate certificate authority must be issued by the root certificate authority using a signing request from the subordinate certificate authority.

```terraform
resource "aws_acmpca_certificate_authority_certificate" "subordinate" {
  certificate_authority_arn = aws_acmpca_certificate_authority.subordinate.arn

  certificate       = aws_acmpca_certificate.subordinate.certificate
  certificate_chain = aws_acmpca_certificate.subordinate.certificate_chain
}

resource "aws_acmpca_certificate" "subordinate" {
  certificate_authority_arn   = aws_acmpca_certificate_authority.root.arn
  certificate_signing_request = aws_acmpca_certificate_authority.subordinate.certificate_signing_request
  signing_algorithm           = "SHA512WITHRSA"

  template_arn = "arn:${data.aws_partition.current.partition}:acm-pca:::template/SubordinateCACertificate_PathLen0/V1"

  validity {
    type  = "YEARS"
    value = 1
  }
}

resource "aws_acmpca_certificate_authority" "subordinate" {
  type = "SUBORDINATE"

  certificate_authority_configuration {
    key_algorithm     = "RSA_2048"
    signing_algorithm = "SHA512WITHRSA"

    subject {
      common_name = "sub.example.com"
    }
  }
}

resource "aws_acmpca_certificate_authority" "root" {
  # ...
}

resource "aws_acmpca_certificate_authority_certificate" "root" {
  # ...
}

resource "aws_acmpca_certificate" "root" {
  # ...
}

data "aws_partition" "current" {}
```

## Argument Reference

The following arguments are supported:

* `certificate` - (Required) PEM-encoded certificate for the Certificate Authority.
* `certificate_authority_arn` - (Required) ARN of the Certificate Authority.
* `certificate_chain` - (Optional) PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA. Required for subordinate Certificate Authorities. Not allowed for root Certificate Authorities.

## Attributes Reference

No additional attributes are exported.

<!-- cache-key: cdktf-0.17.0-pre.15 input-792ce47e5b79def0a08daa87a5cf424dcd2e6d5692877c2f4ae085aa34101f8a -->