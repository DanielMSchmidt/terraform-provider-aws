---
subcategory: "EventBridge"
layout: "aws"
page_title: "AWS: aws_cloudwatch_event_archive"
description: |-
  Provides an EventBridge event archive resource.
---

# Resource: aws_cloudwatch_event_archive

Provides an EventBridge event archive resource.

~> **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_cloudwatch_event_bus_order =
        aws.cloudwatch_event_bus.CloudwatchEventBus(self, "order",
            name="orders"
        )
        aws_cloudwatch_event_archive_order =
        aws.cloudwatch_event_archive.CloudwatchEventArchive(self, "order_1",
            event_source_arn=cdktf.Token.as_string(aws_cloudwatch_event_bus_order.arn),
            name="order-archive"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cloudwatch_event_archive_order.override_logical_id("order")
```

## Example all optional arguments

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_cloudwatch_event_bus_order =
        aws.cloudwatch_event_bus.CloudwatchEventBus(self, "order",
            name="orders"
        )
        aws_cloudwatch_event_archive_order =
        aws.cloudwatch_event_archive.CloudwatchEventArchive(self, "order_1",
            description="Archived events from order service",
            event_pattern=cdktf.Fn.jsonencode({
                "source": ["company.team.order"]
            }),
            event_source_arn=cdktf.Token.as_string(aws_cloudwatch_event_bus_order.arn),
            name="order-archive",
            retention_days=7
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cloudwatch_event_archive_order.override_logical_id("order")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the new event archive. The archive name cannot exceed 48 characters.
* `event_source_arn` - (Required) Event bus source ARN from where these events should be archived.
* `description` - (Optional) The description of the new event archive.
* `event_pattern` - (Optional) Instructs the new event archive to only capture events matched by this pattern. By default, it attempts to archive every event received in the `event_source_arn`.
* `retention_days` - (Optional) The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `arn` - The Amazon Resource Name (ARN) of the event archive.

## Import

Event Archive can be imported using their name, for example

```console
$ terraform import aws_cloudwatch_event_archive.imported_event_archive order-archive
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-cf6adce265c4fc2c293991934694cec0af650d63081abb6d5444e471c12f1ada -->