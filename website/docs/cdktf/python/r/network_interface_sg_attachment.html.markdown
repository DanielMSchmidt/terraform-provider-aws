---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_network_interface_sg_attachment"
description: |-
  Associates a security group with a network interface.
---

# Resource: aws_network_interface_sg_attachment

This resource attaches a security group to an Elastic Network Interface (ENI).
It can be used to attach a security group to any existing ENI, be it a
secondary ENI or one attached as the primary interface on an instance.

~> **NOTE on instances, interfaces, and security groups:** Terraform currently
provides the capability to assign security groups via the [`aws_instance`][1]
and the [`aws_network_interface`][2] resources. Using this resource in
conjunction with security groups provided in-line in those resources will cause
conflicts, and will lead to spurious diffs and undefined behavior - please use
one or the other.

[1]: /docs/providers/aws/d/instance.html
[2]: /docs/providers/aws/r/network_interface.html

## Example Usage

The following provides a very basic example of setting up an instance (provided
by `instance`) in the default security group, creating a security group
(provided by `sg`) and then attaching the security group to the instance's
primary network interface via the `aws_network_interface_sg_attachment` resource,
named `sg_attachment`:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_security_group_sg = aws.security_group.SecurityGroup(self, "sg",
            tags={
                "type": "terraform-test-security-group"
            }
        )
        data_aws_ami_ami = aws.data_aws_ami.DataAwsAmi(self, "ami",
            filter=[DataAwsAmiFilter(
                name="name",
                values=["amzn-ami-hvm-*"]
            )
            ],
            most_recent=True,
            owners=["amazon"]
        )
        aws_instance_instance = aws.instance.Instance(self, "instance",
            ami=cdktf.Token.as_string(data_aws_ami_ami.id),
            instance_type="t2.micro",
            tags={
                "type": "terraform-test-instance"
            }
        )
        aws.network_interface_sg_attachment.NetworkInterfaceSgAttachment(self, "sg_attachment",
            network_interface_id=cdktf.Token.as_string(aws_instance_instance.primary_network_interface_id),
            security_group_id=cdktf.Token.as_string(aws_security_group_sg.id)
        )
```

In this example, `instance` is provided by the `aws_instance` data source,
fetching an external instance, possibly not managed by Terraform.
`sg_attachment` then attaches to the output instance's `network_interface_id`:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_security_group_sg = aws.security_group.SecurityGroup(self, "sg",
            tags={
                "type": "terraform-test-security-group"
            }
        )
        data_aws_instance_instance = aws.data_aws_instance.DataAwsInstance(self, "instance",
            instance_id="i-1234567890abcdef0"
        )
        aws.network_interface_sg_attachment.NetworkInterfaceSgAttachment(self, "sg_attachment",
            network_interface_id=cdktf.Token.as_string(data_aws_instance_instance.network_interface_id),
            security_group_id=cdktf.Token.as_string(aws_security_group_sg.id)
        )
```

## Argument Reference

* `security_group_id` - (Required) The ID of the security group.
* `network_interface_id` - (Required) The ID of the network interface to attach to.

## Attributes Reference

No additional attributes are exported.

## Import

Network Interface Security Group attachments can be imported using the associated network interface ID and security group ID, separated by an underscore (`_`).

For example:

```
$ terraform import aws_network_interface_sg_attachment.sg_attachment eni-1234567890abcdef0_sg-1234567890abcdef0
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-32045e4967db7b586a25c42bc00a6feb43599887e7ccf5bd469f698ceb8074bb -->