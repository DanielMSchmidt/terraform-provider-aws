---
subcategory: "ElastiCache"
layout: "aws"
page_title: "AWS: aws_elasticache_user_group_association"
description: |-
  Associate an ElastiCache user and user group.
---

# Resource: aws_elasticache_user_group_association

Associate an existing ElastiCache user and an existing user group.

~> **NOTE:** Terraform will detect changes in the `aws_elasticache_user_group` since `aws_elasticache_user_group_association` changes the user IDs associated with the user group. You can ignore these changes with the `lifecycle` `ignore_changes` meta argument as shown in the example.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_elasticache_user_default = aws.elasticache_user.ElasticacheUser(self, "default",
            access_string="on ~app::* -@all +@read +@hash +@bitmap +@geo -setbit -bitfield -hset -hsetnx -hmset -hincrby -hincrbyfloat -hdel -bitop -geoadd -georadius -georadiusbymember",
            engine="REDIS",
            passwords=["password123456789"],
            user_id="defaultUserID",
            user_name="default"
        )
        aws_elasticache_user_example = aws.elasticache_user.ElasticacheUser(self, "example",
            access_string="on ~app::* -@all +@read +@hash +@bitmap +@geo -setbit -bitfield -hset -hsetnx -hmset -hincrby -hincrbyfloat -hdel -bitop -geoadd -georadius -georadiusbymember",
            engine="REDIS",
            passwords=["password123456789"],
            user_id="exampleUserID",
            user_name="exampleuser"
        )
        aws_elasticache_user_group_example =
        aws.elasticache_user_group.ElasticacheUserGroup(self, "example_2",
            engine="REDIS",
            lifecycle=cdktf.TerraformResourceLifecycle(
                ignore_changes=[user_ids]
            ),
            user_group_id="userGroupId",
            user_ids=[cdktf.Token.as_string(aws_elasticache_user_default.user_id)]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_elasticache_user_group_example.override_logical_id("example")
        aws_elasticache_user_group_association_example =
        aws.elasticache_user_group_association.ElasticacheUserGroupAssociation(self, "example_3",
            user_group_id=cdktf.Token.as_string(aws_elasticache_user_group_example.user_group_id),
            user_id=cdktf.Token.as_string(aws_elasticache_user_example.user_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_elasticache_user_group_association_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `user_group_id` - (Required) ID of the user group.
* `user_id` - (Required) ID of the user to associated with the user group.

## Attributes Reference

No additional attributes are exported.

## Import

ElastiCache user group associations can be imported using the `user_group_id` and `user_id`, e.g.,

```
$ terraform import aws_elasticache_user_group_association.example userGoupId1,userId
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-a98e10658c021cf3d8cdf67c4aa90221c8ea280afee67a03f3f22612f05168d6 -->