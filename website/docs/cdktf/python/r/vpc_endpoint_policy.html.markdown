---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_vpc_endpoint_policy"
description: |-
  Provides a VPC Endpoint Policy resource.
---

# Resource: aws_vpc_endpoint_policy

Provides a VPC Endpoint Policy resource.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_vpc_example = aws.vpc.Vpc(self, "example",
            cidr_block="10.0.0.0/16"
        )
        data_aws_vpc_endpoint_service_example =
        aws.data_aws_vpc_endpoint_service.DataAwsVpcEndpointService(self, "example_1",
            service="dynamodb"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_vpc_endpoint_service_example.override_logical_id("example")
        aws_vpc_endpoint_example = aws.vpc_endpoint.VpcEndpoint(self, "example_2",
            service_name=cdktf.Token.as_string(data_aws_vpc_endpoint_service_example.service_name),
            vpc_id=cdktf.Token.as_string(aws_vpc_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_endpoint_example.override_logical_id("example")
        aws_vpc_endpoint_policy_example =
        aws.vpc_endpoint_policy.VpcEndpointPolicy(self, "example_3",
            policy=cdktf.Fn.jsonencode({
                "Statement": [{
                    "Action": ["dynamodb:*"],
                    "Effect": "Allow",
                    "Principal": {
                        "AWS": "*"
                    },
                    "Resource": "*",
                    "Sid": "AllowAll"
                }
                ],
                "Version": "2012-10-17"
            }),
            vpc_endpoint_id=cdktf.Token.as_string(aws_vpc_endpoint_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_endpoint_policy_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `vpc_endpoint_id` - (Required) The VPC Endpoint ID.
* `policy` - (Optional) A policy to attach to the endpoint that controls access to the service. Defaults to full access. All `Gateway` and some `Interface` endpoints support policies - see the [relevant AWS documentation](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html) for more details. For more information about building AWS IAM policy documents with Terraform, see the [AWS IAM Policy Document Guide](https://learn.hashicorp.com/terraform/aws/iam-policy).

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The ID of the VPC endpoint.

## Import

VPC Endpoint Policies can be imported using the `id`, e.g.

```
$ terraform import aws_vpc_endpoint_policy.example vpce-3ecf2a57
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-3a90315252cb0c2192557dcc0d4e28610e74220ecb2a239feb097742fa1a7fa3 -->