---
subcategory: "AppSync"
layout: "aws"
page_title: "AWS: aws_appsync_graphql_api"
description: |-
  Provides an AppSync GraphQL API.
---

# Resource: aws_appsync_graphql_api

Provides an AppSync GraphQL API.

## Example Usage

### API Key Authentication

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.appsyncGraphqlApi.AppsyncGraphqlApi(this, "example", {
      authenticationType: "API_KEY",
      name: "example",
    });
  }
}

```

### AWS IAM Authentication

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.appsyncGraphqlApi.AppsyncGraphqlApi(this, "example", {
      authenticationType: "AWS_IAM",
      name: "example",
    });
  }
}

```

### AWS Cognito User Pool Authentication

```terraform
resource "aws_appsync_graphql_api" "example" {
  authentication_type = "AMAZON_COGNITO_USER_POOLS"
  name                = "example"

  user_pool_config {
    aws_region     = data.aws_region.current.name
    default_action = "DENY"
    user_pool_id   = aws_cognito_user_pool.example.id
  }
}
```

### OpenID Connect Authentication

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.appsyncGraphqlApi.AppsyncGraphqlApi(this, "example", {
      authenticationType: "OPENID_CONNECT",
      name: "example",
      openidConnectConfig: {
        issuer: "https://example.com",
      },
    });
  }
}

```

### AWS Lambda Authorizer Authentication

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const awsAppsyncGraphqlApiExample =
      new aws.appsyncGraphqlApi.AppsyncGraphqlApi(this, "example", {
        authenticationType: "AWS_LAMBDA",
        lambdaAuthorizerConfig: {
          authorizerUri:
            "arn:aws:lambda:us-east-1:123456789012:function:custom_lambda_authorizer",
        },
        name: "example",
      });
    new aws.lambdaPermission.LambdaPermission(
      this,
      "appsync_lambda_authorizer",
      {
        action: "lambda:InvokeFunction",
        functionName: "custom_lambda_authorizer",
        principal: "appsync.amazonaws.com",
        sourceArn: cdktf.Token.asString(awsAppsyncGraphqlApiExample.arn),
        statementId: "appsync_lambda_authorizer",
      }
    );
  }
}

```

### With Multiple Authentication Providers

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.appsyncGraphqlApi.AppsyncGraphqlApi(this, "example", {
      additionalAuthenticationProvider: [
        {
          authenticationType: "AWS_IAM",
        },
      ],
      authenticationType: "API_KEY",
      name: "example",
    });
  }
}

```

### With Schema

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.appsyncGraphqlApi.AppsyncGraphqlApi(this, "example", {
      authenticationType: "AWS_IAM",
      name: "example",
      schema: "schema {\n\tquery: Query\n}\ntype Query {\n  test: Int\n}\n",
    });
  }
}

```

### Enabling Logging

```terraform
data "aws_iam_policy_document" "assume_role" {
  statement {
    effect = "Allow"

    principals {
      type        = "Service"
      identifiers = ["appsync.amazonaws.com"]
    }

    actions = ["sts:AssumeRole"]
  }
}

resource "aws_iam_role" "example" {
  name               = "example"
  assume_role_policy = data.aws_iam_policy_document.assume_role.json
}

resource "aws_iam_role_policy_attachment" "example" {
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs"
  role       = aws_iam_role.example.name
}

resource "aws_appsync_graphql_api" "example" {
  # ... other configuration ...

  log_config {
    cloudwatch_logs_role_arn = aws_iam_role.example.arn
    field_log_level          = "ERROR"
  }
}
```

### Associate Web ACL (v2)

```terraform
resource "aws_appsync_graphql_api" "example" {
  authentication_type = "API_KEY"
  name                = "example"
}

resource "aws_wafv2_web_acl_association" "example" {
  resource_arn = aws_appsync_graphql_api.example.arn
  web_acl_arn  = aws_wafv2_web_acl.example.arn
}

resource "aws_wafv2_web_acl" "example" {
  name        = "managed-rule-example"
  description = "Example of a managed rule."
  scope       = "REGIONAL"

  default_action {
    allow {}
  }

  rule {
    name     = "rule-1"
    priority = 1

    override_action {
      block {}
    }

    statement {
      managed_rule_group_statement {
        name        = "AWSManagedRulesCommonRuleSet"
        vendor_name = "AWS"
      }
    }

    visibility_config {
      cloudwatch_metrics_enabled = false
      metric_name                = "friendly-rule-metric-name"
      sampled_requests_enabled   = false
    }
  }

  visibility_config {
    cloudwatch_metrics_enabled = false
    metric_name                = "friendly-metric-name"
    sampled_requests_enabled   = false
  }
}
```

## Argument Reference

The following arguments are supported:

* `authenticationType` - (Required) Authentication type. Valid values: `apiKey`, `awsIam`, `amazonCognitoUserPools`, `openidConnect`, `awsLambda`
* `name` - (Required) User-supplied name for the GraphqlApi.
* `logConfig` - (Optional) Nested argument containing logging configuration. Defined below.
* `openidConnectConfig` - (Optional) Nested argument containing OpenID Connect configuration. Defined below.
* `userPoolConfig` - (Optional) Amazon Cognito User Pool configuration. Defined below.
* `lambdaAuthorizerConfig` - (Optional) Nested argument containing Lambda authorizer configuration. Defined below.
* `schema` - (Optional) Schema definition, in GraphQL schema language format. Terraform cannot perform drift detection of this configuration.
* `additionalAuthenticationProvider` - (Optional) One or more additional authentication providers for the GraphqlApi. Defined below.
* `tags` - (Optional) Map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `xrayEnabled` - (Optional) Whether tracing with X-ray is enabled. Defaults to false.

### log_config

The following arguments are supported:

* `cloudwatchLogsRoleArn` - (Required) Amazon Resource Name of the service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account.
* `fieldLogLevel` - (Required) Field logging level. Valid values: `all`, `error`, `none`.
* `excludeVerboseContent` - (Optional) Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging  level. Valid values: `true`, `false`. Default value: `false`

### additional_authentication_provider

The following arguments are supported:

* `authenticationType` - (Required) Authentication type. Valid values: `apiKey`, `awsIam`, `amazonCognitoUserPools`, `openidConnect`, `awsLambda`
* `openidConnectConfig` - (Optional) Nested argument containing OpenID Connect configuration. Defined below.
* `userPoolConfig` - (Optional) Amazon Cognito User Pool configuration. Defined below.

### openid_connect_config

The following arguments are supported:

* `issuer` - (Required) Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
* `authTtl` - (Optional) Number of milliseconds a token is valid after being authenticated.
* `clientId` - (Optional) Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
* `iatTtl` - (Optional) Number of milliseconds a token is valid after being issued to a user.

### user_pool_config

The following arguments are supported:

* `defaultAction` - (Required only if Cognito is used as the default auth provider) Action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration. Valid: `allow` and `deny`
* `userPoolId` - (Required) User pool ID.
* `appIdClientRegex` - (Optional) Regular expression for validating the incoming Amazon Cognito User Pool app client ID.
* `awsRegion` - (Optional) AWS region in which the user pool was created.

### lambda_authorizer_config

The following arguments are supported:

* `authorizerUri` - (Required) ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow `lambda:invokeFunction` from service principal `appsyncAmazonawsCom`.
* `authorizerResultTtlInSeconds` - (Optional) Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a `ttlOverride` key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.
* `identityValidationExpression` - (Optional) Regular expression for validation of tokens before the Lambda function is called.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - API ID
* `arn` - ARN
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).
* `uris` - Map of URIs associated with the APIE.g., `uris["GRAPHQL"] = https://ID.appsync-api.REGION.amazonaws.com/graphql`

## Import

AppSync GraphQL API can be imported using the GraphQL API ID, e.g.,

```
$ terraform import aws_appsync_graphql_api.example 0123456789
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-7b8e775ca644effacdbe2b56f3535d157254f65d841ad97ea775ec71a10c9113 -->