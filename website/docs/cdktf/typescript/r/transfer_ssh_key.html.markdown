---
subcategory: "Transfer Family"
layout: "aws"
page_title: "AWS: aws_transfer_ssh_key"
description: |-
  Provides a AWS Transfer SSH Public Key resource.
---

# Resource: aws_transfer_ssh_key

Provides a AWS Transfer User SSH Key resource.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const awsTransferServerExample = new aws.transferServer.TransferServer(
      this,
      "example",
      {
        identityProviderType: "SERVICE_MANAGED",
        tags: {
          NAME: "tf-acc-test-transfer-server",
        },
      }
    );
    const dataAwsIamPolicyDocumentAssumeRole =
      new aws.dataAwsIamPolicyDocument.DataAwsIamPolicyDocument(
        this,
        "assume_role",
        {
          statement: [
            {
              actions: ["sts:AssumeRole"],
              effect: "Allow",
              principals: [
                {
                  identifiers: ["transfer.amazonaws.com"],
                  type: "Service",
                },
              ],
            },
          ],
        }
      );
    const dataAwsIamPolicyDocumentExample =
      new aws.dataAwsIamPolicyDocument.DataAwsIamPolicyDocument(
        this,
        "example_2",
        {
          statement: [
            {
              actions: ["s3:*"],
              effect: "Allow",
              resources: ["*"],
              sid: "AllowFullAccesstoS3",
            },
          ],
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsIamPolicyDocumentExample.overrideLogicalId("example");
    const awsIamRoleExample = new aws.iamRole.IamRole(this, "example_3", {
      assumeRolePolicy: cdktf.Token.asString(
        dataAwsIamPolicyDocumentAssumeRole.json
      ),
      name: "tf-test-transfer-user-iam-role",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRoleExample.overrideLogicalId("example");
    const awsIamRolePolicyExample = new aws.iamRolePolicy.IamRolePolicy(
      this,
      "example_4",
      {
        name: "tf-test-transfer-user-iam-policy",
        policy: cdktf.Token.asString(dataAwsIamPolicyDocumentExample.json),
        role: cdktf.Token.asString(awsIamRoleExample.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyExample.overrideLogicalId("example");
    const awsTransferUserExample = new aws.transferUser.TransferUser(
      this,
      "example_5",
      {
        role: cdktf.Token.asString(awsIamRoleExample.arn),
        serverId: cdktf.Token.asString(awsTransferServerExample.id),
        tags: {
          NAME: "tftestuser",
        },
        userName: "tftestuser",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsTransferUserExample.overrideLogicalId("example");
    const awsTransferSshKeyExample = new aws.transferSshKey.TransferSshKey(
      this,
      "example_6",
      {
        body: "... SSH key ...",
        serverId: cdktf.Token.asString(awsTransferServerExample.id),
        userName: cdktf.Token.asString(awsTransferUserExample.userName),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsTransferSshKeyExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `serverId` - (Requirement) The Server ID of the Transfer Server (e.g., `s12345678`)
* `userName` - (Requirement) The name of the user account that is assigned to one or more servers.
* `body` - (Requirement) The public key portion of an SSH key pair.

## Attributes Reference

No additional attributes are exported.

## Import

Transfer SSH Public Key can be imported using the `serverId` and `userName` and `sshPublicKeyId` separated by `/`.

```
$ terraform import aws_transfer_ssh_key.bar s-12345678/test-username/key-12345
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-1b8753e342290c5431b83618d8029e6394e9eb5a667b22b38150d8b669bc98fd -->