---
subcategory: "WAF Classic Regional"
layout: "aws"
page_title: "AWS: aws_wafregional_web_acl_association"
description: |-
  Manages an association with WAF Regional Web ACL
---

# Resource: aws_wafregional_web_acl_association

Manages an association with WAF Regional Web ACL.

-> **Note:** An Application Load Balancer can only be associated with one WAF Regional WebACL.

## Example Usage

### Application Load Balancer Association

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const awsVpcFoo = new aws.vpc.Vpc(this, "foo", {
      cidrBlock: "10.1.0.0/16",
    });
    const awsWafregionalIpsetIpset = new aws.wafregionalIpset.WafregionalIpset(
      this,
      "ipset",
      {
        ipSetDescriptor: [
          {
            type: "IPV4",
            value: "192.0.7.0/24",
          },
        ],
        name: "tfIPSet",
      }
    );
    const awsWafregionalRuleFoo = new aws.wafregionalRule.WafregionalRule(
      this,
      "foo_2",
      {
        metricName: "tfWAFRule",
        name: "tfWAFRule",
        predicate: [
          {
            dataId: cdktf.Token.asString(awsWafregionalIpsetIpset.id),
            negated: false,
            type: "IPMatch",
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsWafregionalRuleFoo.overrideLogicalId("foo");
    const awsWafregionalWebAclFoo = new aws.wafregionalWebAcl.WafregionalWebAcl(
      this,
      "foo_3",
      {
        defaultAction: {
          type: "ALLOW",
        },
        metricName: "foo",
        name: "foo",
        rule: [
          {
            action: {
              type: "BLOCK",
            },
            priority: 1,
            ruleId: cdktf.Token.asString(awsWafregionalRuleFoo.id),
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsWafregionalWebAclFoo.overrideLogicalId("foo");
    const dataAwsAvailabilityZonesAvailable =
      new aws.dataAwsAvailabilityZones.DataAwsAvailabilityZones(
        this,
        "available",
        {}
      );
    const awsSubnetBar = new aws.subnet.Subnet(this, "bar", {
      availabilityZone: cdktf.Token.asString(
        cdktf.propertyAccess(dataAwsAvailabilityZonesAvailable.names, ["1"])
      ),
      cidrBlock: "10.1.2.0/24",
      vpcId: cdktf.Token.asString(awsVpcFoo.id),
    });
    const awsSubnetFoo = new aws.subnet.Subnet(this, "foo_6", {
      availabilityZone: cdktf.Token.asString(
        cdktf.propertyAccess(dataAwsAvailabilityZonesAvailable.names, ["0"])
      ),
      cidrBlock: "10.1.1.0/24",
      vpcId: cdktf.Token.asString(awsVpcFoo.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSubnetFoo.overrideLogicalId("foo");
    const awsAlbFoo = new aws.alb.Alb(this, "foo_7", {
      internal: true,
      subnets: [
        cdktf.Token.asString(awsSubnetFoo.id),
        cdktf.Token.asString(awsSubnetBar.id),
      ],
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAlbFoo.overrideLogicalId("foo");
    const awsWafregionalWebAclAssociationFoo =
      new aws.wafregionalWebAclAssociation.WafregionalWebAclAssociation(
        this,
        "foo_8",
        {
          resourceArn: cdktf.Token.asString(awsAlbFoo.arn),
          webAclId: cdktf.Token.asString(awsWafregionalWebAclFoo.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsWafregionalWebAclAssociationFoo.overrideLogicalId("foo");
  }
}

```

### API Gateway Association

```terraform
resource "aws_wafregional_ipset" "ipset" {
  name = "tfIPSet"

  ip_set_descriptor {
    type  = "IPV4"
    value = "192.0.7.0/24"
  }
}

resource "aws_wafregional_rule" "foo" {
  name        = "tfWAFRule"
  metric_name = "tfWAFRule"

  predicate {
    data_id = aws_wafregional_ipset.ipset.id
    negated = false
    type    = "IPMatch"
  }
}

resource "aws_wafregional_web_acl" "foo" {
  name        = "foo"
  metric_name = "foo"

  default_action {
    type = "ALLOW"
  }

  rule {
    action {
      type = "BLOCK"
    }

    priority = 1
    rule_id  = aws_wafregional_rule.foo.id
  }
}

resource "aws_api_gateway_rest_api" "example" {
  body = jsonencode({
    openapi = "3.0.1"
    info = {
      title   = "example"
      version = "1.0"
    }
    paths = {
      "/path1" = {
        get = {
          x-amazon-apigateway-integration = {
            httpMethod           = "GET"
            payloadFormatVersion = "1.0"
            type                 = "HTTP_PROXY"
            uri                  = "https://ip-ranges.amazonaws.com/ip-ranges.json"
          }
        }
      }
    }
  })

  name = "example"
}

resource "aws_api_gateway_deployment" "example" {
  rest_api_id = aws_api_gateway_rest_api.example.id

  triggers = {
    redeployment = sha1(jsonencode(aws_api_gateway_rest_api.example.body))
  }

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_api_gateway_stage" "example" {
  deployment_id = aws_api_gateway_deployment.example.id
  rest_api_id   = aws_api_gateway_rest_api.example.id
  stage_name    = "example"
}

resource "aws_wafregional_web_acl_association" "association" {
  resource_arn = aws_api_gateway_stage.example.arn
  web_acl_id   = aws_wafregional_web_acl.foo.id
}
```

## Argument Reference

The following arguments are supported:

* `webAclId` - (Required) The ID of the WAF Regional WebACL to create an association.
* `resourceArn` - (Required) ARN of the resource to associate with. For example, an Application Load Balancer or API Gateway Stage.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The ID of the association

## Import

WAF Regional Web ACL Association can be imported using their `webAclId:resourceArn`, e.g.,

```
$ terraform import aws_wafregional_web_acl_association.foo web_acl_id:resource_arn
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-f7d0905a837cc90bfbd0c93490bd34581ad0d32d64b77837cbf1986ebad7d662 -->