---
subcategory: "Config"
layout: "aws"
page_title: "AWS: aws_config_configuration_recorder_status"
description: |-
  Manages status of an AWS Config Configuration Recorder.
---

# Resource: aws_config_configuration_recorder_status

Manages status (recording / stopped) of an AWS Config Configuration Recorder.

~> **Note:** Starting Configuration Recorder requires a [Delivery Channel](/docs/providers/aws/r/config_delivery_channel.html) to be present. Use of `dependsOn` (as shown below) is recommended to avoid race conditions.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const awsS3BucketB = new aws.s3Bucket.S3Bucket(this, "b", {
      bucket: "awsconfig-example",
    });
    const dataAwsIamPolicyDocumentAssumeRole =
      new aws.dataAwsIamPolicyDocument.DataAwsIamPolicyDocument(
        this,
        "assume_role",
        {
          statement: [
            {
              actions: ["sts:AssumeRole"],
              effect: "Allow",
              principals: [
                {
                  identifiers: ["config.amazonaws.com"],
                  type: "Service",
                },
              ],
            },
          ],
        }
      );
    const dataAwsIamPolicyDocumentP =
      new aws.dataAwsIamPolicyDocument.DataAwsIamPolicyDocument(this, "p", {
        statement: [
          {
            actions: ["s3:*"],
            effect: "Allow",
            resources: [
              cdktf.Token.asString(awsS3BucketB.arn),
              "${" + awsS3BucketB.arn + "}/*",
            ],
          },
        ],
      });
    const awsConfigDeliveryChannelFoo =
      new aws.configDeliveryChannel.ConfigDeliveryChannel(this, "foo", {
        name: "example",
        s3BucketName: cdktf.Token.asString(awsS3BucketB.bucket),
      });
    const awsIamRoleR = new aws.iamRole.IamRole(this, "r", {
      assumeRolePolicy: cdktf.Token.asString(
        dataAwsIamPolicyDocumentAssumeRole.json
      ),
      name: "example-awsconfig",
    });
    const awsIamRolePolicyP = new aws.iamRolePolicy.IamRolePolicy(this, "p_5", {
      name: "awsconfig-example",
      policy: cdktf.Token.asString(dataAwsIamPolicyDocumentP.json),
      role: cdktf.Token.asString(awsIamRoleR.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyP.overrideLogicalId("p");
    new aws.iamRolePolicyAttachment.IamRolePolicyAttachment(this, "a", {
      policyArn: "arn:aws:iam::aws:policy/service-role/AWS_ConfigRole",
      role: cdktf.Token.asString(awsIamRoleR.name),
    });
    const awsConfigConfigurationRecorderFoo =
      new aws.configConfigurationRecorder.ConfigConfigurationRecorder(
        this,
        "foo_7",
        {
          name: "example",
          roleArn: cdktf.Token.asString(awsIamRoleR.arn),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsConfigConfigurationRecorderFoo.overrideLogicalId("foo");
    const awsConfigConfigurationRecorderStatusFoo =
      new aws.configConfigurationRecorderStatus.ConfigConfigurationRecorderStatus(
        this,
        "foo_8",
        {
          dependsOn: [awsConfigDeliveryChannelFoo],
          isEnabled: true,
          name: cdktf.Token.asString(awsConfigConfigurationRecorderFoo.name),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsConfigConfigurationRecorderStatusFoo.overrideLogicalId("foo");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the recorder
* `isEnabled` - (Required) Whether the configuration recorder should be enabled or disabled.

## Attributes Reference

No additional attributes are exported.

## Import

Configuration Recorder Status can be imported using the name of the Configuration Recorder, e.g.,

```
$ terraform import aws_config_configuration_recorder_status.foo example
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-99015d984c66da7fd30123db6af97e25d34c3606e1eb36b4ea3f3e923d4a0107 -->