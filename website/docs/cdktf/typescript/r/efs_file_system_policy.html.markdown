---
subcategory: "EFS (Elastic File System)"
layout: "aws"
page_title: "AWS: aws_efs_file_system_policy"
description: |-
  Provides an Elastic File System (EFS) File System Policy resource.
---

# Resource: aws_efs_file_system_policy

Provides an Elastic File System (EFS) File System Policy resource.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const awsEfsFileSystemFs = new aws.efsFileSystem.EfsFileSystem(this, "fs", {
      creationToken: "my-product",
    });
    const dataAwsIamPolicyDocumentPolicy =
      new aws.dataAwsIamPolicyDocument.DataAwsIamPolicyDocument(
        this,
        "policy",
        {
          statement: [
            {
              actions: [
                "elasticfilesystem:ClientMount",
                "elasticfilesystem:ClientWrite",
              ],
              condition: [
                {
                  test: "Bool",
                  values: ["true"],
                  variable: "aws:SecureTransport",
                },
              ],
              effect: "Allow",
              principals: [
                {
                  identifiers: ["*"],
                  type: "AWS",
                },
              ],
              resources: [cdktf.Token.asString(awsEfsFileSystemFs.arn)],
              sid: "ExampleStatement01",
            },
          ],
        }
      );
    const awsEfsFileSystemPolicyPolicy =
      new aws.efsFileSystemPolicy.EfsFileSystemPolicy(this, "policy_2", {
        fileSystemId: cdktf.Token.asString(awsEfsFileSystemFs.id),
        policy: cdktf.Token.asString(dataAwsIamPolicyDocumentPolicy.json),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsEfsFileSystemPolicyPolicy.overrideLogicalId("policy");
  }
}

```

## Argument Reference

The following arguments are required:

* `fileSystemId` - (Required) The ID of the EFS file system.
* `policy` - (Required) The JSON formatted file system policy for the EFS file system. see [Docs](https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies) for more info.

The following arguments are optional:

* `bypassPolicyLockoutSafetyCheck` - (Optional) A flag to indicate whether to bypass the `awsEfsFileSystemPolicy` lockout safety check. The policy lockout safety check determines whether the policy in the request will prevent the principal making the request will be locked out from making future `putFileSystemPolicy` requests on the file system. Set `bypassPolicyLockoutSafetyCheck` to `true` only when you intend to prevent the principal that is making the request from making a subsequent `putFileSystemPolicy` request on the file system. The default value is `false`.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The ID that identifies the file system (e.g., fs-ccfc0d65).

## Import

The EFS file system policies can be imported using the `id`, e.g.,

```
$ terraform import aws_efs_file_system_policy.foo fs-6fa144c6
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-54ff1ad3ad8111bee37a73d864b18607a7a080dcf8045cba19027a4bd29ed440 -->