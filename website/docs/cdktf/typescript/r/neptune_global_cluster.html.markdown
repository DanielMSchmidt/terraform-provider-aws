---
subcategory: "Neptune"
layout: "aws"
page_title: "AWS: aws_neptune_global_cluster"
description: |-
  Provides an Neptune Global Cluster Resource
---

# Resource: aws_neptune_global_cluster

Manages a Neptune Global Cluster. A global cluster consists of one primary region and up to five read-only secondary regions. You issue write operations directly to the primary cluster in the primary region and Amazon Neptune automatically replicates the data to the secondary regions using dedicated infrastructure.

More information about Neptune Global Clusters can be found in the [Neptune User Guide](https://docs.aws.amazon.com/neptune/latest/userguide/neptune-global-database.html).

## Example Usage

### New Neptune Global Cluster

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const awsPrimary = new aws.provider.AwsProvider(this, "aws", {
      alias: "primary",
      region: "us-east-2",
    });
    const awsSecondary = new aws.provider.AwsProvider(this, "aws_1", {
      alias: "secondary",
      region: "us-east-1",
    });
    const awsNeptuneGlobalClusterExample =
      new aws.neptuneGlobalCluster.NeptuneGlobalCluster(this, "example", {
        engine: "neptune",
        engineVersion: "1.2.0.0",
        globalClusterIdentifier: "global-test",
      });
    const awsNeptuneClusterPrimary = new aws.neptuneCluster.NeptuneCluster(
      this,
      "primary",
      {
        clusterIdentifier: "test-primary-cluster",
        engine: cdktf.Token.asString(awsNeptuneGlobalClusterExample.engine),
        engineVersion: cdktf.Token.asString(
          awsNeptuneGlobalClusterExample.engineVersion
        ),
        globalClusterIdentifier: cdktf.Token.asString(
          awsNeptuneGlobalClusterExample.id
        ),
        neptuneSubnetGroupName: "default",
        provider: awsPrimary,
      }
    );
    const awsNeptuneClusterSecondary = new aws.neptuneCluster.NeptuneCluster(
      this,
      "secondary",
      {
        clusterIdentifier: "test-secondary-cluster",
        engine: cdktf.Token.asString(awsNeptuneGlobalClusterExample.engine),
        engineVersion: cdktf.Token.asString(
          awsNeptuneGlobalClusterExample.engineVersion
        ),
        globalClusterIdentifier: cdktf.Token.asString(
          awsNeptuneGlobalClusterExample.id
        ),
        neptuneSubnetGroupName: "default",
        provider: awsSecondary,
      }
    );
    const awsNeptuneClusterInstancePrimary =
      new aws.neptuneClusterInstance.NeptuneClusterInstance(this, "primary_5", {
        clusterIdentifier: cdktf.Token.asString(awsNeptuneClusterPrimary.id),
        engine: cdktf.Token.asString(awsNeptuneGlobalClusterExample.engine),
        engineVersion: cdktf.Token.asString(
          awsNeptuneGlobalClusterExample.engineVersion
        ),
        identifier: "test-primary-cluster-instance",
        instanceClass: "db.r5.large",
        neptuneSubnetGroupName: "default",
        provider: awsPrimary,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNeptuneClusterInstancePrimary.overrideLogicalId("primary");
    const awsNeptuneClusterInstanceSecondary =
      new aws.neptuneClusterInstance.NeptuneClusterInstance(
        this,
        "secondary_6",
        {
          clusterIdentifier: cdktf.Token.asString(
            awsNeptuneClusterSecondary.id
          ),
          dependsOn: [awsNeptuneClusterInstancePrimary],
          engine: cdktf.Token.asString(awsNeptuneGlobalClusterExample.engine),
          engineVersion: cdktf.Token.asString(
            awsNeptuneGlobalClusterExample.engineVersion
          ),
          identifier: "test-secondary-cluster-instance",
          instanceClass: "db.r5.large",
          neptuneSubnetGroupName: "default",
          provider: awsSecondary,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNeptuneClusterInstanceSecondary.overrideLogicalId("secondary");
  }
}

```

### New Global Cluster From Existing DB Cluster

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const awsNeptuneClusterExample = new aws.neptuneCluster.NeptuneCluster(
      this,
      "example",
      {
        lifecycle: {
          ignoreChanges: [globalClusterIdentifier],
        },
      }
    );
    const awsNeptuneGlobalClusterExample =
      new aws.neptuneGlobalCluster.NeptuneGlobalCluster(this, "example_1", {
        globalClusterIdentifier: "example",
        sourceDbClusterIdentifier: cdktf.Token.asString(
          awsNeptuneClusterExample.arn
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNeptuneGlobalClusterExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `globalClusterIdentifier` - (Required, Forces new resources) The global cluster identifier.
* `deletionProtection` - (Optional) If the Global Cluster should have deletion protection enabled. The database can't be deleted when this value is set to `true`. The default is `false`.
* `engine` - (Optional, Forces new resources) Name of the database engine to be used for this DB cluster. Terraform will only perform drift detection if a configuration value is provided. Current Valid values: `neptune`. Conflicts with `sourceDbClusterIdentifier`.
* `engineVersion` - (Optional) Engine version of the global database. Upgrading the engine version will result in all cluster members being immediately updated and will.
    * **NOTE:** Upgrading major versions is not supported.
* `sourceDbClusterIdentifier` - (Optional) Amazon Resource Name (ARN) to use as the primary DB Cluster of the Global Cluster on creation. Terraform cannot perform drift detection of this value.
* `storageEncrypted` - (Optional, Forces new resources) Specifies whether the DB cluster is encrypted. The default is `false` unless `sourceDbClusterIdentifier` is specified and encrypted. Terraform will only perform drift detection if a configuration value is provided.

### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration/blocks/resources/syntax.html#operation-timeouts) for certain actions:

* `create` - (Defaults to 5 mins) Used when creating the Global Cluster
* `update` - (Defaults to 120 mins) Used when updating the Global Cluster members (time is per member)
* `delete` - (Defaults to 5 mins) Used when deleting the Global Cluster members (time is per member)

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `arn` - Global Cluster Amazon Resource Name (ARN)
* `globalClusterMembers` - Set of objects containing Global Cluster members.
    * `dbClusterArn` - Amazon Resource Name (ARN) of member DB Cluster.
    * `isWriter` - Whether the member is the primary DB Cluster.
* `globalClusterResourceId` - AWS Region-unique, immutable identifier for the global database cluster. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB cluster is accessed.
* `id` - Neptune Global Cluster.

## Import

`awsNeptuneGlobalCluster` can be imported by using the Global Cluster identifier, e.g.

```
$ terraform import aws_neptune_global_cluster.example example
```

Certain resource arguments, like `sourceDbClusterIdentifier`, do not have an API method for reading the information after creation. If the argument is set in the Terraform configuration on an imported resource, Terraform will always show a difference. To workaround this behavior, either omit the argument from the Terraform configuration or use [`ignoreChanges`](https://www.terraform.io/docs/configuration/meta-arguments/lifecycle.html#ignore_changes) to hide the difference, e.g.

```terraform
resource "aws_neptune_global_cluster" "example" {
  # ... other configuration ...

  # There is no API for reading source_db_cluster_identifier
  lifecycle {
    ignore_changes = [source_db_cluster_identifier]
  }
}
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-eb720692d7813904749ce67ecd63a1ec060ba80260e9a23e5e393fceabbe82ed -->