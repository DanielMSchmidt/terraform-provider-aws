---
subcategory: "Glue"
layout: "aws"
page_title: "AWS: aws_glue_classifier"
description: |-
  Provides an Glue Classifier resource.
---

# Resource: aws_glue_classifier

Provides a Glue Classifier resource.

~> **NOTE:** It is only valid to create one type of classifier (csv, grok, JSON, or XML). Changing classifier types will recreate the classifier.

## Example Usage

### Csv Classifier

```terraform
resource "aws_glue_classifier" "example" {
  name = "example"

  csv_classifier {
    allow_single_column    = false
    contains_header        = "PRESENT"
    delimiter              = ","
    disable_value_trimming = false
    header                 = ["example1", "example2"]
    quote_symbol           = "'"
  }
}
```

### Grok Classifier

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.glueClassifier.GlueClassifier(this, "example", {
      grokClassifier: {
        classification: "example",
        grokPattern: "example",
      },
      name: "example",
    });
  }
}

```

### JSON Classifier

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.glueClassifier.GlueClassifier(this, "example", {
      jsonClassifier: {
        jsonPath: "example",
      },
      name: "example",
    });
  }
}

```

### XML Classifier

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.glueClassifier.GlueClassifier(this, "example", {
      name: "example",
      xmlClassifier: {
        classification: "example",
        rowTag: "example",
      },
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `csvClassifier` - (Optional) A classifier for Csv content. Defined below.
* `grokClassifier` – (Optional) A classifier that uses grok patterns. Defined below.
* `jsonClassifier` – (Optional) A classifier for JSON content. Defined below.
* `name` – (Required) The name of the classifier.
* `xmlClassifier` – (Optional) A classifier for XML content. Defined below.

### csv_classifier

* `allowSingleColumn` - (Optional) Enables the processing of files that contain only one column.
* `containsHeader` - (Optional) Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
* `customDatatypeConfigured` - (Optional) A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
* `customDatatypes` - (Optional) A list of supported custom datatypes. Valid values are `binary`, `boolean`, `date`, `decimal`, `double`, `float`, `int`, `long`, `short`, `string`, `timestamp`.
* `delimiter` - (Optional) The delimiter used in the Csv to separate columns.
* `disableValueTrimming` - (Optional) Specifies whether to trim column values.
* `header` - (Optional) A list of strings representing column names.
* `quoteSymbol` - (Optional) A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.

### grok_classifier

* `classification` - (Required) An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.
* `customPatterns` - (Optional) Custom grok patterns used by this classifier.
* `grokPattern` - (Required) The grok pattern used by this classifier.

### json_classifier

* `jsonPath` - (Required) A `jsonPath` string defining the JSON data for the classifier to classify. AWS Glue supports a subset of `jsonPath`, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).

### xml_classifier

* `classification` - (Required) An identifier of the data format that the classifier matches.
* `rowTag` - (Required) The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/>`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `<row item_a="A" item_b="B"></row>` is okay, but `<row item_a="A" item_b="B" />` is not).

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - Name of the classifier

## Import

Glue Classifiers can be imported using their name, e.g.,

```
$ terraform import aws_glue_classifier.MyClassifier MyClassifier
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-b31df4bc88de3969021b91ad0d2773467484b051f056f3349329b11befbfd626 -->