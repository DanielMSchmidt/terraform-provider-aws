---
subcategory: "API Gateway"
layout: "aws"
page_title: "AWS: aws_api_gateway_deployment"
description: |-
  Manages an API Gateway REST Deployment.
---

# Resource: aws_api_gateway_deployment

Manages an API Gateway REST Deployment. A deployment is a snapshot of the REST API configuration. The deployment can then be published to callable endpoints via the [`awsApiGatewayStage` resource](api_gateway_stage.html) and optionally managed further with the [`awsApiGatewayBasePathMapping` resource](api_gateway_base_path_mapping.html), [`awsApiGatewayDomainName` resource](api_gateway_domain_name.html), and [`awsApiMethodSettings` resource](api_gateway_method_settings.html). For more information, see the [API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-deploy-api.html).

To properly capture all REST API configuration in a deployment, this resource must have dependencies on all prior Terraform resources that manage resources/paths, methods, integrations, etc.

* For REST APIs that are configured via OpenAPI specification ([`awsApiGatewayRestApi` resource](api_gateway_rest_api.html) `body` argument), no special dependency setup is needed beyond referencing the  `id` attribute of that resource unless additional Terraform resources have further customized the REST API.
* When the REST API configuration involves other Terraform resources ([`awsApiGatewayIntegration` resource](api_gateway_integration.html), etc.), the dependency setup can be done with implicit resource references in the `triggers` argument or explicit resource references using the [resource `dependsOn` meta-argument](https://www.terraform.io/docs/configuration/meta-arguments/depends_on.html). The `triggers` argument should be preferred over `dependsOn`, since `dependsOn` can only capture dependency ordering and will not cause the resource to recreate (redeploy the REST API) with upstream configuration changes.

!> **WARNING:** We recommend using the [`awsApiGatewayStage` resource](api_gateway_stage.html) instead of managing an API Gateway Stage via the `stageName` argument of this resource. When this resource is recreated (REST API redeployment) with the `stageName` configured, the stage is deleted and recreated. This will cause a temporary service interruption, increase Terraform plan differences, and can require a second Terraform apply to recreate any downstream stage configuration such as associated `awsApiMethodSettings` resources.

~> **NOTE:** Enable the [resource `lifecycle` configuration block `createBeforeDestroy` argument](https://www.terraform.io/language/meta-arguments/lifecycle#create_before_destroy) in this resource configuration to properly order redeployments in Terraform. Without enabling `createBeforeDestroy`, API Gateway can return errors such as `BadRequestException: Active stages pointing to this deployment must be moved or deleted` on recreation.

## Example Usage

### OpenAPI Specification

An end-to-end example of a REST API configured with OpenAPI can be found in the [`/examples/apiGatewayRestApiOpenapi` directory within the GitHub repository](https://github.com/hashicorp/terraform-provider-aws/tree/main/examples/api-gateway-rest-api-openapi).

```terraform
resource "aws_api_gateway_rest_api" "example" {
  body = jsonencode({
    openapi = "3.0.1"
    info = {
      title   = "example"
      version = "1.0"
    }
    paths = {
      "/path1" = {
        get = {
          x-amazon-apigateway-integration = {
            httpMethod           = "GET"
            payloadFormatVersion = "1.0"
            type                 = "HTTP_PROXY"
            uri                  = "https://ip-ranges.amazonaws.com/ip-ranges.json"
          }
        }
      }
    }
  })

  name = "example"
}

resource "aws_api_gateway_deployment" "example" {
  rest_api_id = aws_api_gateway_rest_api.example.id

  triggers = {
    redeployment = sha1(jsonencode(aws_api_gateway_rest_api.example.body))
  }

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_api_gateway_stage" "example" {
  deployment_id = aws_api_gateway_deployment.example.id
  rest_api_id   = aws_api_gateway_rest_api.example.id
  stage_name    = "example"
}
```

### Terraform Resources

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const awsApiGatewayRestApiExample =
      new aws.apiGatewayRestApi.ApiGatewayRestApi(this, "example", {
        name: "example",
      });
    const awsApiGatewayResourceExample =
      new aws.apiGatewayResource.ApiGatewayResource(this, "example_1", {
        parentId: cdktf.Token.asString(
          awsApiGatewayRestApiExample.rootResourceId
        ),
        pathPart: "example",
        restApiId: cdktf.Token.asString(awsApiGatewayRestApiExample.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsApiGatewayResourceExample.overrideLogicalId("example");
    const awsApiGatewayMethodExample =
      new aws.apiGatewayMethod.ApiGatewayMethod(this, "example_2", {
        authorization: "NONE",
        httpMethod: "GET",
        resourceId: cdktf.Token.asString(awsApiGatewayResourceExample.id),
        restApiId: cdktf.Token.asString(awsApiGatewayRestApiExample.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsApiGatewayMethodExample.overrideLogicalId("example");
    const awsApiGatewayIntegrationExample =
      new aws.apiGatewayIntegration.ApiGatewayIntegration(this, "example_3", {
        httpMethod: cdktf.Token.asString(awsApiGatewayMethodExample.httpMethod),
        resourceId: cdktf.Token.asString(awsApiGatewayResourceExample.id),
        restApiId: cdktf.Token.asString(awsApiGatewayRestApiExample.id),
        type: "MOCK",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsApiGatewayIntegrationExample.overrideLogicalId("example");
    const awsApiGatewayDeploymentExample =
      new aws.apiGatewayDeployment.ApiGatewayDeployment(this, "example_4", {
        lifecycle: {
          createBeforeDestroy: true,
        },
        restApiId: cdktf.Token.asString(awsApiGatewayRestApiExample.id),
        triggers: {
          redeployment: cdktf.Fn.sha1(
            cdktf.Fn.jsonencode([
              awsApiGatewayResourceExample.id,
              awsApiGatewayMethodExample.id,
              awsApiGatewayIntegrationExample.id,
            ])
          ),
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsApiGatewayDeploymentExample.overrideLogicalId("example");
    const awsApiGatewayStageExample = new aws.apiGatewayStage.ApiGatewayStage(
      this,
      "example_5",
      {
        deploymentId: cdktf.Token.asString(awsApiGatewayDeploymentExample.id),
        restApiId: cdktf.Token.asString(awsApiGatewayRestApiExample.id),
        stageName: "example",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsApiGatewayStageExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `restApiId` - (Required) REST API identifier.
* `description` - (Optional) Description of the deployment
* `stageName` - (Optional) Name of the stage to create with this deployment. If the specified stage already exists, it will be updated to point to the new deployment. We recommend using the [`awsApiGatewayStage` resource](api_gateway_stage.html) instead to manage stages.
* `stageDescription` - (Optional) Description to set on the stage managed by the `stageName` argument.
* `triggers` - (Optional) Map of arbitrary keys and values that, when changed, will trigger a redeployment. To force a redeployment without changing these keys/values, use the [`replace` option](https://developer.hashicorp.com/terraform/cli/commands/plan#replace-address) with `terraform plan` or `terraform apply`.
* `variables` - (Optional) Map to set on the stage managed by the `stageName` argument.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - ID of the deployment
* `invokeUrl` - URL to invoke the API pointing to the stage,
  e.g., `https://z4675Bid1JExecuteApiEuWest2AmazonawsCom/prod`
* `executionArn` - Execution ARN to be used in [`lambdaPermission`](/docs/providers/aws/r/lambda_permission.html)'s `sourceArn`
  when allowing API Gateway to invoke a Lambda function,
  e.g., `arn:aws:executeApi:euWest2:123456789012:z4675Bid1J/prod`
* `createdDate` - Creation date of the deployment

## Import

`awsApiGatewayDeployment` can be imported using `restApiId/deploymentId`, e.g.,

```
$ terraform import aws_api_gateway_deployment.example aabbccddee/1122334
```

The `stageName`, `stageDescription`, and `variables` arguments cannot be imported. Use the [`awsApiGatewayStage` resource](api_gateway_stage.html) to import and manage stages.

The `triggers` argument cannot be imported.

<!-- cache-key: cdktf-0.17.0-pre.15 input-3905b7b270d9b9572988ef029ef81de4d01439f3b4d60aea30d5335942ab81f9 -->