---
subcategory: "Secrets Manager"
layout: "aws"
page_title: "AWS: aws_secretsmanager_secret_policy"
description: |-
  Provides a resource to manage AWS Secrets Manager secret policy
---

# Resource: aws_secretsmanager_secret_policy

Provides a resource to manage AWS Secrets Manager secret policy.

## Example Usage

### Basic

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const awsSecretsmanagerSecretExample =
      new aws.secretsmanagerSecret.SecretsmanagerSecret(this, "example", {
        name: "example",
      });
    const dataAwsIamPolicyDocumentExample =
      new aws.dataAwsIamPolicyDocument.DataAwsIamPolicyDocument(
        this,
        "example_1",
        {
          statement: [
            {
              actions: ["secretsmanager:GetSecretValue"],
              effect: "Allow",
              principals: [
                {
                  identifiers: ["arn:aws:iam::123456789012:root"],
                  type: "AWS",
                },
              ],
              resources: ["*"],
              sid: "EnableAnotherAWSAccountToReadTheSecret",
            },
          ],
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsIamPolicyDocumentExample.overrideLogicalId("example");
    const awsSecretsmanagerSecretPolicyExample =
      new aws.secretsmanagerSecretPolicy.SecretsmanagerSecretPolicy(
        this,
        "example_2",
        {
          policy: cdktf.Token.asString(dataAwsIamPolicyDocumentExample.json),
          secretArn: cdktf.Token.asString(awsSecretsmanagerSecretExample.arn),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSecretsmanagerSecretPolicyExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `policy` - (Required) Valid JSON document representing a [resource policy](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_resource-based-policies.html). For more information about building AWS IAM policy documents with Terraform, see the [AWS IAM Policy Document Guide](https://learn.hashicorp.com/terraform/aws/iam-policy). Unlike `awsSecretsmanagerSecret`, where `policy` can be set to `"{}"` to delete the policy, `"{}"` is not a valid policy since `policy` is required.
* `secretArn` - (Required) Secret ARN.

The following arguments are optional:

* `blockPublicPolicy` - (Optional) Makes an optional API call to Zelkova to validate the Resource Policy to prevent broad access to your secret.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - Amazon Resource Name (ARN) of the secret.

## Import

`awsSecretsmanagerSecretPolicy` can be imported by using the secret Amazon Resource Name (ARN), e.g.,

```
$ terraform import aws_secretsmanager_secret_policy.example arn:aws:secretsmanager:us-east-1:123456789012:secret:example-123456
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-666a22b25088d53bc20976399811cbdbb2ca2fbd86c00aae676267540f01bd28 -->