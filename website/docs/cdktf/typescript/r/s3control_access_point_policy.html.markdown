---
subcategory: "S3 Control"
layout: "aws"
page_title: "AWS: aws_s3control_access_point_policy"
description: |-
  Provides a resource to manage an S3 Access Point resource policy.
---

# Resource: aws_s3control_access_point_policy

Provides a resource to manage an S3 Access Point resource policy.

~> **NOTE on Access Points and Access Point Policies:** Terraform provides both a standalone Access Point Policy resource and an [Access Point](s3_access_point.html) resource with a resource policy defined in-line. You cannot use an Access Point with in-line resource policy in conjunction with an Access Point Policy resource. Doing so will cause a conflict of policies and will overwrite the access point's resource policy.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const awsS3BucketExample = new aws.s3Bucket.S3Bucket(this, "example", {
      bucket: "example",
    });
    const awsS3AccessPointExample = new aws.s3AccessPoint.S3AccessPoint(
      this,
      "example_1",
      {
        bucket: cdktf.Token.asString(awsS3BucketExample.id),
        lifecycle: {
          ignoreChanges: [policy],
        },
        name: "example",
        publicAccessBlockConfiguration: {
          blockPublicAcls: true,
          blockPublicPolicy: false,
          ignorePublicAcls: true,
          restrictPublicBuckets: false,
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3AccessPointExample.overrideLogicalId("example");
    const awsS3ControlAccessPointPolicyExample =
      new aws.s3ControlAccessPointPolicy.S3ControlAccessPointPolicy(
        this,
        "example_2",
        {
          accessPointArn: cdktf.Token.asString(awsS3AccessPointExample.arn),
          policy: cdktf.Fn.jsonencode({
            Statement: [
              {
                Action: "s3:GetObjectTagging",
                Effect: "Allow",
                Principal: {
                  AWS: "*",
                },
                Resource: "${" + awsS3AccessPointExample.arn + "}/object/*",
              },
            ],
            Version: "2008-10-17",
          }),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3ControlAccessPointPolicyExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `accessPointArn` - (Required) The ARN of the access point that you want to associate with the specified policy.
* `policy` - (Required) The policy that you want to apply to the specified access point.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `hasPublicAccessPolicy` - Indicates whether this access point currently has a policy that allows public access.
* `id` - The AWS account ID and access point name separated by a colon (`:`).

## Import

Access Point policies can be imported using the `accessPointArn`, e.g.

```
$ terraform import aws_s3control_access_point_policy.example arn:aws:s3:us-west-2:123456789012:accesspoint/example
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-adfce35465e556b66d63ec444239fc6717245c157ec0d5577eb4d4292facff51 -->