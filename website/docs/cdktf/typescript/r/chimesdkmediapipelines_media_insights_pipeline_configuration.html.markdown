---
subcategory: "Chime SDK Media Pipelines"
layout: "aws"
page_title: "AWS: aws_chimesdkmediapipelines_media_insights_pipeline_configuration"
description: |-
  Terraform resource for managing an AWS Chime SDK Media Pipelines Media Insights Pipeline Configuration.
---

# Resource: aws_chimesdkmediapipelines_media_insights_pipeline_configuration

Terraform resource for managing an AWS Chime SDK Media Pipelines Media Insights Pipeline Configuration.
Consult the [Call analytics developer guide](https://docs.aws.amazon.com/chime-sdk/latest/dg/call-analytics.html) for more detailed information about usage.

## Example Usage

### Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const awsKinesisStreamExample = new aws.kinesisStream.KinesisStream(
      this,
      "example",
      {
        name: "example",
        shardCount: 2,
      }
    );
    const dataAwsIamPolicyDocumentMediaPipelinesAssumeRole =
      new aws.dataAwsIamPolicyDocument.DataAwsIamPolicyDocument(
        this,
        "media_pipelines_assume_role",
        {
          statement: [
            {
              actions: ["sts:AssumeRole"],
              effect: "Allow",
              principals: [
                {
                  identifiers: ["mediapipelines.chime.amazonaws.com"],
                  type: "Service",
                },
              ],
            },
          ],
        }
      );
    const awsIamRoleCallAnalyticsRole = new aws.iamRole.IamRole(
      this,
      "call_analytics_role",
      {
        assumeRolePolicy: cdktf.Token.asString(
          dataAwsIamPolicyDocumentMediaPipelinesAssumeRole.json
        ),
        name: "CallAnalyticsRole",
      }
    );
    new aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfiguration(
      this,
      "my_configuration",
      {
        elements: [
          {
            amazonTranscribeCallAnalyticsProcessorConfiguration: {
              languageCode: "en-US",
            },
            type: "AmazonTranscribeCallAnalyticsProcessor",
          },
          {
            kinesisDataStreamSinkConfiguration: {
              insightsTarget: cdktf.Token.asString(awsKinesisStreamExample.arn),
            },
            type: "KinesisDataStreamSink",
          },
        ],
        name: "MyBasicConfiguration",
        resourceAccessRoleArn: cdktf.Token.asString(
          awsIamRoleCallAnalyticsRole.arn
        ),
        tags: {
          Key1: "Value1",
          Key2: "Value2",
        },
      }
    );
  }
}

```

- The required policies on `callAnalyticsRole` will vary based on the selected processors. See [Call analytics resource access role](https://docs.aws.amazon.com/chime-sdk/latest/dg/ca-resource-access-role.html) for directions on choosing appropriate policies.

### Transcribe Call Analytics processor usage

```terraform
resource "aws_chimesdkmediapipelines_media_insights_pipeline_configuration" "my_configuration" {
  name                     = "MyCallAnalyticsConfiguration"
  resource_access_role_arn = aws_iam_role.example.arn
  elements {
    type = "AmazonTranscribeCallAnalyticsProcessor"
    amazon_transcribe_call_analytics_processor_configuration {
      call_analytics_stream_categories = [
        "category_1",
        "category_2"
      ]
      content_redaction_type               = "PII"
      enable_partial_results_stabilization = true
      filter_partial_results               = true
      language_code                        = "en-US"
      language_model_name                  = "MyLanguageModel"
      partial_results_stability            = "high"
      pii_entity_types                     = "ADDRESS,BANK_ACCOUNT_NUMBER"
      post_call_analytics_settings {
        content_redaction_output     = "redacted"
        data_access_role_arn         = aws_iam_role.post_call_role.arn
        output_encryption_kms_key_id = "MyKmsKeyId"
        output_location              = "s3://MyBucket"
      }
      vocabulary_filter_method = "mask"
      vocabulary_filter_name   = "MyVocabularyFilter"
      vocabulary_name          = "MyVocabulary"
    }
  }

  elements {
    type = "KinesisDataStreamSink"
    kinesis_data_stream_sink_configuration {
      insights_target = aws_kinesis_stream.example.arn
    }
  }
}

data "aws_iam_policy_document" "transcribe_assume_role" {
  statement {
    effect = "Allow"

    principals {
      type        = "Service"
      identifiers = ["transcribe.amazonaws.com"]
    }

    actions = ["sts:AssumeRole"]
  }
}

resource "aws_iam_role" "post_call_role" {
  name               = "PostCallAccessRole"
  assume_role_policy = data.aws_iam_policy_document.transcribe_assume_role.json
}
```

### Real time alerts usage

```terraform
resource "aws_chimesdkmediapipelines_media_insights_pipeline_configuration" "my_configuration" {
  name                     = "MyRealTimeAlertConfiguration"
  resource_access_role_arn = aws_iam_role.call_analytics_role.arn
  elements {
    type = "AmazonTranscribeCallAnalyticsProcessor"
    amazon_transcribe_call_analytics_processor_configuration {
      language_code = "en-US"
    }
  }

  elements {
    type = "KinesisDataStreamSink"
    kinesis_data_stream_sink_configuration {
      insights_target = aws_kinesis_stream.example.arn
    }
  }

  real_time_alert_configuration {
    disabled = false

    rules {
      type = "IssueDetection"
      issue_detection_configuration {
        rule_name = "MyIssueDetectionRule"
      }
    }

    rules {
      type = "KeywordMatch"
      keyword_match_configuration {
        keywords  = ["keyword1", "keyword2"]
        negate    = false
        rule_name = "MyKeywordMatchRule"
      }
    }

    rules {
      type = "Sentiment"
      sentiment_configuration {
        rule_name      = "MySentimentRule"
        sentiment_type = "NEGATIVE"
        time_period    = 60
      }
    }
  }
}
```

### Transcribe processor usage

```terraform
resource "aws_chimesdkmediapipelines_media_insights_pipeline_configuration" "my_configuration" {
  name                     = "MyTranscribeConfiguration"
  resource_access_role_arn = aws_iam_role.example.arn
  elements {
    type = "AmazonTranscribeProcessor"
    amazon_transcribe_processor_configuration {
      content_identification_type          = "PII"
      enable_partial_results_stabilization = true
      filter_partial_results               = true
      language_code                        = "en-US"
      language_model_name                  = "MyLanguageModel"
      partial_results_stability            = "high"
      pii_entity_types                     = "ADDRESS,BANK_ACCOUNT_NUMBER"
      show_speaker_label                   = true
      vocabulary_filter_method             = "mask"
      vocabulary_filter_name               = "MyVocabularyFilter"
      vocabulary_name                      = "MyVocabulary"
    }
  }

  elements {
    type = "KinesisDataStreamSink"
    kinesis_data_stream_sink_configuration {
      insights_target = aws_kinesis_stream.example.arn
    }
  }
}
```

### Voice analytics processor usage

```terraform
resource "aws_chimesdkmediapipelines_media_insights_pipeline_configuration" "my_configuration" {
  name                     = "MyVoiceAnalyticsConfiguration"
  resource_access_role_arn = aws_iam_role.example.arn
  elements {
    type = "VoiceAnalyticsProcessor"
    voice_analytics_processor_configuration {
      speaker_search_status      = "Enabled"
      voice_tone_analysis_status = "Enabled"
    }
  }

  elements {
    type = "LambdaFunctionSink"
    lambda_function_sink_configuration {
      insights_target = "arn:aws:lambda:us-west-2:1111111111:function:MyFunction"
    }
  }

  elements {
    type = "SnsTopicSink"
    sns_topic_sink_configuration {
      insights_target = "arn:aws:sns:us-west-2:1111111111:topic/MyTopic"
    }
  }

  elements {
    type = "SqsQueueSink"
    sqs_queue_sink_configuration {
      insights_target = "arn:aws:sqs:us-west-2:1111111111:queue/MyQueue"
    }
  }

  elements {
    type = "KinesisDataStreamSink"
    kinesis_data_stream_sink_configuration {
      insights_target = aws_kinesis_stream.test.arn
    }
  }
}
```

### S3 Recording sink usage

```terraform
resource "aws_chimesdkmediapipelines_media_insights_pipeline_configuration" "my_configuration" {
  name                     = "MyS3RecordingConfiguration"
  resource_access_role_arn = aws_iam_role.example.arn
  elements {
    type = "S3RecordingSink"
    s3_recording_sink_configuration {
      destination = "arn:aws:s3:::MyBucket"
    }
  }
}
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Configuration name.
* `resourceAccessRoleArn` - (Required) ARN of IAM Role used by service to invoke processors and sinks specified by configuration elements.
* `elements` - (Required) Collection of processors and sinks to transform media and deliver data.
* `realTimeAlertConfiguration` - (Optional) Configuration for real-time alert rules to send EventBridge notifications when certain conditions are met.
* `tags` - (Optional) Key-value map of tags for the resource.

### Elements

* `type` - (Required) Element type.
* `amazonTranscribeCallAnalyticsProcessorConfiguration` - (Optional) Configuration for Amazon Transcribe Call Analytics processor.
    * `callAnalyticsStreamCategories` - (Optional) Filter for category events to be delivered to insights target.
    * `contentIdentificationType` - (Optional) Labels all personally identifiable information (PII) identified in Utterance events.
    * `contentRedactionType` - (Optional) Redacts all personally identifiable information (PII) identified in Utterance events.
    * `enablePartialResultsStabilization` - (Optional) Enables partial result stabilization in Utterance events.
    * `filterPartialResults` - (Optional) Filters partial Utterance events from delivery to the insights target.
    * `languageCode` - (Required) Language code for the transcription model.
    * `languageModelName` - (Optional) Name of custom language model for transcription.
    * `partialResultsStability` - (Optional) Level of stability to use when partial results stabilization is enabled.
    * `piiEntityTypes` - (Optional) Types of personally identifiable information (PII) to redact from an Utterance event.
    * `postCallAnalyticsSettings` - (Optional) Settings for post call analytics.
        * `contentRedactionOutput` - (Optional) Should output be redacted.
        * `dataAccessRoleArn` - (Required) ARN of the role used by AWS Transcribe to upload your post call analysis.
        * `outputEncryptionKmsKeyId` - (Optional) ID of the KMS key used to encrypt the output.
        * `outputLocation` - (Required) The Amazon S3 location where you want your Call Analytics post-call transcription output stored.
    * `vocabularyFilterMethod` - (Optional) Method for applying a vocabulary filter to Utterance events.
    * `vocabularyFilterName` - (Optional) Name of the custom vocabulary filter to use when processing Utterance events.
    * `vocabularyName` - (Optional) Name of the custom vocabulary to use when processing Utterance events.
* `amazonTranscribeProcessorConfiguration` - (Optional) Configuration for Amazon Transcribe processor.
    * `contentIdentificationType` - (Optional) Labels all personally identifiable information (PII) identified in Transcript events.
    * `contentRedactionType` - (Optional) Redacts all personally identifiable information (PII) identified in Transcript events.
    * `enablePartialResultsStabilization` - (Optional) Enables partial result stabilization in Transcript events.
    * `filterPartialResults` - (Optional) Filters partial Utterance events from delivery to the insights target.
    * `languageCode` - (Required) Language code for the transcription model.
    * `languageModelName` - (Optional) Name of custom language model for transcription.
    * `partialResultsStability` - (Optional) Level of stability to use when partial results stabilization is enabled.
    * `piiEntityTypes` - (Optional) Types of personally identifiable information (PII) to redact from a Transcript event.
    * `showSpeakerLabel` - (Optional) Enables speaker partitioning (diarization) in your Transcript events.
    * `vocabularyFilterMethod` - (Optional) Method for applying a vocabulary filter to Transcript events.
    * `vocabularyFilterName` - (Optional) Name of the custom vocabulary filter to use when processing Transcript events.
    * `vocabularyName` - (Optional) Name of the custom vocabulary to use when processing Transcript events.
* `kinesisDataStreamSinkConfiguration` - (Optional) Configuration for Kinesis Data Stream sink.
    * `insightsTarget` - (Required) Kinesis Data Stream to deliver results.
* `lambdaFunctionSinkConfiguration` - (Optional) Configuration for Lambda Function sink.
    * `insightsTarget` - (Required) Lambda Function to deliver results.
* `snsTopicSinkConfiguration` - (Optional) Configuration for SNS Topic sink.
    * `insightsTarget` - (Required) SNS topic to deliver results.
* `sqsQueueSinkConfiguration` - (Optional) Configuration for SQS Queue sink.
    * `insightsTarget` - (Required) SQS queue to deliver results.
* `s3RecordingSinkConfiguration` - (Optional) Configuration for S3 recording sink.
    * `destination` - (Required) S3 URI to deliver recordings.
* `voiceAnalyticsProcessorConfiguration` - (Optional) Configuration for Voice analytics processor.
    * `speakerSearchStatus` - (Required) Enable speaker search.
    * `voiceToneAnalysisStatus` - (Required) Enable voice tone analysis.

### Real time alert configuration

* `rules` - (Required) Collection of real time alert rules
    * `type` - (Required) Rule type.
    * `issueDetectionConfiguration` - (Optional) Configuration for an issue detection rule.
        * `ruleName` - (Required) Rule name.
    * `keywordMatchConfiguration` - (Optional) Configuration for a keyword match rule.
        * `ruleName` - (Required) Rule name.
        * `keywords` - (Required) Collection of keywords to match.
        * `negate` - (Optional) Negate the rule.
    * `sentimentConfiguration` - (Optional) Configuration for a sentiment rule.
        * `ruleName` - (Required) Rule name.
        * `sentimentType` - (Required) Sentiment type to match.
        * `timePeriod` - (Optional) Analysis interval.
* `disabled` - (Optional) Disables real time alert rules.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `arn` - ARN of the Media Insights Pipeline Configuration.
* `id` - Unique ID of the Media Insights Pipeline Configuration.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `3M`)
* `update` - (Default `3M`)
* `delete` - (Default `30S`)

## Import

Chime SDK Media Pipelines Media Insights Pipeline Configuration can be imported using the `id`, e.g.,

```
$ terraform import aws_chimesdkmediapipelines_media_insights_pipeline_configuration.example abcdef123456
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-84e69d57e1f425f659017ab4502471335b72f9da490a115a8d9996fa9226cc43 -->