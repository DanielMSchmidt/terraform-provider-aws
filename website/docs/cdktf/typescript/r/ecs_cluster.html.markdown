---
subcategory: "ECS (Elastic Container)"
layout: "aws"
page_title: "AWS: aws_ecs_cluster"
description: |-
  Provides an ECS cluster.
---

# Resource: aws_ecs_cluster

Provides an ECS cluster.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.ecsCluster.EcsCluster(this, "foo", {
      name: "white-hart",
      setting: [
        {
          name: "containerInsights",
          value: "enabled",
        },
      ],
    });
  }
}

```

### Example with Log Configuration

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const awsCloudwatchLogGroupExample =
      new aws.cloudwatchLogGroup.CloudwatchLogGroup(this, "example", {
        name: "example",
      });
    const awsKmsKeyExample = new aws.kmsKey.KmsKey(this, "example_1", {
      deletionWindowInDays: 7,
      description: "example",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsKmsKeyExample.overrideLogicalId("example");
    new aws.ecsCluster.EcsCluster(this, "test", {
      configuration: {
        executeCommandConfiguration: {
          kmsKeyId: cdktf.Token.asString(awsKmsKeyExample.arn),
          logConfiguration: {
            cloudWatchEncryptionEnabled: true,
            cloudWatchLogGroupName: cdktf.Token.asString(
              awsCloudwatchLogGroupExample.name
            ),
          },
          logging: "OVERRIDE",
        },
      },
      name: "example",
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `configuration` - (Optional) The execute command configuration for the cluster. Detailed below.
* `name` - (Required) Name of the cluster (up to 255 letters, numbers, hyphens, and underscores)
* `serviceConnectDefaults` - (Optional) Configures a default Service Connect namespace. Detailed below.
* `setting` - (Optional) Configuration block(s) with cluster settings. For example, this can be used to enable CloudWatch Container Insights for a cluster. Detailed below.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### `configuration`

* `executeCommandConfiguration` - (Optional) The details of the execute command configuration. Detailed below.

#### `executeCommandConfiguration`

* `kmsKeyId` - (Optional) The AWS Key Management Service key ID to encrypt the data between the local client and the container.
* `logConfiguration` - (Optional) The log configuration for the results of the execute command actions Required when `logging` is `override`. Detailed below.
* `logging` - (Optional) The log setting to use for redirecting logs for your execute command results. Valid values are `none`, `default`, and `override`.

##### `logConfiguration`

* `cloudWatchEncryptionEnabled` - (Optional) Whether or not to enable encryption on the CloudWatch logs. If not specified, encryption will be disabled.
* `cloudWatchLogGroupName` - (Optional) The name of the CloudWatch log group to send logs to.
* `s3BucketName` - (Optional) The name of the S3 bucket to send logs to.
* `s3BucketEncryptionEnabled` - (Optional) Whether or not to enable encryption on the logs sent to S3. If not specified, encryption will be disabled.
* `s3KeyPrefix` - (Optional) An optional folder in the S3 bucket to place logs in.

### `setting`

* `name` - (Required) Name of the setting to manage. Valid values: `containerInsights`.
* `value` -  (Required) The value to assign to the setting. Valid values are `enabled` and `disabled`.

### `serviceConnectDefaults`

* `namespace` - (Required) The ARN of the [`awsServiceDiscoveryHttpNamespace`](/docs/providers/aws/r/service_discovery_http_namespace.html) that's used when you create a service and don't specify a Service Connect configuration.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `arn` - ARN that identifies the cluster.
* `id` - ARN that identifies the cluster.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

ECS clusters can be imported using the `name`, e.g.,

```
$ terraform import aws_ecs_cluster.stateless stateless-app
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-4e4d6c89558fe9a3a1337c2f237257fea7e6a7453b08c900c1fd956b12ec0d9e -->