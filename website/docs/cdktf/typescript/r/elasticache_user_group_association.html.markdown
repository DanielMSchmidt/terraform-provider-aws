---
subcategory: "ElastiCache"
layout: "aws"
page_title: "AWS: aws_elasticache_user_group_association"
description: |-
  Associate an ElastiCache user and user group.
---

# Resource: aws_elasticache_user_group_association

Associate an existing ElastiCache user and an existing user group.

~> **NOTE:** Terraform will detect changes in the `awsElasticacheUserGroup` since `awsElasticacheUserGroupAssociation` changes the user IDs associated with the user group. You can ignore these changes with the `lifecycle` `ignoreChanges` meta argument as shown in the example.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const awsElasticacheUserDefault = new aws.elasticacheUser.ElasticacheUser(
      this,
      "default",
      {
        accessString:
          "on ~app::* -@all +@read +@hash +@bitmap +@geo -setbit -bitfield -hset -hsetnx -hmset -hincrby -hincrbyfloat -hdel -bitop -geoadd -georadius -georadiusbymember",
        engine: "REDIS",
        passwords: ["password123456789"],
        userId: "defaultUserID",
        userName: "default",
      }
    );
    const awsElasticacheUserExample = new aws.elasticacheUser.ElasticacheUser(
      this,
      "example",
      {
        accessString:
          "on ~app::* -@all +@read +@hash +@bitmap +@geo -setbit -bitfield -hset -hsetnx -hmset -hincrby -hincrbyfloat -hdel -bitop -geoadd -georadius -georadiusbymember",
        engine: "REDIS",
        passwords: ["password123456789"],
        userId: "exampleUserID",
        userName: "exampleuser",
      }
    );
    const awsElasticacheUserGroupExample =
      new aws.elasticacheUserGroup.ElasticacheUserGroup(this, "example_2", {
        engine: "REDIS",
        lifecycle: {
          ignoreChanges: [userIds],
        },
        userGroupId: "userGroupId",
        userIds: [cdktf.Token.asString(awsElasticacheUserDefault.userId)],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsElasticacheUserGroupExample.overrideLogicalId("example");
    const awsElasticacheUserGroupAssociationExample =
      new aws.elasticacheUserGroupAssociation.ElasticacheUserGroupAssociation(
        this,
        "example_3",
        {
          userGroupId: cdktf.Token.asString(
            awsElasticacheUserGroupExample.userGroupId
          ),
          userId: cdktf.Token.asString(awsElasticacheUserExample.userId),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsElasticacheUserGroupAssociationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `userGroupId` - (Required) ID of the user group.
* `userId` - (Required) ID of the user to associated with the user group.

## Attributes Reference

No additional attributes are exported.

## Import

ElastiCache user group associations can be imported using the `userGroupId` and `userId`, e.g.,

```
$ terraform import aws_elasticache_user_group_association.example userGoupId1,userId
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-a98e10658c021cf3d8cdf67c4aa90221c8ea280afee67a03f3f22612f05168d6 -->