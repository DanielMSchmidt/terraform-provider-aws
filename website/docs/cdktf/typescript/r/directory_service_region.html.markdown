---
subcategory: "Directory Service"
layout: "aws"
page_title: "AWS: aws_directory_service_region"
description: |-
    Manages a replicated Region and directory for Multi-Region replication.
---

# Resource: aws_directory_service_region

Manages a replicated Region and directory for Multi-Region replication.
Multi-Region replication is only supported for the Enterprise Edition of AWS Managed Microsoft AD.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new aws.provider.AwsProvider(this, "aws", {
      region: "us-west-2",
    });
    const awsSecondary = new aws.provider.AwsProvider(this, "aws_1", {
      alias: "secondary",
      region: "us-east-2",
    });
    const awsVpcExample = new aws.vpc.Vpc(this, "example", {
      cidrBlock: "10.0.0.0/16",
      tags: {
        Name: "Primary",
      },
    });
    const awsVpcExampleSecondary = new aws.vpc.Vpc(this, "example-secondary", {
      cidrBlock: "10.1.0.0/16",
      provider: awsSecondary,
      tags: {
        Name: "Secondary",
      },
    });
    const dataAwsAvailabilityZonesAvailable =
      new aws.dataAwsAvailabilityZones.DataAwsAvailabilityZones(
        this,
        "available",
        {
          filter: [
            {
              name: "opt-in-status",
              values: ["opt-in-not-required"],
            },
          ],
          state: "available",
        }
      );
    const dataAwsAvailabilityZonesAvailableSecondary =
      new aws.dataAwsAvailabilityZones.DataAwsAvailabilityZones(
        this,
        "available-secondary",
        {
          filter: [
            {
              name: "opt-in-status",
              values: ["opt-in-not-required"],
            },
          ],
          provider: awsSecondary,
          state: "available",
        }
      );
    const dataAwsRegionExample = new aws.dataAwsRegion.DataAwsRegion(
      this,
      "example_6",
      {
        provider: awsSecondary,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsRegionExample.overrideLogicalId("example");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const awsSubnetExampleCount = cdktf.TerraformCount.of(
      cdktf.Token.asNumber("2")
    );
    const awsSubnetExample = new aws.subnet.Subnet(this, "example_7", {
      availabilityZone: cdktf.Token.asString(
        cdktf.propertyAccess(dataAwsAvailabilityZonesAvailable.names, [
          awsSubnetExampleCount.index,
        ])
      ),
      cidrBlock: cdktf.Fn.cidrsubnet(
        cdktf.Token.asString(awsVpcExample.cidrBlock),
        8,
        cdktf.Token.asNumber(awsSubnetExampleCount.index)
      ),
      tags: {
        Name: "Primary",
      },
      vpcId: cdktf.Token.asString(awsVpcExample.id),
      count: awsSubnetExampleCount,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSubnetExample.overrideLogicalId("example");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const awsSubnetExampleSecondaryCount = cdktf.TerraformCount.of(
      cdktf.Token.asNumber("2")
    );
    const awsSubnetExampleSecondary = new aws.subnet.Subnet(
      this,
      "example-secondary_8",
      {
        availabilityZone: cdktf.Token.asString(
          cdktf.propertyAccess(
            dataAwsAvailabilityZonesAvailableSecondary.names,
            [awsSubnetExampleSecondaryCount.index]
          )
        ),
        cidrBlock: cdktf.Fn.cidrsubnet(
          cdktf.Token.asString(awsVpcExampleSecondary.cidrBlock),
          8,
          cdktf.Token.asNumber(awsSubnetExampleSecondaryCount.index)
        ),
        provider: awsSecondary,
        tags: {
          Name: "Secondary",
        },
        vpcId: cdktf.Token.asString(awsVpcExampleSecondary.id),
        count: awsSubnetExampleSecondaryCount,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSubnetExampleSecondary.overrideLogicalId("example-secondary");
    const awsDirectoryServiceDirectoryExample =
      new aws.directoryServiceDirectory.DirectoryServiceDirectory(
        this,
        "example_9",
        {
          name: "example.com",
          password: "SuperSecretPassw0rd",
          type: "MicrosoftAD",
          vpcSettings: {
            subnetIds: cdktf.Token.asList(
              cdktf.propertyAccess(awsSubnetExample, ["*", "id"])
            ),
            vpcId: cdktf.Token.asString(awsVpcExample.id),
          },
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDirectoryServiceDirectoryExample.overrideLogicalId("example");
    const awsDirectoryServiceRegionExample =
      new aws.directoryServiceRegion.DirectoryServiceRegion(
        this,
        "example_10",
        {
          directoryId: cdktf.Token.asString(
            awsDirectoryServiceDirectoryExample.id
          ),
          regionName: cdktf.Token.asString(dataAwsRegionExample.name),
          tags: {
            Name: "Secondary",
          },
          vpcSettings: {
            subnetIds: cdktf.Token.asList(
              cdktf.propertyAccess(awsSubnetExampleSecondary, ["*", "id"])
            ),
            vpcId: cdktf.Token.asString(awsVpcExampleSecondary.id),
          },
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDirectoryServiceRegionExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `desiredNumberOfDomainControllers` - (Optional) The number of domain controllers desired in the replicated directory. Minimum value of `2`.
* `directoryId` - (Required) The identifier of the directory to which you want to add Region replication.
* `regionName` - (Required) The name of the Region where you want to add domain controllers for replication.
* `tags` - (Optional) Map of tags to assign to this resource. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `vpcSettings` - (Required) VPC information in the replicated Region. Detailed below.

### `vpcSettings`

* `subnetIds` - (Required) The identifiers of the subnets for the directory servers.
* `vpcId` - (Optional) The identifier of the VPC in which to create the directory.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).

## Timeouts

`awsDirectoryServiceRegion` provides the following [Timeouts](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts) configuration options:

- `create` - (Default `180 minutes`) Used for Region addition
- `update` - (Default `90 minutes`) Used for replicated directory update
- `delete` - (Default `90 minutes`) Used for Region removal

## Import

Replicated Regions can be imported using directory ID,Region name e.g.,

```
$ terraform import aws_directory_service_region.example d-9267651497,us-east-2
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-e3c71535ca229682fdf923c32c2b7a503058eab5738d8b0006adc9f1439888ca -->