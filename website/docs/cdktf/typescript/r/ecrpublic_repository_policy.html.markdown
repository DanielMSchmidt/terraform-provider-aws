---
subcategory: "ECR Public"
layout: "aws"
page_title: "AWS: aws_ecrpublic_repository_policy"
description: |-
  Provides an Elastic Container Registry Public Repository Policy.
---

# Resource: aws_ecrpublic_repository_policy

Provides an Elastic Container Registry Public Repository Policy.

Note that currently only one policy may be applied to a repository.

~> **NOTE:** This resource can only be used in the `usEast1` region.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const awsEcrpublicRepositoryExample =
      new aws.ecrpublicRepository.EcrpublicRepository(this, "example", {
        repositoryName: "example",
      });
    const dataAwsIamPolicyDocumentExample =
      new aws.dataAwsIamPolicyDocument.DataAwsIamPolicyDocument(
        this,
        "example_1",
        {
          statement: [
            {
              actions: [
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:BatchCheckLayerAvailability",
                "ecr:PutImage",
                "ecr:InitiateLayerUpload",
                "ecr:UploadLayerPart",
                "ecr:CompleteLayerUpload",
                "ecr:DescribeRepositories",
                "ecr:GetRepositoryPolicy",
                "ecr:ListImages",
                "ecr:DeleteRepository",
                "ecr:BatchDeleteImage",
                "ecr:SetRepositoryPolicy",
                "ecr:DeleteRepositoryPolicy",
              ],
              effect: "Allow",
              principals: [
                {
                  identifiers: ["123456789012"],
                  type: "AWS",
                },
              ],
              sid: "new policy",
            },
          ],
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsIamPolicyDocumentExample.overrideLogicalId("example");
    const awsEcrpublicRepositoryPolicyExample =
      new aws.ecrpublicRepositoryPolicy.EcrpublicRepositoryPolicy(
        this,
        "example_2",
        {
          policy: cdktf.Token.asString(dataAwsIamPolicyDocumentExample.json),
          repositoryName: cdktf.Token.asString(
            awsEcrpublicRepositoryExample.repositoryName
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsEcrpublicRepositoryPolicyExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `repositoryName` - (Required) Name of the repository to apply the policy.
* `policy` - (Required) The policy document. This is a JSON formatted string. For more information about building IAM policy documents with Terraform, see the [AWS IAM Policy Document Guide](https://learn.hashicorp.com/terraform/aws/iam-policy)

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `registryId` - The registry ID where the repository was created.

## Import

ECR Public Repository Policy can be imported using the repository name, e.g.

```
$ terraform import aws_ecrpublic_repository_policy.example example
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-f6c9df21d7db5792d7dcc0ce1c732e527d4c77ee76dc4845a36a92fa7c3568d2 -->