---
subcategory: "ACM PCA (Certificate Manager Private Certificate Authority)"
layout: "aws"
page_title: "AWS: aws_acmpca_certificate_authority_certificate"
description: |-
  Associates a certificate with an AWS Certificate Manager Private Certificate Authority
---

# Resource: aws_acmpca_certificate_authority_certificate

Associates a certificate with an AWS Certificate Manager Private Certificate Authority (ACM PCA Certificate Authority). An ACM PCA Certificate Authority is unable to issue certificates until it has a certificate associated with it. A root level ACM PCA Certificate Authority is able to self-sign its own root certificate.

## Example Usage

### Self-Signed Root Certificate Authority Certificate

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const awsAcmpcaCertificateAuthorityExample =
      new aws.acmpcaCertificateAuthority.AcmpcaCertificateAuthority(
        this,
        "example",
        {
          certificateAuthorityConfiguration: {
            keyAlgorithm: "RSA_4096",
            signingAlgorithm: "SHA512WITHRSA",
            subject: {
              commonName: "example.com",
            },
          },
          type: "ROOT",
        }
      );
    const dataAwsPartitionCurrent = new aws.dataAwsPartition.DataAwsPartition(
      this,
      "current",
      {}
    );
    const awsAcmpcaCertificateExample =
      new aws.acmpcaCertificate.AcmpcaCertificate(this, "example_2", {
        certificateAuthorityArn: cdktf.Token.asString(
          awsAcmpcaCertificateAuthorityExample.arn
        ),
        certificateSigningRequest: cdktf.Token.asString(
          awsAcmpcaCertificateAuthorityExample.certificateSigningRequest
        ),
        signingAlgorithm: "SHA512WITHRSA",
        templateArn:
          "arn:${" +
          dataAwsPartitionCurrent.partition +
          "}:acm-pca:::template/RootCACertificate/V1",
        validity: {
          type: "YEARS",
          value: cdktf.Token.asString(1),
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAcmpcaCertificateExample.overrideLogicalId("example");
    const awsAcmpcaCertificateAuthorityCertificateExample =
      new aws.acmpcaCertificateAuthorityCertificate.AcmpcaCertificateAuthorityCertificate(
        this,
        "example_3",
        {
          certificate: cdktf.Token.asString(
            awsAcmpcaCertificateExample.certificate
          ),
          certificateAuthorityArn: cdktf.Token.asString(
            awsAcmpcaCertificateAuthorityExample.arn
          ),
          certificateChain: cdktf.Token.asString(
            awsAcmpcaCertificateExample.certificateChain
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAcmpcaCertificateAuthorityCertificateExample.overrideLogicalId(
      "example"
    );
  }
}

```

### Certificate for Subordinate Certificate Authority

Note that the certificate for the subordinate certificate authority must be issued by the root certificate authority using a signing request from the subordinate certificate authority.

```terraform
resource "aws_acmpca_certificate_authority_certificate" "subordinate" {
  certificate_authority_arn = aws_acmpca_certificate_authority.subordinate.arn

  certificate       = aws_acmpca_certificate.subordinate.certificate
  certificate_chain = aws_acmpca_certificate.subordinate.certificate_chain
}

resource "aws_acmpca_certificate" "subordinate" {
  certificate_authority_arn   = aws_acmpca_certificate_authority.root.arn
  certificate_signing_request = aws_acmpca_certificate_authority.subordinate.certificate_signing_request
  signing_algorithm           = "SHA512WITHRSA"

  template_arn = "arn:${data.aws_partition.current.partition}:acm-pca:::template/SubordinateCACertificate_PathLen0/V1"

  validity {
    type  = "YEARS"
    value = 1
  }
}

resource "aws_acmpca_certificate_authority" "subordinate" {
  type = "SUBORDINATE"

  certificate_authority_configuration {
    key_algorithm     = "RSA_2048"
    signing_algorithm = "SHA512WITHRSA"

    subject {
      common_name = "sub.example.com"
    }
  }
}

resource "aws_acmpca_certificate_authority" "root" {
  # ...
}

resource "aws_acmpca_certificate_authority_certificate" "root" {
  # ...
}

resource "aws_acmpca_certificate" "root" {
  # ...
}

data "aws_partition" "current" {}
```

## Argument Reference

The following arguments are supported:

* `certificate` - (Required) PEM-encoded certificate for the Certificate Authority.
* `certificateAuthorityArn` - (Required) ARN of the Certificate Authority.
* `certificateChain` - (Optional) PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA. Required for subordinate Certificate Authorities. Not allowed for root Certificate Authorities.

## Attributes Reference

No additional attributes are exported.

<!-- cache-key: cdktf-0.17.0-pre.15 input-792ce47e5b79def0a08daa87a5cf424dcd2e6d5692877c2f4ae085aa34101f8a -->