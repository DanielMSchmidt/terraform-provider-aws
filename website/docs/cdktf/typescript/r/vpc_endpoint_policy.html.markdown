---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_vpc_endpoint_policy"
description: |-
  Provides a VPC Endpoint Policy resource.
---

# Resource: aws_vpc_endpoint_policy

Provides a VPC Endpoint Policy resource.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const awsVpcExample = new aws.vpc.Vpc(this, "example", {
      cidrBlock: "10.0.0.0/16",
    });
    const dataAwsVpcEndpointServiceExample =
      new aws.dataAwsVpcEndpointService.DataAwsVpcEndpointService(
        this,
        "example_1",
        {
          service: "dynamodb",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsVpcEndpointServiceExample.overrideLogicalId("example");
    const awsVpcEndpointExample = new aws.vpcEndpoint.VpcEndpoint(
      this,
      "example_2",
      {
        serviceName: cdktf.Token.asString(
          dataAwsVpcEndpointServiceExample.serviceName
        ),
        vpcId: cdktf.Token.asString(awsVpcExample.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcEndpointExample.overrideLogicalId("example");
    const awsVpcEndpointPolicyExample =
      new aws.vpcEndpointPolicy.VpcEndpointPolicy(this, "example_3", {
        policy: cdktf.Fn.jsonencode({
          Statement: [
            {
              Action: ["dynamodb:*"],
              Effect: "Allow",
              Principal: {
                AWS: "*",
              },
              Resource: "*",
              Sid: "AllowAll",
            },
          ],
          Version: "2012-10-17",
        }),
        vpcEndpointId: cdktf.Token.asString(awsVpcEndpointExample.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcEndpointPolicyExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `vpcEndpointId` - (Required) The VPC Endpoint ID.
* `policy` - (Optional) A policy to attach to the endpoint that controls access to the service. Defaults to full access. All `gateway` and some `interface` endpoints support policies - see the [relevant AWS documentation](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html) for more details. For more information about building AWS IAM policy documents with Terraform, see the [AWS IAM Policy Document Guide](https://learn.hashicorp.com/terraform/aws/iam-policy).

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The ID of the VPC endpoint.

## Import

VPC Endpoint Policies can be imported using the `id`, e.g.

```
$ terraform import aws_vpc_endpoint_policy.example vpce-3ecf2a57
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-3a90315252cb0c2192557dcc0d4e28610e74220ecb2a239feb097742fa1a7fa3 -->